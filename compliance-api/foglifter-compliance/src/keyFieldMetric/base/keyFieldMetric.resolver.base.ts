/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { KeyFieldMetric } from "./KeyFieldMetric";
import { KeyFieldMetricCountArgs } from "./KeyFieldMetricCountArgs";
import { KeyFieldMetricFindManyArgs } from "./KeyFieldMetricFindManyArgs";
import { KeyFieldMetricFindUniqueArgs } from "./KeyFieldMetricFindUniqueArgs";
import { CreateKeyFieldMetricArgs } from "./CreateKeyFieldMetricArgs";
import { UpdateKeyFieldMetricArgs } from "./UpdateKeyFieldMetricArgs";
import { DeleteKeyFieldMetricArgs } from "./DeleteKeyFieldMetricArgs";
import { KeyFieldMetricService } from "../keyFieldMetric.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KeyFieldMetric)
export class KeyFieldMetricResolverBase {
  constructor(
    protected readonly service: KeyFieldMetricService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KeyFieldMetric",
    action: "read",
    possession: "any",
  })
  async _keyFieldMetricsMeta(
    @graphql.Args() args: KeyFieldMetricCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KeyFieldMetric])
  @nestAccessControl.UseRoles({
    resource: "KeyFieldMetric",
    action: "read",
    possession: "any",
  })
  async keyFieldMetrics(
    @graphql.Args() args: KeyFieldMetricFindManyArgs
  ): Promise<KeyFieldMetric[]> {
    return this.service.keyFieldMetrics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KeyFieldMetric, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KeyFieldMetric",
    action: "read",
    possession: "own",
  })
  async keyFieldMetric(
    @graphql.Args() args: KeyFieldMetricFindUniqueArgs
  ): Promise<KeyFieldMetric | null> {
    const result = await this.service.keyFieldMetric(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KeyFieldMetric)
  @nestAccessControl.UseRoles({
    resource: "KeyFieldMetric",
    action: "create",
    possession: "any",
  })
  async createKeyFieldMetric(
    @graphql.Args() args: CreateKeyFieldMetricArgs
  ): Promise<KeyFieldMetric> {
    return await this.service.createKeyFieldMetric({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KeyFieldMetric)
  @nestAccessControl.UseRoles({
    resource: "KeyFieldMetric",
    action: "update",
    possession: "any",
  })
  async updateKeyFieldMetric(
    @graphql.Args() args: UpdateKeyFieldMetricArgs
  ): Promise<KeyFieldMetric | null> {
    try {
      return await this.service.updateKeyFieldMetric({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KeyFieldMetric)
  @nestAccessControl.UseRoles({
    resource: "KeyFieldMetric",
    action: "delete",
    possession: "any",
  })
  async deleteKeyFieldMetric(
    @graphql.Args() args: DeleteKeyFieldMetricArgs
  ): Promise<KeyFieldMetric | null> {
    try {
      return await this.service.deleteKeyFieldMetric(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
