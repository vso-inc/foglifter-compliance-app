/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  IpAddress as PrismaIpAddress,
  Asset as PrismaAsset,
  AssetNetworkDetail as PrismaAssetNetworkDetail,
} from "@prisma/client";

export class IpAddressServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IpAddressCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ipAddress.count(args);
  }

  async ipAddresses(
    args: Prisma.IpAddressFindManyArgs
  ): Promise<PrismaIpAddress[]> {
    return this.prisma.ipAddress.findMany(args);
  }
  async ipAddress(
    args: Prisma.IpAddressFindUniqueArgs
  ): Promise<PrismaIpAddress | null> {
    return this.prisma.ipAddress.findUnique(args);
  }
  async createIpAddress(
    args: Prisma.IpAddressCreateArgs
  ): Promise<PrismaIpAddress> {
    return this.prisma.ipAddress.create(args);
  }
  async updateIpAddress(
    args: Prisma.IpAddressUpdateArgs
  ): Promise<PrismaIpAddress> {
    return this.prisma.ipAddress.update(args);
  }
  async deleteIpAddress(
    args: Prisma.IpAddressDeleteArgs
  ): Promise<PrismaIpAddress> {
    return this.prisma.ipAddress.delete(args);
  }

  async getAsset(parentId: number): Promise<PrismaAsset | null> {
    return this.prisma.ipAddress
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }

  async getAssetNetworkDetails(
    parentId: number
  ): Promise<PrismaAssetNetworkDetail | null> {
    return this.prisma.ipAddress
      .findUnique({
        where: { id: parentId },
      })
      .assetNetworkDetails();
  }
}
