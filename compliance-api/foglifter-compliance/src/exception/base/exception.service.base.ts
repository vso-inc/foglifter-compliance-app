/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Exception as PrismaException,
  Asset as PrismaAsset,
} from "@prisma/client";

export class ExceptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExceptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.exception.count(args);
  }

  async exceptions(
    args: Prisma.ExceptionFindManyArgs
  ): Promise<PrismaException[]> {
    return this.prisma.exception.findMany(args);
  }
  async exception(
    args: Prisma.ExceptionFindUniqueArgs
  ): Promise<PrismaException | null> {
    return this.prisma.exception.findUnique(args);
  }
  async createException(
    args: Prisma.ExceptionCreateArgs
  ): Promise<PrismaException> {
    return this.prisma.exception.create(args);
  }
  async updateException(
    args: Prisma.ExceptionUpdateArgs
  ): Promise<PrismaException> {
    return this.prisma.exception.update(args);
  }
  async deleteException(
    args: Prisma.ExceptionDeleteArgs
  ): Promise<PrismaException> {
    return this.prisma.exception.delete(args);
  }

  async getAsset(parentId: number): Promise<PrismaAsset | null> {
    return this.prisma.exception
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
