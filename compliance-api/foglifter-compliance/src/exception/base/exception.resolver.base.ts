/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Exception } from "./Exception";
import { ExceptionCountArgs } from "./ExceptionCountArgs";
import { ExceptionFindManyArgs } from "./ExceptionFindManyArgs";
import { ExceptionFindUniqueArgs } from "./ExceptionFindUniqueArgs";
import { CreateExceptionArgs } from "./CreateExceptionArgs";
import { UpdateExceptionArgs } from "./UpdateExceptionArgs";
import { DeleteExceptionArgs } from "./DeleteExceptionArgs";
import { Asset } from "../../asset/base/Asset";
import { ExceptionService } from "../exception.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Exception)
export class ExceptionResolverBase {
  constructor(
    protected readonly service: ExceptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Exception",
    action: "read",
    possession: "any",
  })
  async _exceptionsMeta(
    @graphql.Args() args: ExceptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Exception])
  @nestAccessControl.UseRoles({
    resource: "Exception",
    action: "read",
    possession: "any",
  })
  async exceptions(
    @graphql.Args() args: ExceptionFindManyArgs
  ): Promise<Exception[]> {
    return this.service.exceptions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Exception, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Exception",
    action: "read",
    possession: "own",
  })
  async exception(
    @graphql.Args() args: ExceptionFindUniqueArgs
  ): Promise<Exception | null> {
    const result = await this.service.exception(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Exception)
  @nestAccessControl.UseRoles({
    resource: "Exception",
    action: "create",
    possession: "any",
  })
  async createException(
    @graphql.Args() args: CreateExceptionArgs
  ): Promise<Exception> {
    return await this.service.createException({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Exception)
  @nestAccessControl.UseRoles({
    resource: "Exception",
    action: "update",
    possession: "any",
  })
  async updateException(
    @graphql.Args() args: UpdateExceptionArgs
  ): Promise<Exception | null> {
    try {
      return await this.service.updateException({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Exception)
  @nestAccessControl.UseRoles({
    resource: "Exception",
    action: "delete",
    possession: "any",
  })
  async deleteException(
    @graphql.Args() args: DeleteExceptionArgs
  ): Promise<Exception | null> {
    try {
      return await this.service.deleteException(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(@graphql.Parent() parent: Exception): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
