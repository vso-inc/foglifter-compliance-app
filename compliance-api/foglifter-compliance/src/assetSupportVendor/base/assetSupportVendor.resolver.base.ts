/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AssetSupportVendor } from "./AssetSupportVendor";
import { AssetSupportVendorCountArgs } from "./AssetSupportVendorCountArgs";
import { AssetSupportVendorFindManyArgs } from "./AssetSupportVendorFindManyArgs";
import { AssetSupportVendorFindUniqueArgs } from "./AssetSupportVendorFindUniqueArgs";
import { CreateAssetSupportVendorArgs } from "./CreateAssetSupportVendorArgs";
import { UpdateAssetSupportVendorArgs } from "./UpdateAssetSupportVendorArgs";
import { DeleteAssetSupportVendorArgs } from "./DeleteAssetSupportVendorArgs";
import { AssetSupportDetailFindManyArgs } from "../../assetSupportDetail/base/AssetSupportDetailFindManyArgs";
import { AssetSupportDetail } from "../../assetSupportDetail/base/AssetSupportDetail";
import { AssetSupportVendorService } from "../assetSupportVendor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AssetSupportVendor)
export class AssetSupportVendorResolverBase {
  constructor(
    protected readonly service: AssetSupportVendorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "read",
    possession: "any",
  })
  async _assetSupportVendorsMeta(
    @graphql.Args() args: AssetSupportVendorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AssetSupportVendor])
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "read",
    possession: "any",
  })
  async assetSupportVendors(
    @graphql.Args() args: AssetSupportVendorFindManyArgs
  ): Promise<AssetSupportVendor[]> {
    return this.service.assetSupportVendors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AssetSupportVendor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "read",
    possession: "own",
  })
  async assetSupportVendor(
    @graphql.Args() args: AssetSupportVendorFindUniqueArgs
  ): Promise<AssetSupportVendor | null> {
    const result = await this.service.assetSupportVendor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetSupportVendor)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "create",
    possession: "any",
  })
  async createAssetSupportVendor(
    @graphql.Args() args: CreateAssetSupportVendorArgs
  ): Promise<AssetSupportVendor> {
    return await this.service.createAssetSupportVendor({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetSupportVendor)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "update",
    possession: "any",
  })
  async updateAssetSupportVendor(
    @graphql.Args() args: UpdateAssetSupportVendorArgs
  ): Promise<AssetSupportVendor | null> {
    try {
      return await this.service.updateAssetSupportVendor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetSupportVendor)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "delete",
    possession: "any",
  })
  async deleteAssetSupportVendor(
    @graphql.Args() args: DeleteAssetSupportVendorArgs
  ): Promise<AssetSupportVendor | null> {
    try {
      return await this.service.deleteAssetSupportVendor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AssetSupportDetail], {
    name: "assetSupportDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "read",
    possession: "any",
  })
  async findAssetSupportDetails(
    @graphql.Parent() parent: AssetSupportVendor,
    @graphql.Args() args: AssetSupportDetailFindManyArgs
  ): Promise<AssetSupportDetail[]> {
    const results = await this.service.findAssetSupportDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
