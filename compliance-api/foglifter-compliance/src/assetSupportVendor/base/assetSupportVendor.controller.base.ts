/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AssetSupportVendorService } from "../assetSupportVendor.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AssetSupportVendorCreateInput } from "./AssetSupportVendorCreateInput";
import { AssetSupportVendor } from "./AssetSupportVendor";
import { AssetSupportVendorFindManyArgs } from "./AssetSupportVendorFindManyArgs";
import { AssetSupportVendorWhereUniqueInput } from "./AssetSupportVendorWhereUniqueInput";
import { AssetSupportVendorUpdateInput } from "./AssetSupportVendorUpdateInput";
import { AssetSupportDetailFindManyArgs } from "../../assetSupportDetail/base/AssetSupportDetailFindManyArgs";
import { AssetSupportDetail } from "../../assetSupportDetail/base/AssetSupportDetail";
import { AssetSupportDetailWhereUniqueInput } from "../../assetSupportDetail/base/AssetSupportDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AssetSupportVendorControllerBase {
  constructor(
    protected readonly service: AssetSupportVendorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetSupportVendor })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAssetSupportVendor(
    @common.Body() data: AssetSupportVendorCreateInput
  ): Promise<AssetSupportVendor> {
    return await this.service.createAssetSupportVendor({
      data: data,
      select: {
        created: true,
        id: true,
        supportVendorContactEmail: true,
        supportVendorContactFax: true,
        supportVendorContactName: true,
        supportVendorContactNotes: true,
        supportVendorContactPhone: true,
        supportVendorName: true,
        updated: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetSupportVendor] })
  @ApiNestedQuery(AssetSupportVendorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assetSupportVendors(
    @common.Req() request: Request
  ): Promise<AssetSupportVendor[]> {
    const args = plainToClass(AssetSupportVendorFindManyArgs, request.query);
    return this.service.assetSupportVendors({
      ...args,
      select: {
        created: true,
        id: true,
        supportVendorContactEmail: true,
        supportVendorContactFax: true,
        supportVendorContactName: true,
        supportVendorContactNotes: true,
        supportVendorContactPhone: true,
        supportVendorName: true,
        updated: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetSupportVendor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assetSupportVendor(
    @common.Param() params: AssetSupportVendorWhereUniqueInput
  ): Promise<AssetSupportVendor | null> {
    const result = await this.service.assetSupportVendor({
      where: params,
      select: {
        created: true,
        id: true,
        supportVendorContactEmail: true,
        supportVendorContactFax: true,
        supportVendorContactName: true,
        supportVendorContactNotes: true,
        supportVendorContactPhone: true,
        supportVendorName: true,
        updated: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetSupportVendor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAssetSupportVendor(
    @common.Param() params: AssetSupportVendorWhereUniqueInput,
    @common.Body() data: AssetSupportVendorUpdateInput
  ): Promise<AssetSupportVendor | null> {
    try {
      return await this.service.updateAssetSupportVendor({
        where: params,
        data: data,
        select: {
          created: true,
          id: true,
          supportVendorContactEmail: true,
          supportVendorContactFax: true,
          supportVendorContactName: true,
          supportVendorContactNotes: true,
          supportVendorContactPhone: true,
          supportVendorName: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetSupportVendor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAssetSupportVendor(
    @common.Param() params: AssetSupportVendorWhereUniqueInput
  ): Promise<AssetSupportVendor | null> {
    try {
      return await this.service.deleteAssetSupportVendor({
        where: params,
        select: {
          created: true,
          id: true,
          supportVendorContactEmail: true,
          supportVendorContactFax: true,
          supportVendorContactName: true,
          supportVendorContactNotes: true,
          supportVendorContactPhone: true,
          supportVendorName: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/assetSupportDetails")
  @ApiNestedQuery(AssetSupportDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "read",
    possession: "any",
  })
  async findAssetSupportDetails(
    @common.Req() request: Request,
    @common.Param() params: AssetSupportVendorWhereUniqueInput
  ): Promise<AssetSupportDetail[]> {
    const query = plainToClass(AssetSupportDetailFindManyArgs, request.query);
    const results = await this.service.findAssetSupportDetails(params.id, {
      ...query,
      select: {
        activityBasedCosting: true,

        asset: {
          select: {
            id: true,
          },
        },

        assetSupportVendor: {
          select: {
            id: true,
          },
        },

        created: true,
        id: true,
        resourceUnitId: true,
        supportContractEndDate: true,
        supportContractId: true,
        supportContractRenewalCost: true,
        supportContractRenewalDate: true,
        supportContractRenewalNotes: true,
        supportContractRenewalTerm: true,
        supportContractStartDate: true,
        updated: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assetSupportDetails")
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "update",
    possession: "any",
  })
  async connectAssetSupportDetails(
    @common.Param() params: AssetSupportVendorWhereUniqueInput,
    @common.Body() body: AssetSupportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetSupportDetails: {
        connect: body,
      },
    };
    await this.service.updateAssetSupportVendor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assetSupportDetails")
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "update",
    possession: "any",
  })
  async updateAssetSupportDetails(
    @common.Param() params: AssetSupportVendorWhereUniqueInput,
    @common.Body() body: AssetSupportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetSupportDetails: {
        set: body,
      },
    };
    await this.service.updateAssetSupportVendor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assetSupportDetails")
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "update",
    possession: "any",
  })
  async disconnectAssetSupportDetails(
    @common.Param() params: AssetSupportVendorWhereUniqueInput,
    @common.Body() body: AssetSupportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetSupportDetails: {
        disconnect: body,
      },
    };
    await this.service.updateAssetSupportVendor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
