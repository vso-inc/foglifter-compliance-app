/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubMgmtBigfixRequestPatchChannelIncludeList } from "./SubMgmtBigfixRequestPatchChannelIncludeList";
import { SubMgmtBigfixRequestPatchChannelIncludeListCountArgs } from "./SubMgmtBigfixRequestPatchChannelIncludeListCountArgs";
import { SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs } from "./SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs";
import { SubMgmtBigfixRequestPatchChannelIncludeListFindUniqueArgs } from "./SubMgmtBigfixRequestPatchChannelIncludeListFindUniqueArgs";
import { CreateSubMgmtBigfixRequestPatchChannelIncludeListArgs } from "./CreateSubMgmtBigfixRequestPatchChannelIncludeListArgs";
import { UpdateSubMgmtBigfixRequestPatchChannelIncludeListArgs } from "./UpdateSubMgmtBigfixRequestPatchChannelIncludeListArgs";
import { DeleteSubMgmtBigfixRequestPatchChannelIncludeListArgs } from "./DeleteSubMgmtBigfixRequestPatchChannelIncludeListArgs";
import { PatchChannel } from "../../patchChannel/base/PatchChannel";
import { SubMgmtChangeLog } from "../../subMgmtChangeLog/base/SubMgmtChangeLog";
import { SubMgmtBigfixRequestPatchChannelIncludeListService } from "../subMgmtBigfixRequestPatchChannelIncludeList.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubMgmtBigfixRequestPatchChannelIncludeList)
export class SubMgmtBigfixRequestPatchChannelIncludeListResolverBase {
  constructor(
    protected readonly service: SubMgmtBigfixRequestPatchChannelIncludeListService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "read",
    possession: "any",
  })
  async _subMgmtBigfixRequestPatchChannelIncludeListsMeta(
    @graphql.Args() args: SubMgmtBigfixRequestPatchChannelIncludeListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubMgmtBigfixRequestPatchChannelIncludeList])
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "read",
    possession: "any",
  })
  async subMgmtBigfixRequestPatchChannelIncludeLists(
    @graphql.Args()
    args: SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs
  ): Promise<SubMgmtBigfixRequestPatchChannelIncludeList[]> {
    return this.service.subMgmtBigfixRequestPatchChannelIncludeLists(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubMgmtBigfixRequestPatchChannelIncludeList, {
    nullable: true,
  })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "read",
    possession: "own",
  })
  async subMgmtBigfixRequestPatchChannelIncludeList(
    @graphql.Args()
    args: SubMgmtBigfixRequestPatchChannelIncludeListFindUniqueArgs
  ): Promise<SubMgmtBigfixRequestPatchChannelIncludeList | null> {
    const result =
      await this.service.subMgmtBigfixRequestPatchChannelIncludeList(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubMgmtBigfixRequestPatchChannelIncludeList)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "create",
    possession: "any",
  })
  async createSubMgmtBigfixRequestPatchChannelIncludeList(
    @graphql.Args() args: CreateSubMgmtBigfixRequestPatchChannelIncludeListArgs
  ): Promise<SubMgmtBigfixRequestPatchChannelIncludeList> {
    return await this.service.createSubMgmtBigfixRequestPatchChannelIncludeList(
      {
        ...args,
        data: {
          ...args.data,

          patchChannel: {
            connect: args.data.patchChannel,
          },

          subMgmtChangeLog: {
            connect: args.data.subMgmtChangeLog,
          },
        },
      }
    );
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubMgmtBigfixRequestPatchChannelIncludeList)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "update",
    possession: "any",
  })
  async updateSubMgmtBigfixRequestPatchChannelIncludeList(
    @graphql.Args() args: UpdateSubMgmtBigfixRequestPatchChannelIncludeListArgs
  ): Promise<SubMgmtBigfixRequestPatchChannelIncludeList | null> {
    try {
      return await this.service.updateSubMgmtBigfixRequestPatchChannelIncludeList(
        {
          ...args,
          data: {
            ...args.data,

            patchChannel: {
              connect: args.data.patchChannel,
            },

            subMgmtChangeLog: {
              connect: args.data.subMgmtChangeLog,
            },
          },
        }
      );
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubMgmtBigfixRequestPatchChannelIncludeList)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "delete",
    possession: "any",
  })
  async deleteSubMgmtBigfixRequestPatchChannelIncludeList(
    @graphql.Args() args: DeleteSubMgmtBigfixRequestPatchChannelIncludeListArgs
  ): Promise<SubMgmtBigfixRequestPatchChannelIncludeList | null> {
    try {
      return await this.service.deleteSubMgmtBigfixRequestPatchChannelIncludeList(
        args
      );
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PatchChannel, {
    nullable: true,
    name: "patchChannel",
  })
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "read",
    possession: "any",
  })
  async getPatchChannel(
    @graphql.Parent() parent: SubMgmtBigfixRequestPatchChannelIncludeList
  ): Promise<PatchChannel | null> {
    const result = await this.service.getPatchChannel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SubMgmtChangeLog, {
    nullable: true,
    name: "subMgmtChangeLog",
  })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "any",
  })
  async getSubMgmtChangeLog(
    @graphql.Parent() parent: SubMgmtBigfixRequestPatchChannelIncludeList
  ): Promise<SubMgmtChangeLog | null> {
    const result = await this.service.getSubMgmtChangeLog(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
