/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApplicationService } from "../application.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApplicationCreateInput } from "./ApplicationCreateInput";
import { Application } from "./Application";
import { ApplicationFindManyArgs } from "./ApplicationFindManyArgs";
import { ApplicationWhereUniqueInput } from "./ApplicationWhereUniqueInput";
import { ApplicationUpdateInput } from "./ApplicationUpdateInput";
import { ApplicationContactFindManyArgs } from "../../applicationContact/base/ApplicationContactFindManyArgs";
import { ApplicationContact } from "../../applicationContact/base/ApplicationContact";
import { ApplicationContactWhereUniqueInput } from "../../applicationContact/base/ApplicationContactWhereUniqueInput";
import { ApplicationDeploymentFindManyArgs } from "../../applicationDeployment/base/ApplicationDeploymentFindManyArgs";
import { ApplicationDeployment } from "../../applicationDeployment/base/ApplicationDeployment";
import { ApplicationDeploymentWhereUniqueInput } from "../../applicationDeployment/base/ApplicationDeploymentWhereUniqueInput";
import { ApplicationLifecycleDetailFindManyArgs } from "../../applicationLifecycleDetail/base/ApplicationLifecycleDetailFindManyArgs";
import { ApplicationLifecycleDetail } from "../../applicationLifecycleDetail/base/ApplicationLifecycleDetail";
import { ApplicationLifecycleDetailWhereUniqueInput } from "../../applicationLifecycleDetail/base/ApplicationLifecycleDetailWhereUniqueInput";
import { ApplicationOrganizationFindManyArgs } from "../../applicationOrganization/base/ApplicationOrganizationFindManyArgs";
import { ApplicationOrganization } from "../../applicationOrganization/base/ApplicationOrganization";
import { ApplicationOrganizationWhereUniqueInput } from "../../applicationOrganization/base/ApplicationOrganizationWhereUniqueInput";
import { ApplicationSupportDetailFindManyArgs } from "../../applicationSupportDetail/base/ApplicationSupportDetailFindManyArgs";
import { ApplicationSupportDetail } from "../../applicationSupportDetail/base/ApplicationSupportDetail";
import { ApplicationSupportDetailWhereUniqueInput } from "../../applicationSupportDetail/base/ApplicationSupportDetailWhereUniqueInput";
import { AttestationFindManyArgs } from "../../attestation/base/AttestationFindManyArgs";
import { Attestation } from "../../attestation/base/Attestation";
import { AttestationWhereUniqueInput } from "../../attestation/base/AttestationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApplicationControllerBase {
  constructor(
    protected readonly service: ApplicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Application })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApplication(
    @common.Body() data: ApplicationCreateInput
  ): Promise<Application> {
    return await this.service.createApplication({
      data: data,
      select: {
        accessesInternet: true,
        applicationId: true,
        businessName: true,
        category: true,
        confidentialityRating: true,
        created: true,
        description: true,
        hasPersonalConfidentialInfo: true,
        hasProtectedHealthInfo: true,
        id: true,
        isLifeSustaining: true,
        isSubjectToPciCompliance: true,
        isSubjectToSoxCompliance: true,
        name: true,
        overrideServerValidation: true,
        shortName: true,
        status: true,
        subCategory: true,
        updated: true,
        updatedBy: true,
        version: true,
        websiteUrl: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Application] })
  @ApiNestedQuery(ApplicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async applications(@common.Req() request: Request): Promise<Application[]> {
    const args = plainToClass(ApplicationFindManyArgs, request.query);
    return this.service.applications({
      ...args,
      select: {
        accessesInternet: true,
        applicationId: true,
        businessName: true,
        category: true,
        confidentialityRating: true,
        created: true,
        description: true,
        hasPersonalConfidentialInfo: true,
        hasProtectedHealthInfo: true,
        id: true,
        isLifeSustaining: true,
        isSubjectToPciCompliance: true,
        isSubjectToSoxCompliance: true,
        name: true,
        overrideServerValidation: true,
        shortName: true,
        status: true,
        subCategory: true,
        updated: true,
        updatedBy: true,
        version: true,
        websiteUrl: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async application(
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Application | null> {
    const result = await this.service.application({
      where: params,
      select: {
        accessesInternet: true,
        applicationId: true,
        businessName: true,
        category: true,
        confidentialityRating: true,
        created: true,
        description: true,
        hasPersonalConfidentialInfo: true,
        hasProtectedHealthInfo: true,
        id: true,
        isLifeSustaining: true,
        isSubjectToPciCompliance: true,
        isSubjectToSoxCompliance: true,
        name: true,
        overrideServerValidation: true,
        shortName: true,
        status: true,
        subCategory: true,
        updated: true,
        updatedBy: true,
        version: true,
        websiteUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() data: ApplicationUpdateInput
  ): Promise<Application | null> {
    try {
      return await this.service.updateApplication({
        where: params,
        data: data,
        select: {
          accessesInternet: true,
          applicationId: true,
          businessName: true,
          category: true,
          confidentialityRating: true,
          created: true,
          description: true,
          hasPersonalConfidentialInfo: true,
          hasProtectedHealthInfo: true,
          id: true,
          isLifeSustaining: true,
          isSubjectToPciCompliance: true,
          isSubjectToSoxCompliance: true,
          name: true,
          overrideServerValidation: true,
          shortName: true,
          status: true,
          subCategory: true,
          updated: true,
          updatedBy: true,
          version: true,
          websiteUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApplication(
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Application | null> {
    try {
      return await this.service.deleteApplication({
        where: params,
        select: {
          accessesInternet: true,
          applicationId: true,
          businessName: true,
          category: true,
          confidentialityRating: true,
          created: true,
          description: true,
          hasPersonalConfidentialInfo: true,
          hasProtectedHealthInfo: true,
          id: true,
          isLifeSustaining: true,
          isSubjectToPciCompliance: true,
          isSubjectToSoxCompliance: true,
          name: true,
          overrideServerValidation: true,
          shortName: true,
          status: true,
          subCategory: true,
          updated: true,
          updatedBy: true,
          version: true,
          websiteUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applicationContact")
  @ApiNestedQuery(ApplicationContactFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApplicationContact",
    action: "read",
    possession: "any",
  })
  async findApplicationContact(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<ApplicationContact[]> {
    const query = plainToClass(ApplicationContactFindManyArgs, request.query);
    const results = await this.service.findApplicationContact(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        applicationId: true,

        contact: {
          select: {
            id: true,
          },
        },

        created: true,
        id: true,
        roleEnds: true,
        roleStarts: true,
        roleType: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationContact")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async connectApplicationContact(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationContact: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationContact")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updateApplicationContact(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationContact: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationContact")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async disconnectApplicationContact(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationContact: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applicationDeployment")
  @ApiNestedQuery(ApplicationDeploymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "read",
    possession: "any",
  })
  async findApplicationDeployment(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<ApplicationDeployment[]> {
    const query = plainToClass(
      ApplicationDeploymentFindManyArgs,
      request.query
    );
    const results = await this.service.findApplicationDeployment(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        asset: {
          select: {
            id: true,
          },
        },

        created: true,
        deploymentId: true,
        deploymentName: true,
        deploymentNote: true,
        deploymentStatus: true,
        deploymentType: true,
        id: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationDeployment")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async connectApplicationDeployment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationDeploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationDeployment: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationDeployment")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updateApplicationDeployment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationDeploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationDeployment: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationDeployment")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async disconnectApplicationDeployment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationDeploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationDeployment: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applicationLifecycleDetails")
  @ApiNestedQuery(ApplicationLifecycleDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApplicationLifecycleDetail",
    action: "read",
    possession: "any",
  })
  async findApplicationLifecycleDetails(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<ApplicationLifecycleDetail[]> {
    const query = plainToClass(
      ApplicationLifecycleDetailFindManyArgs,
      request.query
    );
    const results = await this.service.findApplicationLifecycleDetails(
      params.id,
      {
        ...query,
        select: {
          actualDecommission: true,
          actualRetirement: true,

          application: {
            select: {
              id: true,
            },
          },

          decommissionProcess: true,
          decommissionState: true,
          id: true,
          isDrEnabled: true,
          plannedDecommission: true,
          plannedRetirement: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationLifecycleDetails")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async connectApplicationLifecycleDetails(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationLifecycleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationLifecycleDetails: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationLifecycleDetails")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updateApplicationLifecycleDetails(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationLifecycleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationLifecycleDetails: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationLifecycleDetails")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async disconnectApplicationLifecycleDetails(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationLifecycleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationLifecycleDetails: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applicationOrganization")
  @ApiNestedQuery(ApplicationOrganizationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApplicationOrganization",
    action: "read",
    possession: "any",
  })
  async findApplicationOrganization(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<ApplicationOrganization[]> {
    const query = plainToClass(
      ApplicationOrganizationFindManyArgs,
      request.query
    );
    const results = await this.service.findApplicationOrganization(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        created: true,
        id: true,
        level: true,
        name: true,
        typeField: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationOrganization")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async connectApplicationOrganization(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationOrganization: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationOrganization")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updateApplicationOrganization(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationOrganization: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationOrganization")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async disconnectApplicationOrganization(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationOrganization: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applicationSupportDetails")
  @ApiNestedQuery(ApplicationSupportDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApplicationSupportDetail",
    action: "read",
    possession: "any",
  })
  async findApplicationSupportDetails(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<ApplicationSupportDetail[]> {
    const query = plainToClass(
      ApplicationSupportDetailFindManyArgs,
      request.query
    );
    const results = await this.service.findApplicationSupportDetails(
      params.id,
      {
        ...query,
        select: {
          application: {
            select: {
              id: true,
            },
          },

          businessRequiredRecoveryPointObjective: true,
          businessRequiredRecoveryTimeObjective: true,
          id: true,
          infrastructureSupport: true,
          owningOrganization: true,
          owningSubOrganization: true,
          recoveryPointCapability: true,
          recoveryTimeCapability: true,
          resiliencyTier: true,
          support: true,
          supportOrganization: true,
          supportTier: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationSupportDetails")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async connectApplicationSupportDetails(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationSupportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationSupportDetails: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationSupportDetails")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updateApplicationSupportDetails(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationSupportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationSupportDetails: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationSupportDetails")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async disconnectApplicationSupportDetails(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationSupportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationSupportDetails: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attestation")
  @ApiNestedQuery(AttestationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "any",
  })
  async findAttestation(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Attestation[]> {
    const query = plainToClass(AttestationFindManyArgs, request.query);
    const results = await this.service.findAttestation(params.id, {
      ...query,
      select: {
        alternateContactEmail: true,
        alternateContactNuid: true,

        application: {
          select: {
            id: true,
          },
        },

        attestationType: {
          select: {
            id: true,
          },
        },

        caseId: true,
        connectedToAThirdPartySystem: true,
        created: true,
        guid: true,
        hasSensitiveData: true,
        id: true,
        impactedRegion: true,
        isEmergencyRequest: true,
        isPermanentRequest: true,
        justification: true,
        longTermSolution: true,
        mitigatingCompensatingControls: true,
        owningOrganization: true,
        primaryContactEmail: true,
        primaryContactNuid: true,
        remediationPlan: true,
        remediationPlanTargetedCompletion: true,
        response: true,
        riskManagementOption: true,
        sentToThirdParty: true,
        status: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attestation")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async connectAttestation(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: AttestationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestation: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attestation")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updateAttestation(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: AttestationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestation: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attestation")
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async disconnectAttestation(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: AttestationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestation: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }
}
