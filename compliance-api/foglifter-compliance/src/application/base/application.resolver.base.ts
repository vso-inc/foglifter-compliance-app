/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Application } from "./Application";
import { ApplicationCountArgs } from "./ApplicationCountArgs";
import { ApplicationFindManyArgs } from "./ApplicationFindManyArgs";
import { ApplicationFindUniqueArgs } from "./ApplicationFindUniqueArgs";
import { CreateApplicationArgs } from "./CreateApplicationArgs";
import { UpdateApplicationArgs } from "./UpdateApplicationArgs";
import { DeleteApplicationArgs } from "./DeleteApplicationArgs";
import { ApplicationContactFindManyArgs } from "../../applicationContact/base/ApplicationContactFindManyArgs";
import { ApplicationContact } from "../../applicationContact/base/ApplicationContact";
import { ApplicationDeploymentFindManyArgs } from "../../applicationDeployment/base/ApplicationDeploymentFindManyArgs";
import { ApplicationDeployment } from "../../applicationDeployment/base/ApplicationDeployment";
import { ApplicationLifecycleDetailFindManyArgs } from "../../applicationLifecycleDetail/base/ApplicationLifecycleDetailFindManyArgs";
import { ApplicationLifecycleDetail } from "../../applicationLifecycleDetail/base/ApplicationLifecycleDetail";
import { ApplicationOrganizationFindManyArgs } from "../../applicationOrganization/base/ApplicationOrganizationFindManyArgs";
import { ApplicationOrganization } from "../../applicationOrganization/base/ApplicationOrganization";
import { ApplicationSupportDetailFindManyArgs } from "../../applicationSupportDetail/base/ApplicationSupportDetailFindManyArgs";
import { ApplicationSupportDetail } from "../../applicationSupportDetail/base/ApplicationSupportDetail";
import { AttestationFindManyArgs } from "../../attestation/base/AttestationFindManyArgs";
import { Attestation } from "../../attestation/base/Attestation";
import { ApplicationService } from "../application.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Application)
export class ApplicationResolverBase {
  constructor(
    protected readonly service: ApplicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async _applicationsMeta(
    @graphql.Args() args: ApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Application])
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async applications(
    @graphql.Args() args: ApplicationFindManyArgs
  ): Promise<Application[]> {
    return this.service.applications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Application, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "own",
  })
  async application(
    @graphql.Args() args: ApplicationFindUniqueArgs
  ): Promise<Application | null> {
    const result = await this.service.application(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Application)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "create",
    possession: "any",
  })
  async createApplication(
    @graphql.Args() args: CreateApplicationArgs
  ): Promise<Application> {
    return await this.service.createApplication({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Application)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "update",
    possession: "any",
  })
  async updateApplication(
    @graphql.Args() args: UpdateApplicationArgs
  ): Promise<Application | null> {
    try {
      return await this.service.updateApplication({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Application)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "delete",
    possession: "any",
  })
  async deleteApplication(
    @graphql.Args() args: DeleteApplicationArgs
  ): Promise<Application | null> {
    try {
      return await this.service.deleteApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApplicationContact], {
    name: "applicationContact",
  })
  @nestAccessControl.UseRoles({
    resource: "ApplicationContact",
    action: "read",
    possession: "any",
  })
  async findApplicationContact(
    @graphql.Parent() parent: Application,
    @graphql.Args() args: ApplicationContactFindManyArgs
  ): Promise<ApplicationContact[]> {
    const results = await this.service.findApplicationContact(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApplicationDeployment], {
    name: "applicationDeployment",
  })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "read",
    possession: "any",
  })
  async findApplicationDeployment(
    @graphql.Parent() parent: Application,
    @graphql.Args() args: ApplicationDeploymentFindManyArgs
  ): Promise<ApplicationDeployment[]> {
    const results = await this.service.findApplicationDeployment(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApplicationLifecycleDetail], {
    name: "applicationLifecycleDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "ApplicationLifecycleDetail",
    action: "read",
    possession: "any",
  })
  async findApplicationLifecycleDetails(
    @graphql.Parent() parent: Application,
    @graphql.Args() args: ApplicationLifecycleDetailFindManyArgs
  ): Promise<ApplicationLifecycleDetail[]> {
    const results = await this.service.findApplicationLifecycleDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApplicationOrganization], {
    name: "applicationOrganization",
  })
  @nestAccessControl.UseRoles({
    resource: "ApplicationOrganization",
    action: "read",
    possession: "any",
  })
  async findApplicationOrganization(
    @graphql.Parent() parent: Application,
    @graphql.Args() args: ApplicationOrganizationFindManyArgs
  ): Promise<ApplicationOrganization[]> {
    const results = await this.service.findApplicationOrganization(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApplicationSupportDetail], {
    name: "applicationSupportDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "ApplicationSupportDetail",
    action: "read",
    possession: "any",
  })
  async findApplicationSupportDetails(
    @graphql.Parent() parent: Application,
    @graphql.Args() args: ApplicationSupportDetailFindManyArgs
  ): Promise<ApplicationSupportDetail[]> {
    const results = await this.service.findApplicationSupportDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attestation], { name: "attestation" })
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "any",
  })
  async findAttestation(
    @graphql.Parent() parent: Application,
    @graphql.Args() args: AttestationFindManyArgs
  ): Promise<Attestation[]> {
    const results = await this.service.findAttestation(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
