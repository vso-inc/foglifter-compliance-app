/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AssetSupportDetail } from "./AssetSupportDetail";
import { AssetSupportDetailCountArgs } from "./AssetSupportDetailCountArgs";
import { AssetSupportDetailFindManyArgs } from "./AssetSupportDetailFindManyArgs";
import { AssetSupportDetailFindUniqueArgs } from "./AssetSupportDetailFindUniqueArgs";
import { CreateAssetSupportDetailArgs } from "./CreateAssetSupportDetailArgs";
import { UpdateAssetSupportDetailArgs } from "./UpdateAssetSupportDetailArgs";
import { DeleteAssetSupportDetailArgs } from "./DeleteAssetSupportDetailArgs";
import { Asset } from "../../asset/base/Asset";
import { AssetSupportVendor } from "../../assetSupportVendor/base/AssetSupportVendor";
import { AssetSupportDetailService } from "../assetSupportDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AssetSupportDetail)
export class AssetSupportDetailResolverBase {
  constructor(
    protected readonly service: AssetSupportDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "read",
    possession: "any",
  })
  async _assetSupportDetailsMeta(
    @graphql.Args() args: AssetSupportDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AssetSupportDetail])
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "read",
    possession: "any",
  })
  async assetSupportDetails(
    @graphql.Args() args: AssetSupportDetailFindManyArgs
  ): Promise<AssetSupportDetail[]> {
    return this.service.assetSupportDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AssetSupportDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "read",
    possession: "own",
  })
  async assetSupportDetail(
    @graphql.Args() args: AssetSupportDetailFindUniqueArgs
  ): Promise<AssetSupportDetail | null> {
    const result = await this.service.assetSupportDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetSupportDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "create",
    possession: "any",
  })
  async createAssetSupportDetail(
    @graphql.Args() args: CreateAssetSupportDetailArgs
  ): Promise<AssetSupportDetail> {
    return await this.service.createAssetSupportDetail({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,

        assetSupportVendor: args.data.assetSupportVendor
          ? {
              connect: args.data.assetSupportVendor,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetSupportDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "update",
    possession: "any",
  })
  async updateAssetSupportDetail(
    @graphql.Args() args: UpdateAssetSupportDetailArgs
  ): Promise<AssetSupportDetail | null> {
    try {
      return await this.service.updateAssetSupportDetail({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,

          assetSupportVendor: args.data.assetSupportVendor
            ? {
                connect: args.data.assetSupportVendor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetSupportDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "delete",
    possession: "any",
  })
  async deleteAssetSupportDetail(
    @graphql.Args() args: DeleteAssetSupportDetailArgs
  ): Promise<AssetSupportDetail | null> {
    try {
      return await this.service.deleteAssetSupportDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: AssetSupportDetail
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AssetSupportVendor, {
    nullable: true,
    name: "assetSupportVendor",
  })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportVendor",
    action: "read",
    possession: "any",
  })
  async getAssetSupportVendor(
    @graphql.Parent() parent: AssetSupportDetail
  ): Promise<AssetSupportVendor | null> {
    const result = await this.service.getAssetSupportVendor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
