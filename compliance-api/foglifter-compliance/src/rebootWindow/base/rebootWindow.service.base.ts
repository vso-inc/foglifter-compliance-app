/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RebootWindow as PrismaRebootWindow,
  Asset as PrismaAsset,
} from "@prisma/client";

export class RebootWindowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RebootWindowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rebootWindow.count(args);
  }

  async rebootWindows(
    args: Prisma.RebootWindowFindManyArgs
  ): Promise<PrismaRebootWindow[]> {
    return this.prisma.rebootWindow.findMany(args);
  }
  async rebootWindow(
    args: Prisma.RebootWindowFindUniqueArgs
  ): Promise<PrismaRebootWindow | null> {
    return this.prisma.rebootWindow.findUnique(args);
  }
  async createRebootWindow(
    args: Prisma.RebootWindowCreateArgs
  ): Promise<PrismaRebootWindow> {
    return this.prisma.rebootWindow.create(args);
  }
  async updateRebootWindow(
    args: Prisma.RebootWindowUpdateArgs
  ): Promise<PrismaRebootWindow> {
    return this.prisma.rebootWindow.update(args);
  }
  async deleteRebootWindow(
    args: Prisma.RebootWindowDeleteArgs
  ): Promise<PrismaRebootWindow> {
    return this.prisma.rebootWindow.delete(args);
  }

  async getAsset(parentId: bigint): Promise<PrismaAsset | null> {
    return this.prisma.rebootWindow
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
