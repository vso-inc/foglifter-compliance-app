/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RebootWindow } from "./RebootWindow";
import { RebootWindowCountArgs } from "./RebootWindowCountArgs";
import { RebootWindowFindManyArgs } from "./RebootWindowFindManyArgs";
import { RebootWindowFindUniqueArgs } from "./RebootWindowFindUniqueArgs";
import { CreateRebootWindowArgs } from "./CreateRebootWindowArgs";
import { UpdateRebootWindowArgs } from "./UpdateRebootWindowArgs";
import { DeleteRebootWindowArgs } from "./DeleteRebootWindowArgs";
import { Asset } from "../../asset/base/Asset";
import { RebootWindowService } from "../rebootWindow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RebootWindow)
export class RebootWindowResolverBase {
  constructor(
    protected readonly service: RebootWindowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RebootWindow",
    action: "read",
    possession: "any",
  })
  async _rebootWindowsMeta(
    @graphql.Args() args: RebootWindowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RebootWindow])
  @nestAccessControl.UseRoles({
    resource: "RebootWindow",
    action: "read",
    possession: "any",
  })
  async rebootWindows(
    @graphql.Args() args: RebootWindowFindManyArgs
  ): Promise<RebootWindow[]> {
    return this.service.rebootWindows(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RebootWindow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RebootWindow",
    action: "read",
    possession: "own",
  })
  async rebootWindow(
    @graphql.Args() args: RebootWindowFindUniqueArgs
  ): Promise<RebootWindow | null> {
    const result = await this.service.rebootWindow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RebootWindow)
  @nestAccessControl.UseRoles({
    resource: "RebootWindow",
    action: "create",
    possession: "any",
  })
  async createRebootWindow(
    @graphql.Args() args: CreateRebootWindowArgs
  ): Promise<RebootWindow> {
    return await this.service.createRebootWindow({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RebootWindow)
  @nestAccessControl.UseRoles({
    resource: "RebootWindow",
    action: "update",
    possession: "any",
  })
  async updateRebootWindow(
    @graphql.Args() args: UpdateRebootWindowArgs
  ): Promise<RebootWindow | null> {
    try {
      return await this.service.updateRebootWindow({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RebootWindow)
  @nestAccessControl.UseRoles({
    resource: "RebootWindow",
    action: "delete",
    possession: "any",
  })
  async deleteRebootWindow(
    @graphql.Args() args: DeleteRebootWindowArgs
  ): Promise<RebootWindow | null> {
    try {
      return await this.service.deleteRebootWindow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: RebootWindow
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
