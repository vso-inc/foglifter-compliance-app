/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AttestationType as PrismaAttestationType,
  Attestation as PrismaAttestation,
} from "@prisma/client";

export class AttestationTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AttestationTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.attestationType.count(args);
  }

  async attestationTypes(
    args: Prisma.AttestationTypeFindManyArgs
  ): Promise<PrismaAttestationType[]> {
    return this.prisma.attestationType.findMany(args);
  }
  async attestationType(
    args: Prisma.AttestationTypeFindUniqueArgs
  ): Promise<PrismaAttestationType | null> {
    return this.prisma.attestationType.findUnique(args);
  }
  async createAttestationType(
    args: Prisma.AttestationTypeCreateArgs
  ): Promise<PrismaAttestationType> {
    return this.prisma.attestationType.create(args);
  }
  async updateAttestationType(
    args: Prisma.AttestationTypeUpdateArgs
  ): Promise<PrismaAttestationType> {
    return this.prisma.attestationType.update(args);
  }
  async deleteAttestationType(
    args: Prisma.AttestationTypeDeleteArgs
  ): Promise<PrismaAttestationType> {
    return this.prisma.attestationType.delete(args);
  }

  async findAttestation(
    parentId: number,
    args: Prisma.AttestationFindManyArgs
  ): Promise<PrismaAttestation[]> {
    return this.prisma.attestationType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attestation(args);
  }
}
