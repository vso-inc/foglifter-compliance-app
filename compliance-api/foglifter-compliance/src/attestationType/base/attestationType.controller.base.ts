/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AttestationTypeService } from "../attestationType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AttestationTypeCreateInput } from "./AttestationTypeCreateInput";
import { AttestationType } from "./AttestationType";
import { AttestationTypeFindManyArgs } from "./AttestationTypeFindManyArgs";
import { AttestationTypeWhereUniqueInput } from "./AttestationTypeWhereUniqueInput";
import { AttestationTypeUpdateInput } from "./AttestationTypeUpdateInput";
import { AttestationFindManyArgs } from "../../attestation/base/AttestationFindManyArgs";
import { Attestation } from "../../attestation/base/Attestation";
import { AttestationWhereUniqueInput } from "../../attestation/base/AttestationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AttestationTypeControllerBase {
  constructor(
    protected readonly service: AttestationTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AttestationType })
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAttestationType(
    @common.Body() data: AttestationTypeCreateInput
  ): Promise<AttestationType> {
    return await this.service.createAttestationType({
      data: data,
      select: {
        created: true,
        description: true,
        id: true,
        name: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AttestationType] })
  @ApiNestedQuery(AttestationTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async attestationTypes(
    @common.Req() request: Request
  ): Promise<AttestationType[]> {
    const args = plainToClass(AttestationTypeFindManyArgs, request.query);
    return this.service.attestationTypes({
      ...args,
      select: {
        created: true,
        description: true,
        id: true,
        name: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AttestationType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async attestationType(
    @common.Param() params: AttestationTypeWhereUniqueInput
  ): Promise<AttestationType | null> {
    const result = await this.service.attestationType({
      where: params,
      select: {
        created: true,
        description: true,
        id: true,
        name: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AttestationType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAttestationType(
    @common.Param() params: AttestationTypeWhereUniqueInput,
    @common.Body() data: AttestationTypeUpdateInput
  ): Promise<AttestationType | null> {
    try {
      return await this.service.updateAttestationType({
        where: params,
        data: data,
        select: {
          created: true,
          description: true,
          id: true,
          name: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AttestationType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAttestationType(
    @common.Param() params: AttestationTypeWhereUniqueInput
  ): Promise<AttestationType | null> {
    try {
      return await this.service.deleteAttestationType({
        where: params,
        select: {
          created: true,
          description: true,
          id: true,
          name: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attestation")
  @ApiNestedQuery(AttestationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "any",
  })
  async findAttestation(
    @common.Req() request: Request,
    @common.Param() params: AttestationTypeWhereUniqueInput
  ): Promise<Attestation[]> {
    const query = plainToClass(AttestationFindManyArgs, request.query);
    const results = await this.service.findAttestation(params.id, {
      ...query,
      select: {
        alternateContactEmail: true,
        alternateContactNuid: true,

        application: {
          select: {
            id: true,
          },
        },

        attestationType: {
          select: {
            id: true,
          },
        },

        caseId: true,
        connectedToAThirdPartySystem: true,
        created: true,
        guid: true,
        hasSensitiveData: true,
        id: true,
        impactedRegion: true,
        isEmergencyRequest: true,
        isPermanentRequest: true,
        justification: true,
        longTermSolution: true,
        mitigatingCompensatingControls: true,
        owningOrganization: true,
        primaryContactEmail: true,
        primaryContactNuid: true,
        remediationPlan: true,
        remediationPlanTargetedCompletion: true,
        response: true,
        riskManagementOption: true,
        sentToThirdParty: true,
        status: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attestation")
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "update",
    possession: "any",
  })
  async connectAttestation(
    @common.Param() params: AttestationTypeWhereUniqueInput,
    @common.Body() body: AttestationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestation: {
        connect: body,
      },
    };
    await this.service.updateAttestationType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attestation")
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "update",
    possession: "any",
  })
  async updateAttestation(
    @common.Param() params: AttestationTypeWhereUniqueInput,
    @common.Body() body: AttestationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestation: {
        set: body,
      },
    };
    await this.service.updateAttestationType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attestation")
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "update",
    possession: "any",
  })
  async disconnectAttestation(
    @common.Param() params: AttestationTypeWhereUniqueInput,
    @common.Body() body: AttestationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestation: {
        disconnect: body,
      },
    };
    await this.service.updateAttestationType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
