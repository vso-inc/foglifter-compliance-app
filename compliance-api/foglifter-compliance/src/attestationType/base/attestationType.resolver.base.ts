/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AttestationType } from "./AttestationType";
import { AttestationTypeCountArgs } from "./AttestationTypeCountArgs";
import { AttestationTypeFindManyArgs } from "./AttestationTypeFindManyArgs";
import { AttestationTypeFindUniqueArgs } from "./AttestationTypeFindUniqueArgs";
import { CreateAttestationTypeArgs } from "./CreateAttestationTypeArgs";
import { UpdateAttestationTypeArgs } from "./UpdateAttestationTypeArgs";
import { DeleteAttestationTypeArgs } from "./DeleteAttestationTypeArgs";
import { AttestationFindManyArgs } from "../../attestation/base/AttestationFindManyArgs";
import { Attestation } from "../../attestation/base/Attestation";
import { AttestationTypeService } from "../attestationType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AttestationType)
export class AttestationTypeResolverBase {
  constructor(
    protected readonly service: AttestationTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "read",
    possession: "any",
  })
  async _attestationTypesMeta(
    @graphql.Args() args: AttestationTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AttestationType])
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "read",
    possession: "any",
  })
  async attestationTypes(
    @graphql.Args() args: AttestationTypeFindManyArgs
  ): Promise<AttestationType[]> {
    return this.service.attestationTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AttestationType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "read",
    possession: "own",
  })
  async attestationType(
    @graphql.Args() args: AttestationTypeFindUniqueArgs
  ): Promise<AttestationType | null> {
    const result = await this.service.attestationType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttestationType)
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "create",
    possession: "any",
  })
  async createAttestationType(
    @graphql.Args() args: CreateAttestationTypeArgs
  ): Promise<AttestationType> {
    return await this.service.createAttestationType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttestationType)
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "update",
    possession: "any",
  })
  async updateAttestationType(
    @graphql.Args() args: UpdateAttestationTypeArgs
  ): Promise<AttestationType | null> {
    try {
      return await this.service.updateAttestationType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AttestationType)
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "delete",
    possession: "any",
  })
  async deleteAttestationType(
    @graphql.Args() args: DeleteAttestationTypeArgs
  ): Promise<AttestationType | null> {
    try {
      return await this.service.deleteAttestationType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attestation], { name: "attestation" })
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "any",
  })
  async findAttestation(
    @graphql.Parent() parent: AttestationType,
    @graphql.Args() args: AttestationFindManyArgs
  ): Promise<Attestation[]> {
    const results = await this.service.findAttestation(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
