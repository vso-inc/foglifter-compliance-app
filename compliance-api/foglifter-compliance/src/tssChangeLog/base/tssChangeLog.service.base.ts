/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TssChangeLog as PrismaTssChangeLog,
  Asset as PrismaAsset,
  BigfixRequest as PrismaBigfixRequest,
  TssChangeLogStatus as PrismaTssChangeLogStatus,
} from "@prisma/client";

export class TssChangeLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TssChangeLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tssChangeLog.count(args);
  }

  async tssChangeLogs(
    args: Prisma.TssChangeLogFindManyArgs
  ): Promise<PrismaTssChangeLog[]> {
    return this.prisma.tssChangeLog.findMany(args);
  }
  async tssChangeLog(
    args: Prisma.TssChangeLogFindUniqueArgs
  ): Promise<PrismaTssChangeLog | null> {
    return this.prisma.tssChangeLog.findUnique(args);
  }
  async createTssChangeLog(
    args: Prisma.TssChangeLogCreateArgs
  ): Promise<PrismaTssChangeLog> {
    return this.prisma.tssChangeLog.create(args);
  }
  async updateTssChangeLog(
    args: Prisma.TssChangeLogUpdateArgs
  ): Promise<PrismaTssChangeLog> {
    return this.prisma.tssChangeLog.update(args);
  }
  async deleteTssChangeLog(
    args: Prisma.TssChangeLogDeleteArgs
  ): Promise<PrismaTssChangeLog> {
    return this.prisma.tssChangeLog.delete(args);
  }

  async getAsset(parentId: number): Promise<PrismaAsset | null> {
    return this.prisma.tssChangeLog
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }

  async getBigfixRequest(
    parentId: number
  ): Promise<PrismaBigfixRequest | null> {
    return this.prisma.tssChangeLog
      .findUnique({
        where: { id: parentId },
      })
      .bigfixRequest();
  }

  async getTssChangeLogStatus(
    parentId: number
  ): Promise<PrismaTssChangeLogStatus | null> {
    return this.prisma.tssChangeLog
      .findUnique({
        where: { id: parentId },
      })
      .tssChangeLogStatus();
  }
}
