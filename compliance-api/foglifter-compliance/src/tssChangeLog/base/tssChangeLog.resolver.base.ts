/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TssChangeLog } from "./TssChangeLog";
import { TssChangeLogCountArgs } from "./TssChangeLogCountArgs";
import { TssChangeLogFindManyArgs } from "./TssChangeLogFindManyArgs";
import { TssChangeLogFindUniqueArgs } from "./TssChangeLogFindUniqueArgs";
import { CreateTssChangeLogArgs } from "./CreateTssChangeLogArgs";
import { UpdateTssChangeLogArgs } from "./UpdateTssChangeLogArgs";
import { DeleteTssChangeLogArgs } from "./DeleteTssChangeLogArgs";
import { Asset } from "../../asset/base/Asset";
import { BigfixRequest } from "../../bigfixRequest/base/BigfixRequest";
import { TssChangeLogStatus } from "../../tssChangeLogStatus/base/TssChangeLogStatus";
import { TssChangeLogService } from "../tssChangeLog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TssChangeLog)
export class TssChangeLogResolverBase {
  constructor(
    protected readonly service: TssChangeLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "read",
    possession: "any",
  })
  async _tssChangeLogsMeta(
    @graphql.Args() args: TssChangeLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TssChangeLog])
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "read",
    possession: "any",
  })
  async tssChangeLogs(
    @graphql.Args() args: TssChangeLogFindManyArgs
  ): Promise<TssChangeLog[]> {
    return this.service.tssChangeLogs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TssChangeLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "read",
    possession: "own",
  })
  async tssChangeLog(
    @graphql.Args() args: TssChangeLogFindUniqueArgs
  ): Promise<TssChangeLog | null> {
    const result = await this.service.tssChangeLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TssChangeLog)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "create",
    possession: "any",
  })
  async createTssChangeLog(
    @graphql.Args() args: CreateTssChangeLogArgs
  ): Promise<TssChangeLog> {
    return await this.service.createTssChangeLog({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,

        bigfixRequest: args.data.bigfixRequest
          ? {
              connect: args.data.bigfixRequest,
            }
          : undefined,

        tssChangeLogStatus: {
          connect: args.data.tssChangeLogStatus,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TssChangeLog)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "update",
    possession: "any",
  })
  async updateTssChangeLog(
    @graphql.Args() args: UpdateTssChangeLogArgs
  ): Promise<TssChangeLog | null> {
    try {
      return await this.service.updateTssChangeLog({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,

          bigfixRequest: args.data.bigfixRequest
            ? {
                connect: args.data.bigfixRequest,
              }
            : undefined,

          tssChangeLogStatus: {
            connect: args.data.tssChangeLogStatus,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TssChangeLog)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "delete",
    possession: "any",
  })
  async deleteTssChangeLog(
    @graphql.Args() args: DeleteTssChangeLogArgs
  ): Promise<TssChangeLog | null> {
    try {
      return await this.service.deleteTssChangeLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: TssChangeLog
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BigfixRequest, {
    nullable: true,
    name: "bigfixRequest",
  })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "any",
  })
  async getBigfixRequest(
    @graphql.Parent() parent: TssChangeLog
  ): Promise<BigfixRequest | null> {
    const result = await this.service.getBigfixRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TssChangeLogStatus, {
    nullable: true,
    name: "tssChangeLogStatus",
  })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "read",
    possession: "any",
  })
  async getTssChangeLogStatus(
    @graphql.Parent() parent: TssChangeLog
  ): Promise<TssChangeLogStatus | null> {
    const result = await this.service.getTssChangeLogStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
