/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OperationsCalendarStatus as PrismaOperationsCalendarStatus,
  OperationsCalendar as PrismaOperationsCalendar,
} from "@prisma/client";

export class OperationsCalendarStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OperationsCalendarStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.operationsCalendarStatus.count(args);
  }

  async operationsCalendarStatuses(
    args: Prisma.OperationsCalendarStatusFindManyArgs
  ): Promise<PrismaOperationsCalendarStatus[]> {
    return this.prisma.operationsCalendarStatus.findMany(args);
  }
  async operationsCalendarStatus(
    args: Prisma.OperationsCalendarStatusFindUniqueArgs
  ): Promise<PrismaOperationsCalendarStatus | null> {
    return this.prisma.operationsCalendarStatus.findUnique(args);
  }
  async createOperationsCalendarStatus(
    args: Prisma.OperationsCalendarStatusCreateArgs
  ): Promise<PrismaOperationsCalendarStatus> {
    return this.prisma.operationsCalendarStatus.create(args);
  }
  async updateOperationsCalendarStatus(
    args: Prisma.OperationsCalendarStatusUpdateArgs
  ): Promise<PrismaOperationsCalendarStatus> {
    return this.prisma.operationsCalendarStatus.update(args);
  }
  async deleteOperationsCalendarStatus(
    args: Prisma.OperationsCalendarStatusDeleteArgs
  ): Promise<PrismaOperationsCalendarStatus> {
    return this.prisma.operationsCalendarStatus.delete(args);
  }

  async findOperationsCalendar(
    parentId: number,
    args: Prisma.OperationsCalendarFindManyArgs
  ): Promise<PrismaOperationsCalendar[]> {
    return this.prisma.operationsCalendarStatus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .operationsCalendar(args);
  }
}
