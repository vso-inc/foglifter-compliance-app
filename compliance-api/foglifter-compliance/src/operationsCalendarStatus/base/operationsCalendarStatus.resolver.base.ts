/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OperationsCalendarStatus } from "./OperationsCalendarStatus";
import { OperationsCalendarStatusCountArgs } from "./OperationsCalendarStatusCountArgs";
import { OperationsCalendarStatusFindManyArgs } from "./OperationsCalendarStatusFindManyArgs";
import { OperationsCalendarStatusFindUniqueArgs } from "./OperationsCalendarStatusFindUniqueArgs";
import { CreateOperationsCalendarStatusArgs } from "./CreateOperationsCalendarStatusArgs";
import { UpdateOperationsCalendarStatusArgs } from "./UpdateOperationsCalendarStatusArgs";
import { DeleteOperationsCalendarStatusArgs } from "./DeleteOperationsCalendarStatusArgs";
import { OperationsCalendarFindManyArgs } from "../../operationsCalendar/base/OperationsCalendarFindManyArgs";
import { OperationsCalendar } from "../../operationsCalendar/base/OperationsCalendar";
import { OperationsCalendarStatusService } from "../operationsCalendarStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OperationsCalendarStatus)
export class OperationsCalendarStatusResolverBase {
  constructor(
    protected readonly service: OperationsCalendarStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "read",
    possession: "any",
  })
  async _operationsCalendarStatusesMeta(
    @graphql.Args() args: OperationsCalendarStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OperationsCalendarStatus])
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "read",
    possession: "any",
  })
  async operationsCalendarStatuses(
    @graphql.Args() args: OperationsCalendarStatusFindManyArgs
  ): Promise<OperationsCalendarStatus[]> {
    return this.service.operationsCalendarStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OperationsCalendarStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "read",
    possession: "own",
  })
  async operationsCalendarStatus(
    @graphql.Args() args: OperationsCalendarStatusFindUniqueArgs
  ): Promise<OperationsCalendarStatus | null> {
    const result = await this.service.operationsCalendarStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OperationsCalendarStatus)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "create",
    possession: "any",
  })
  async createOperationsCalendarStatus(
    @graphql.Args() args: CreateOperationsCalendarStatusArgs
  ): Promise<OperationsCalendarStatus> {
    return await this.service.createOperationsCalendarStatus({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OperationsCalendarStatus)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "update",
    possession: "any",
  })
  async updateOperationsCalendarStatus(
    @graphql.Args() args: UpdateOperationsCalendarStatusArgs
  ): Promise<OperationsCalendarStatus | null> {
    try {
      return await this.service.updateOperationsCalendarStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OperationsCalendarStatus)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "delete",
    possession: "any",
  })
  async deleteOperationsCalendarStatus(
    @graphql.Args() args: DeleteOperationsCalendarStatusArgs
  ): Promise<OperationsCalendarStatus | null> {
    try {
      return await this.service.deleteOperationsCalendarStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OperationsCalendar], {
    name: "operationsCalendar",
  })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "read",
    possession: "any",
  })
  async findOperationsCalendar(
    @graphql.Parent() parent: OperationsCalendarStatus,
    @graphql.Args() args: OperationsCalendarFindManyArgs
  ): Promise<OperationsCalendar[]> {
    const results = await this.service.findOperationsCalendar(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
