/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OperationsCalendarStatusService } from "../operationsCalendarStatus.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OperationsCalendarStatusCreateInput } from "./OperationsCalendarStatusCreateInput";
import { OperationsCalendarStatus } from "./OperationsCalendarStatus";
import { OperationsCalendarStatusFindManyArgs } from "./OperationsCalendarStatusFindManyArgs";
import { OperationsCalendarStatusWhereUniqueInput } from "./OperationsCalendarStatusWhereUniqueInput";
import { OperationsCalendarStatusUpdateInput } from "./OperationsCalendarStatusUpdateInput";
import { OperationsCalendarFindManyArgs } from "../../operationsCalendar/base/OperationsCalendarFindManyArgs";
import { OperationsCalendar } from "../../operationsCalendar/base/OperationsCalendar";
import { OperationsCalendarWhereUniqueInput } from "../../operationsCalendar/base/OperationsCalendarWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OperationsCalendarStatusControllerBase {
  constructor(
    protected readonly service: OperationsCalendarStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OperationsCalendarStatus })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOperationsCalendarStatus(
    @common.Body() data: OperationsCalendarStatusCreateInput
  ): Promise<OperationsCalendarStatus> {
    return await this.service.createOperationsCalendarStatus({
      data: data,
      select: {
        id: true,
        status: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OperationsCalendarStatus] })
  @ApiNestedQuery(OperationsCalendarStatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async operationsCalendarStatuses(
    @common.Req() request: Request
  ): Promise<OperationsCalendarStatus[]> {
    const args = plainToClass(
      OperationsCalendarStatusFindManyArgs,
      request.query
    );
    return this.service.operationsCalendarStatuses({
      ...args,
      select: {
        id: true,
        status: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OperationsCalendarStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async operationsCalendarStatus(
    @common.Param() params: OperationsCalendarStatusWhereUniqueInput
  ): Promise<OperationsCalendarStatus | null> {
    const result = await this.service.operationsCalendarStatus({
      where: params,
      select: {
        id: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OperationsCalendarStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOperationsCalendarStatus(
    @common.Param() params: OperationsCalendarStatusWhereUniqueInput,
    @common.Body() data: OperationsCalendarStatusUpdateInput
  ): Promise<OperationsCalendarStatus | null> {
    try {
      return await this.service.updateOperationsCalendarStatus({
        where: params,
        data: data,
        select: {
          id: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OperationsCalendarStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOperationsCalendarStatus(
    @common.Param() params: OperationsCalendarStatusWhereUniqueInput
  ): Promise<OperationsCalendarStatus | null> {
    try {
      return await this.service.deleteOperationsCalendarStatus({
        where: params,
        select: {
          id: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/operationsCalendar")
  @ApiNestedQuery(OperationsCalendarFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "read",
    possession: "any",
  })
  async findOperationsCalendar(
    @common.Req() request: Request,
    @common.Param() params: OperationsCalendarStatusWhereUniqueInput
  ): Promise<OperationsCalendar[]> {
    const query = plainToClass(OperationsCalendarFindManyArgs, request.query);
    const results = await this.service.findOperationsCalendar(params.id, {
      ...query,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        changeCoordinator: true,
        changeManager: true,
        changeRequest: true,

        contact: {
          select: {
            id: true,
          },
        },

        created: true,
        developmentManager: true,
        id: true,
        lastPatched: true,
        locked: true,
        lockedBy: true,
        note: true,

        operationsCalendarStatus: {
          select: {
            id: true,
          },
        },

        projectManager: true,
        reasonCode: true,
        scheduled: true,
        scheduledBy: true,
        serviceId: true,
        technicalLead: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/operationsCalendar")
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "update",
    possession: "any",
  })
  async connectOperationsCalendar(
    @common.Param() params: OperationsCalendarStatusWhereUniqueInput,
    @common.Body() body: OperationsCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      operationsCalendar: {
        connect: body,
      },
    };
    await this.service.updateOperationsCalendarStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/operationsCalendar")
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "update",
    possession: "any",
  })
  async updateOperationsCalendar(
    @common.Param() params: OperationsCalendarStatusWhereUniqueInput,
    @common.Body() body: OperationsCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      operationsCalendar: {
        set: body,
      },
    };
    await this.service.updateOperationsCalendarStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/operationsCalendar")
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "update",
    possession: "any",
  })
  async disconnectOperationsCalendar(
    @common.Param() params: OperationsCalendarStatusWhereUniqueInput,
    @common.Body() body: OperationsCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      operationsCalendar: {
        disconnect: body,
      },
    };
    await this.service.updateOperationsCalendarStatus({
      where: params,
      data,
      select: { id: true },
    });
  }
}
