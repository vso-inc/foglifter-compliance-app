/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PatchChannelFixlet } from "./PatchChannelFixlet";
import { PatchChannelFixletCountArgs } from "./PatchChannelFixletCountArgs";
import { PatchChannelFixletFindManyArgs } from "./PatchChannelFixletFindManyArgs";
import { PatchChannelFixletFindUniqueArgs } from "./PatchChannelFixletFindUniqueArgs";
import { CreatePatchChannelFixletArgs } from "./CreatePatchChannelFixletArgs";
import { UpdatePatchChannelFixletArgs } from "./UpdatePatchChannelFixletArgs";
import { DeletePatchChannelFixletArgs } from "./DeletePatchChannelFixletArgs";
import { AttestationHostFixletFindManyArgs } from "../../attestationHostFixlet/base/AttestationHostFixletFindManyArgs";
import { AttestationHostFixlet } from "../../attestationHostFixlet/base/AttestationHostFixlet";
import { PatchChannel } from "../../patchChannel/base/PatchChannel";
import { PatchChannelFixletService } from "../patchChannelFixlet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PatchChannelFixlet)
export class PatchChannelFixletResolverBase {
  constructor(
    protected readonly service: PatchChannelFixletService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "read",
    possession: "any",
  })
  async _patchChannelFixletsMeta(
    @graphql.Args() args: PatchChannelFixletCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PatchChannelFixlet])
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "read",
    possession: "any",
  })
  async patchChannelFixlets(
    @graphql.Args() args: PatchChannelFixletFindManyArgs
  ): Promise<PatchChannelFixlet[]> {
    return this.service.patchChannelFixlets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PatchChannelFixlet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "read",
    possession: "own",
  })
  async patchChannelFixlet(
    @graphql.Args() args: PatchChannelFixletFindUniqueArgs
  ): Promise<PatchChannelFixlet | null> {
    const result = await this.service.patchChannelFixlet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatchChannelFixlet)
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "create",
    possession: "any",
  })
  async createPatchChannelFixlet(
    @graphql.Args() args: CreatePatchChannelFixletArgs
  ): Promise<PatchChannelFixlet> {
    return await this.service.createPatchChannelFixlet({
      ...args,
      data: {
        ...args.data,

        patchChannel: args.data.patchChannel
          ? {
              connect: args.data.patchChannel,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatchChannelFixlet)
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "update",
    possession: "any",
  })
  async updatePatchChannelFixlet(
    @graphql.Args() args: UpdatePatchChannelFixletArgs
  ): Promise<PatchChannelFixlet | null> {
    try {
      return await this.service.updatePatchChannelFixlet({
        ...args,
        data: {
          ...args.data,

          patchChannel: args.data.patchChannel
            ? {
                connect: args.data.patchChannel,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PatchChannelFixlet)
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "delete",
    possession: "any",
  })
  async deletePatchChannelFixlet(
    @graphql.Args() args: DeletePatchChannelFixletArgs
  ): Promise<PatchChannelFixlet | null> {
    try {
      return await this.service.deletePatchChannelFixlet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AttestationHostFixlet], {
    name: "attestationHostFixlet",
  })
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "read",
    possession: "any",
  })
  async findAttestationHostFixlet(
    @graphql.Parent() parent: PatchChannelFixlet,
    @graphql.Args() args: AttestationHostFixletFindManyArgs
  ): Promise<AttestationHostFixlet[]> {
    const results = await this.service.findAttestationHostFixlet(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PatchChannel, {
    nullable: true,
    name: "patchChannel",
  })
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "read",
    possession: "any",
  })
  async getPatchChannel(
    @graphql.Parent() parent: PatchChannelFixlet
  ): Promise<PatchChannel | null> {
    const result = await this.service.getPatchChannel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
