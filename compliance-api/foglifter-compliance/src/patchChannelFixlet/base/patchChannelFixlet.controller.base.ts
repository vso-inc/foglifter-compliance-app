/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PatchChannelFixletService } from "../patchChannelFixlet.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PatchChannelFixletCreateInput } from "./PatchChannelFixletCreateInput";
import { PatchChannelFixlet } from "./PatchChannelFixlet";
import { PatchChannelFixletFindManyArgs } from "./PatchChannelFixletFindManyArgs";
import { PatchChannelFixletWhereUniqueInput } from "./PatchChannelFixletWhereUniqueInput";
import { PatchChannelFixletUpdateInput } from "./PatchChannelFixletUpdateInput";
import { AttestationHostFixletFindManyArgs } from "../../attestationHostFixlet/base/AttestationHostFixletFindManyArgs";
import { AttestationHostFixlet } from "../../attestationHostFixlet/base/AttestationHostFixlet";
import { AttestationHostFixletWhereUniqueInput } from "../../attestationHostFixlet/base/AttestationHostFixletWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PatchChannelFixletControllerBase {
  constructor(
    protected readonly service: PatchChannelFixletService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PatchChannelFixlet })
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPatchChannelFixlet(
    @common.Body() data: PatchChannelFixletCreateInput
  ): Promise<PatchChannelFixlet> {
    return await this.service.createPatchChannelFixlet({
      data: {
        ...data,

        patchChannel: data.patchChannel
          ? {
              connect: data.patchChannel,
            }
          : undefined,
      },
      select: {
        commonPlatformEnumerationTag: true,
        created: true,
        fixletCategory: true,
        fixletName: true,
        fixletSourceReleased: true,
        fixletTag: true,
        id: true,

        patchChannel: {
          select: {
            id: true,
          },
        },

        relevantCount: true,
        site: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PatchChannelFixlet] })
  @ApiNestedQuery(PatchChannelFixletFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async patchChannelFixlets(
    @common.Req() request: Request
  ): Promise<PatchChannelFixlet[]> {
    const args = plainToClass(PatchChannelFixletFindManyArgs, request.query);
    return this.service.patchChannelFixlets({
      ...args,
      select: {
        commonPlatformEnumerationTag: true,
        created: true,
        fixletCategory: true,
        fixletName: true,
        fixletSourceReleased: true,
        fixletTag: true,
        id: true,

        patchChannel: {
          select: {
            id: true,
          },
        },

        relevantCount: true,
        site: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PatchChannelFixlet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async patchChannelFixlet(
    @common.Param() params: PatchChannelFixletWhereUniqueInput
  ): Promise<PatchChannelFixlet | null> {
    const result = await this.service.patchChannelFixlet({
      where: params,
      select: {
        commonPlatformEnumerationTag: true,
        created: true,
        fixletCategory: true,
        fixletName: true,
        fixletSourceReleased: true,
        fixletTag: true,
        id: true,

        patchChannel: {
          select: {
            id: true,
          },
        },

        relevantCount: true,
        site: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PatchChannelFixlet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePatchChannelFixlet(
    @common.Param() params: PatchChannelFixletWhereUniqueInput,
    @common.Body() data: PatchChannelFixletUpdateInput
  ): Promise<PatchChannelFixlet | null> {
    try {
      return await this.service.updatePatchChannelFixlet({
        where: params,
        data: {
          ...data,

          patchChannel: data.patchChannel
            ? {
                connect: data.patchChannel,
              }
            : undefined,
        },
        select: {
          commonPlatformEnumerationTag: true,
          created: true,
          fixletCategory: true,
          fixletName: true,
          fixletSourceReleased: true,
          fixletTag: true,
          id: true,

          patchChannel: {
            select: {
              id: true,
            },
          },

          relevantCount: true,
          site: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PatchChannelFixlet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePatchChannelFixlet(
    @common.Param() params: PatchChannelFixletWhereUniqueInput
  ): Promise<PatchChannelFixlet | null> {
    try {
      return await this.service.deletePatchChannelFixlet({
        where: params,
        select: {
          commonPlatformEnumerationTag: true,
          created: true,
          fixletCategory: true,
          fixletName: true,
          fixletSourceReleased: true,
          fixletTag: true,
          id: true,

          patchChannel: {
            select: {
              id: true,
            },
          },

          relevantCount: true,
          site: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attestationHostFixlet")
  @ApiNestedQuery(AttestationHostFixletFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "read",
    possession: "any",
  })
  async findAttestationHostFixlet(
    @common.Req() request: Request,
    @common.Param() params: PatchChannelFixletWhereUniqueInput
  ): Promise<AttestationHostFixlet[]> {
    const query = plainToClass(
      AttestationHostFixletFindManyArgs,
      request.query
    );
    const results = await this.service.findAttestationHostFixlet(params.id, {
      ...query,
      select: {
        attestationHost: {
          select: {
            id: true,
          },
        },

        checklistId: true,
        checklistName: true,
        created: true,
        id: true,
        name: true,

        patchChannelFixlet: {
          select: {
            id: true,
          },
        },

        tssSpec: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attestationHostFixlet")
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "update",
    possession: "any",
  })
  async connectAttestationHostFixlet(
    @common.Param() params: PatchChannelFixletWhereUniqueInput,
    @common.Body() body: AttestationHostFixletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestationHostFixlet: {
        connect: body,
      },
    };
    await this.service.updatePatchChannelFixlet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attestationHostFixlet")
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "update",
    possession: "any",
  })
  async updateAttestationHostFixlet(
    @common.Param() params: PatchChannelFixletWhereUniqueInput,
    @common.Body() body: AttestationHostFixletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestationHostFixlet: {
        set: body,
      },
    };
    await this.service.updatePatchChannelFixlet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attestationHostFixlet")
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "update",
    possession: "any",
  })
  async disconnectAttestationHostFixlet(
    @common.Param() params: PatchChannelFixletWhereUniqueInput,
    @common.Body() body: AttestationHostFixletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestationHostFixlet: {
        disconnect: body,
      },
    };
    await this.service.updatePatchChannelFixlet({
      where: params,
      data,
      select: { id: true },
    });
  }
}
