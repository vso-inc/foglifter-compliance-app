/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PatchChannelFixlet as PrismaPatchChannelFixlet,
  AttestationHostFixlet as PrismaAttestationHostFixlet,
  PatchChannel as PrismaPatchChannel,
} from "@prisma/client";

export class PatchChannelFixletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PatchChannelFixletCountArgs, "select">
  ): Promise<number> {
    return this.prisma.patchChannelFixlet.count(args);
  }

  async patchChannelFixlets(
    args: Prisma.PatchChannelFixletFindManyArgs
  ): Promise<PrismaPatchChannelFixlet[]> {
    return this.prisma.patchChannelFixlet.findMany(args);
  }
  async patchChannelFixlet(
    args: Prisma.PatchChannelFixletFindUniqueArgs
  ): Promise<PrismaPatchChannelFixlet | null> {
    return this.prisma.patchChannelFixlet.findUnique(args);
  }
  async createPatchChannelFixlet(
    args: Prisma.PatchChannelFixletCreateArgs
  ): Promise<PrismaPatchChannelFixlet> {
    return this.prisma.patchChannelFixlet.create(args);
  }
  async updatePatchChannelFixlet(
    args: Prisma.PatchChannelFixletUpdateArgs
  ): Promise<PrismaPatchChannelFixlet> {
    return this.prisma.patchChannelFixlet.update(args);
  }
  async deletePatchChannelFixlet(
    args: Prisma.PatchChannelFixletDeleteArgs
  ): Promise<PrismaPatchChannelFixlet> {
    return this.prisma.patchChannelFixlet.delete(args);
  }

  async findAttestationHostFixlet(
    parentId: number,
    args: Prisma.AttestationHostFixletFindManyArgs
  ): Promise<PrismaAttestationHostFixlet[]> {
    return this.prisma.patchChannelFixlet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attestationHostFixlet(args);
  }

  async getPatchChannel(parentId: number): Promise<PrismaPatchChannel | null> {
    return this.prisma.patchChannelFixlet
      .findUnique({
        where: { id: parentId },
      })
      .patchChannel();
  }
}
