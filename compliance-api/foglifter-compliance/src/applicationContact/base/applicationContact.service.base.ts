/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationContact as PrismaApplicationContact,
  Application as PrismaApplication,
  Contact as PrismaContact,
} from "@prisma/client";

export class ApplicationContactServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationContactCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicationContact.count(args);
  }

  async applicationContacts(
    args: Prisma.ApplicationContactFindManyArgs
  ): Promise<PrismaApplicationContact[]> {
    return this.prisma.applicationContact.findMany(args);
  }
  async applicationContact(
    args: Prisma.ApplicationContactFindUniqueArgs
  ): Promise<PrismaApplicationContact | null> {
    return this.prisma.applicationContact.findUnique(args);
  }
  async createApplicationContact(
    args: Prisma.ApplicationContactCreateArgs
  ): Promise<PrismaApplicationContact> {
    return this.prisma.applicationContact.create(args);
  }
  async updateApplicationContact(
    args: Prisma.ApplicationContactUpdateArgs
  ): Promise<PrismaApplicationContact> {
    return this.prisma.applicationContact.update(args);
  }
  async deleteApplicationContact(
    args: Prisma.ApplicationContactDeleteArgs
  ): Promise<PrismaApplicationContact> {
    return this.prisma.applicationContact.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.applicationContact
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getContact(parentId: number): Promise<PrismaContact | null> {
    return this.prisma.applicationContact
      .findUnique({
        where: { id: parentId },
      })
      .contact();
  }
}
