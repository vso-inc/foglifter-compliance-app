/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApplicationContact } from "./ApplicationContact";
import { ApplicationContactCountArgs } from "./ApplicationContactCountArgs";
import { ApplicationContactFindManyArgs } from "./ApplicationContactFindManyArgs";
import { ApplicationContactFindUniqueArgs } from "./ApplicationContactFindUniqueArgs";
import { CreateApplicationContactArgs } from "./CreateApplicationContactArgs";
import { UpdateApplicationContactArgs } from "./UpdateApplicationContactArgs";
import { DeleteApplicationContactArgs } from "./DeleteApplicationContactArgs";
import { Application } from "../../application/base/Application";
import { Contact } from "../../contact/base/Contact";
import { ApplicationContactService } from "../applicationContact.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationContact)
export class ApplicationContactResolverBase {
  constructor(
    protected readonly service: ApplicationContactService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationContact",
    action: "read",
    possession: "any",
  })
  async _applicationContactsMeta(
    @graphql.Args() args: ApplicationContactCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationContact])
  @nestAccessControl.UseRoles({
    resource: "ApplicationContact",
    action: "read",
    possession: "any",
  })
  async applicationContacts(
    @graphql.Args() args: ApplicationContactFindManyArgs
  ): Promise<ApplicationContact[]> {
    return this.service.applicationContacts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationContact, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationContact",
    action: "read",
    possession: "own",
  })
  async applicationContact(
    @graphql.Args() args: ApplicationContactFindUniqueArgs
  ): Promise<ApplicationContact | null> {
    const result = await this.service.applicationContact(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationContact)
  @nestAccessControl.UseRoles({
    resource: "ApplicationContact",
    action: "create",
    possession: "any",
  })
  async createApplicationContact(
    @graphql.Args() args: CreateApplicationContactArgs
  ): Promise<ApplicationContact> {
    return await this.service.createApplicationContact({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        contact: {
          connect: args.data.contact,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationContact)
  @nestAccessControl.UseRoles({
    resource: "ApplicationContact",
    action: "update",
    possession: "any",
  })
  async updateApplicationContact(
    @graphql.Args() args: UpdateApplicationContactArgs
  ): Promise<ApplicationContact | null> {
    try {
      return await this.service.updateApplicationContact({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          contact: {
            connect: args.data.contact,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationContact)
  @nestAccessControl.UseRoles({
    resource: "ApplicationContact",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationContact(
    @graphql.Args() args: DeleteApplicationContactArgs
  ): Promise<ApplicationContact | null> {
    try {
      return await this.service.deleteApplicationContact(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplication(
    @graphql.Parent() parent: ApplicationContact
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Contact, {
    nullable: true,
    name: "contact",
  })
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  async getContact(
    @graphql.Parent() parent: ApplicationContact
  ): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
