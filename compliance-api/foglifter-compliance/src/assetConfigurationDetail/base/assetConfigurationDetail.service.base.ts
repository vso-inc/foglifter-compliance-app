/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AssetConfigurationDetail as PrismaAssetConfigurationDetail,
  Asset as PrismaAsset,
} from "@prisma/client";

export class AssetConfigurationDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssetConfigurationDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assetConfigurationDetail.count(args);
  }

  async assetConfigurationDetails(
    args: Prisma.AssetConfigurationDetailFindManyArgs
  ): Promise<PrismaAssetConfigurationDetail[]> {
    return this.prisma.assetConfigurationDetail.findMany(args);
  }
  async assetConfigurationDetail(
    args: Prisma.AssetConfigurationDetailFindUniqueArgs
  ): Promise<PrismaAssetConfigurationDetail | null> {
    return this.prisma.assetConfigurationDetail.findUnique(args);
  }
  async createAssetConfigurationDetail(
    args: Prisma.AssetConfigurationDetailCreateArgs
  ): Promise<PrismaAssetConfigurationDetail> {
    return this.prisma.assetConfigurationDetail.create(args);
  }
  async updateAssetConfigurationDetail(
    args: Prisma.AssetConfigurationDetailUpdateArgs
  ): Promise<PrismaAssetConfigurationDetail> {
    return this.prisma.assetConfigurationDetail.update(args);
  }
  async deleteAssetConfigurationDetail(
    args: Prisma.AssetConfigurationDetailDeleteArgs
  ): Promise<PrismaAssetConfigurationDetail> {
    return this.prisma.assetConfigurationDetail.delete(args);
  }

  async getAsset(parentId: bigint): Promise<PrismaAsset | null> {
    return this.prisma.assetConfigurationDetail
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
