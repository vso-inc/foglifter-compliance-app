/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AssetConfigurationDetailService } from "../assetConfigurationDetail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AssetConfigurationDetailCreateInput } from "./AssetConfigurationDetailCreateInput";
import { AssetConfigurationDetail } from "./AssetConfigurationDetail";
import { AssetConfigurationDetailFindManyArgs } from "./AssetConfigurationDetailFindManyArgs";
import { AssetConfigurationDetailWhereUniqueInput } from "./AssetConfigurationDetailWhereUniqueInput";
import { AssetConfigurationDetailUpdateInput } from "./AssetConfigurationDetailUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AssetConfigurationDetailControllerBase {
  constructor(
    protected readonly service: AssetConfigurationDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetConfigurationDetail })
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAssetConfigurationDetail(
    @common.Body() data: AssetConfigurationDetailCreateInput
  ): Promise<AssetConfigurationDetail> {
    return await this.service.createAssetConfigurationDetail({
      data: {
        ...data,

        asset: data.asset
          ? {
              connect: data.asset,
            }
          : undefined,
      },
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        assetTag: true,
        bios: true,
        brand: true,
        cpuCount: true,
        cpuSpeed: true,
        cpuType: true,
        cpuVersion: true,
        created: true,
        id: true,
        inService: true,
        lastHardwareScan: true,
        model: true,
        nature: true,
        operatingSystem: true,
        role: true,
        scanExemptReason: true,
        serial: true,
        status: true,
        typeField: true,
        updated: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetConfigurationDetail] })
  @ApiNestedQuery(AssetConfigurationDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assetConfigurationDetails(
    @common.Req() request: Request
  ): Promise<AssetConfigurationDetail[]> {
    const args = plainToClass(
      AssetConfigurationDetailFindManyArgs,
      request.query
    );
    return this.service.assetConfigurationDetails({
      ...args,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        assetTag: true,
        bios: true,
        brand: true,
        cpuCount: true,
        cpuSpeed: true,
        cpuType: true,
        cpuVersion: true,
        created: true,
        id: true,
        inService: true,
        lastHardwareScan: true,
        model: true,
        nature: true,
        operatingSystem: true,
        role: true,
        scanExemptReason: true,
        serial: true,
        status: true,
        typeField: true,
        updated: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetConfigurationDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assetConfigurationDetail(
    @common.Param() params: AssetConfigurationDetailWhereUniqueInput
  ): Promise<AssetConfigurationDetail | null> {
    const result = await this.service.assetConfigurationDetail({
      where: params,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        assetTag: true,
        bios: true,
        brand: true,
        cpuCount: true,
        cpuSpeed: true,
        cpuType: true,
        cpuVersion: true,
        created: true,
        id: true,
        inService: true,
        lastHardwareScan: true,
        model: true,
        nature: true,
        operatingSystem: true,
        role: true,
        scanExemptReason: true,
        serial: true,
        status: true,
        typeField: true,
        updated: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetConfigurationDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAssetConfigurationDetail(
    @common.Param() params: AssetConfigurationDetailWhereUniqueInput,
    @common.Body() data: AssetConfigurationDetailUpdateInput
  ): Promise<AssetConfigurationDetail | null> {
    try {
      return await this.service.updateAssetConfigurationDetail({
        where: params,
        data: {
          ...data,

          asset: data.asset
            ? {
                connect: data.asset,
              }
            : undefined,
        },
        select: {
          asset: {
            select: {
              id: true,
            },
          },

          assetTag: true,
          bios: true,
          brand: true,
          cpuCount: true,
          cpuSpeed: true,
          cpuType: true,
          cpuVersion: true,
          created: true,
          id: true,
          inService: true,
          lastHardwareScan: true,
          model: true,
          nature: true,
          operatingSystem: true,
          role: true,
          scanExemptReason: true,
          serial: true,
          status: true,
          typeField: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetConfigurationDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAssetConfigurationDetail(
    @common.Param() params: AssetConfigurationDetailWhereUniqueInput
  ): Promise<AssetConfigurationDetail | null> {
    try {
      return await this.service.deleteAssetConfigurationDetail({
        where: params,
        select: {
          asset: {
            select: {
              id: true,
            },
          },

          assetTag: true,
          bios: true,
          brand: true,
          cpuCount: true,
          cpuSpeed: true,
          cpuType: true,
          cpuVersion: true,
          created: true,
          id: true,
          inService: true,
          lastHardwareScan: true,
          model: true,
          nature: true,
          operatingSystem: true,
          role: true,
          scanExemptReason: true,
          serial: true,
          status: true,
          typeField: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
