/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AssetConfigurationDetail } from "./AssetConfigurationDetail";
import { AssetConfigurationDetailCountArgs } from "./AssetConfigurationDetailCountArgs";
import { AssetConfigurationDetailFindManyArgs } from "./AssetConfigurationDetailFindManyArgs";
import { AssetConfigurationDetailFindUniqueArgs } from "./AssetConfigurationDetailFindUniqueArgs";
import { CreateAssetConfigurationDetailArgs } from "./CreateAssetConfigurationDetailArgs";
import { UpdateAssetConfigurationDetailArgs } from "./UpdateAssetConfigurationDetailArgs";
import { DeleteAssetConfigurationDetailArgs } from "./DeleteAssetConfigurationDetailArgs";
import { Asset } from "../../asset/base/Asset";
import { AssetConfigurationDetailService } from "../assetConfigurationDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AssetConfigurationDetail)
export class AssetConfigurationDetailResolverBase {
  constructor(
    protected readonly service: AssetConfigurationDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "read",
    possession: "any",
  })
  async _assetConfigurationDetailsMeta(
    @graphql.Args() args: AssetConfigurationDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AssetConfigurationDetail])
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "read",
    possession: "any",
  })
  async assetConfigurationDetails(
    @graphql.Args() args: AssetConfigurationDetailFindManyArgs
  ): Promise<AssetConfigurationDetail[]> {
    return this.service.assetConfigurationDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AssetConfigurationDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "read",
    possession: "own",
  })
  async assetConfigurationDetail(
    @graphql.Args() args: AssetConfigurationDetailFindUniqueArgs
  ): Promise<AssetConfigurationDetail | null> {
    const result = await this.service.assetConfigurationDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetConfigurationDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "create",
    possession: "any",
  })
  async createAssetConfigurationDetail(
    @graphql.Args() args: CreateAssetConfigurationDetailArgs
  ): Promise<AssetConfigurationDetail> {
    return await this.service.createAssetConfigurationDetail({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetConfigurationDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "update",
    possession: "any",
  })
  async updateAssetConfigurationDetail(
    @graphql.Args() args: UpdateAssetConfigurationDetailArgs
  ): Promise<AssetConfigurationDetail | null> {
    try {
      return await this.service.updateAssetConfigurationDetail({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetConfigurationDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "delete",
    possession: "any",
  })
  async deleteAssetConfigurationDetail(
    @graphql.Args() args: DeleteAssetConfigurationDetailArgs
  ): Promise<AssetConfigurationDetail | null> {
    try {
      return await this.service.deleteAssetConfigurationDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: AssetConfigurationDetail
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
