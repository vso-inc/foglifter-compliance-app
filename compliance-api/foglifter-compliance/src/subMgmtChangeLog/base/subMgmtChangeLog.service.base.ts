/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SubMgmtChangeLog as PrismaSubMgmtChangeLog,
  SubMgmtBigfixRequestPatchChannelIncludeList as PrismaSubMgmtBigfixRequestPatchChannelIncludeList,
  Asset as PrismaAsset,
  BigfixRequest as PrismaBigfixRequest,
  SubMgmtChangeLogStatus as PrismaSubMgmtChangeLogStatus,
} from "@prisma/client";

export class SubMgmtChangeLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubMgmtChangeLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subMgmtChangeLog.count(args);
  }

  async subMgmtChangeLogs(
    args: Prisma.SubMgmtChangeLogFindManyArgs
  ): Promise<PrismaSubMgmtChangeLog[]> {
    return this.prisma.subMgmtChangeLog.findMany(args);
  }
  async subMgmtChangeLog(
    args: Prisma.SubMgmtChangeLogFindUniqueArgs
  ): Promise<PrismaSubMgmtChangeLog | null> {
    return this.prisma.subMgmtChangeLog.findUnique(args);
  }
  async createSubMgmtChangeLog(
    args: Prisma.SubMgmtChangeLogCreateArgs
  ): Promise<PrismaSubMgmtChangeLog> {
    return this.prisma.subMgmtChangeLog.create(args);
  }
  async updateSubMgmtChangeLog(
    args: Prisma.SubMgmtChangeLogUpdateArgs
  ): Promise<PrismaSubMgmtChangeLog> {
    return this.prisma.subMgmtChangeLog.update(args);
  }
  async deleteSubMgmtChangeLog(
    args: Prisma.SubMgmtChangeLogDeleteArgs
  ): Promise<PrismaSubMgmtChangeLog> {
    return this.prisma.subMgmtChangeLog.delete(args);
  }

  async findSubMgmtBigfixRequestPatchChannelIncludeList(
    parentId: number,
    args: Prisma.SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs
  ): Promise<PrismaSubMgmtBigfixRequestPatchChannelIncludeList[]> {
    return this.prisma.subMgmtChangeLog
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subMgmtBigfixRequestPatchChannelIncludeList(args);
  }

  async getAsset(parentId: number): Promise<PrismaAsset | null> {
    return this.prisma.subMgmtChangeLog
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }

  async getBigfixRequest(
    parentId: number
  ): Promise<PrismaBigfixRequest | null> {
    return this.prisma.subMgmtChangeLog
      .findUnique({
        where: { id: parentId },
      })
      .bigfixRequest();
  }

  async getSubMgmtChangeLogStatus(
    parentId: number
  ): Promise<PrismaSubMgmtChangeLogStatus | null> {
    return this.prisma.subMgmtChangeLog
      .findUnique({
        where: { id: parentId },
      })
      .subMgmtChangeLogStatus();
  }
}
