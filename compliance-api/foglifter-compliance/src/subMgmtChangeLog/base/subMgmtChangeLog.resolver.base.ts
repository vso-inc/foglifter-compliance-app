/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubMgmtChangeLog } from "./SubMgmtChangeLog";
import { SubMgmtChangeLogCountArgs } from "./SubMgmtChangeLogCountArgs";
import { SubMgmtChangeLogFindManyArgs } from "./SubMgmtChangeLogFindManyArgs";
import { SubMgmtChangeLogFindUniqueArgs } from "./SubMgmtChangeLogFindUniqueArgs";
import { CreateSubMgmtChangeLogArgs } from "./CreateSubMgmtChangeLogArgs";
import { UpdateSubMgmtChangeLogArgs } from "./UpdateSubMgmtChangeLogArgs";
import { DeleteSubMgmtChangeLogArgs } from "./DeleteSubMgmtChangeLogArgs";
import { SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs } from "../../subMgmtBigfixRequestPatchChannelIncludeList/base/SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs";
import { SubMgmtBigfixRequestPatchChannelIncludeList } from "../../subMgmtBigfixRequestPatchChannelIncludeList/base/SubMgmtBigfixRequestPatchChannelIncludeList";
import { Asset } from "../../asset/base/Asset";
import { BigfixRequest } from "../../bigfixRequest/base/BigfixRequest";
import { SubMgmtChangeLogStatus } from "../../subMgmtChangeLogStatus/base/SubMgmtChangeLogStatus";
import { SubMgmtChangeLogService } from "../subMgmtChangeLog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubMgmtChangeLog)
export class SubMgmtChangeLogResolverBase {
  constructor(
    protected readonly service: SubMgmtChangeLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "any",
  })
  async _subMgmtChangeLogsMeta(
    @graphql.Args() args: SubMgmtChangeLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubMgmtChangeLog])
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "any",
  })
  async subMgmtChangeLogs(
    @graphql.Args() args: SubMgmtChangeLogFindManyArgs
  ): Promise<SubMgmtChangeLog[]> {
    return this.service.subMgmtChangeLogs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubMgmtChangeLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "own",
  })
  async subMgmtChangeLog(
    @graphql.Args() args: SubMgmtChangeLogFindUniqueArgs
  ): Promise<SubMgmtChangeLog | null> {
    const result = await this.service.subMgmtChangeLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubMgmtChangeLog)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "create",
    possession: "any",
  })
  async createSubMgmtChangeLog(
    @graphql.Args() args: CreateSubMgmtChangeLogArgs
  ): Promise<SubMgmtChangeLog> {
    return await this.service.createSubMgmtChangeLog({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,

        bigfixRequest: args.data.bigfixRequest
          ? {
              connect: args.data.bigfixRequest,
            }
          : undefined,

        subMgmtChangeLogStatus: {
          connect: args.data.subMgmtChangeLogStatus,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubMgmtChangeLog)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "update",
    possession: "any",
  })
  async updateSubMgmtChangeLog(
    @graphql.Args() args: UpdateSubMgmtChangeLogArgs
  ): Promise<SubMgmtChangeLog | null> {
    try {
      return await this.service.updateSubMgmtChangeLog({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,

          bigfixRequest: args.data.bigfixRequest
            ? {
                connect: args.data.bigfixRequest,
              }
            : undefined,

          subMgmtChangeLogStatus: {
            connect: args.data.subMgmtChangeLogStatus,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubMgmtChangeLog)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "delete",
    possession: "any",
  })
  async deleteSubMgmtChangeLog(
    @graphql.Args() args: DeleteSubMgmtChangeLogArgs
  ): Promise<SubMgmtChangeLog | null> {
    try {
      return await this.service.deleteSubMgmtChangeLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SubMgmtBigfixRequestPatchChannelIncludeList], {
    name: "subMgmtBigfixRequestPatchChannelIncludeList",
  })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "read",
    possession: "any",
  })
  async findSubMgmtBigfixRequestPatchChannelIncludeList(
    @graphql.Parent() parent: SubMgmtChangeLog,
    @graphql.Args()
    args: SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs
  ): Promise<SubMgmtBigfixRequestPatchChannelIncludeList[]> {
    const results =
      await this.service.findSubMgmtBigfixRequestPatchChannelIncludeList(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: SubMgmtChangeLog
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BigfixRequest, {
    nullable: true,
    name: "bigfixRequest",
  })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "any",
  })
  async getBigfixRequest(
    @graphql.Parent() parent: SubMgmtChangeLog
  ): Promise<BigfixRequest | null> {
    const result = await this.service.getBigfixRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SubMgmtChangeLogStatus, {
    nullable: true,
    name: "subMgmtChangeLogStatus",
  })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "read",
    possession: "any",
  })
  async getSubMgmtChangeLogStatus(
    @graphql.Parent() parent: SubMgmtChangeLog
  ): Promise<SubMgmtChangeLogStatus | null> {
    const result = await this.service.getSubMgmtChangeLogStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
