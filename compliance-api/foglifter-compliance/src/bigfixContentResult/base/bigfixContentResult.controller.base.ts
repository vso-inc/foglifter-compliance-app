/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BigfixContentResultService } from "../bigfixContentResult.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BigfixContentResultCreateInput } from "./BigfixContentResultCreateInput";
import { BigfixContentResult } from "./BigfixContentResult";
import { BigfixContentResultFindManyArgs } from "./BigfixContentResultFindManyArgs";
import { BigfixContentResultWhereUniqueInput } from "./BigfixContentResultWhereUniqueInput";
import { BigfixContentResultUpdateInput } from "./BigfixContentResultUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BigfixContentResultControllerBase {
  constructor(
    protected readonly service: BigfixContentResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BigfixContentResult })
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBigfixContentResult(
    @common.Body() data: BigfixContentResultCreateInput
  ): Promise<BigfixContentResult> {
    return await this.service.createBigfixContentResult({
      data: data,
      select: {
        applicable: true,
        contentId: true,
        created: true,
        datasourceDeviceId: true,
        datasourceSiteId: true,
        firstRelevant: true,
        id: true,
        lastNonRelevant: true,
        lastRelevant: true,
        relevant: true,
        resolved: true,
        reverted: true,
        typeField: true,
        updated: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [BigfixContentResult] })
  @ApiNestedQuery(BigfixContentResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bigfixContentResults(
    @common.Req() request: Request
  ): Promise<BigfixContentResult[]> {
    const args = plainToClass(BigfixContentResultFindManyArgs, request.query);
    return this.service.bigfixContentResults({
      ...args,
      select: {
        applicable: true,
        contentId: true,
        created: true,
        datasourceDeviceId: true,
        datasourceSiteId: true,
        firstRelevant: true,
        id: true,
        lastNonRelevant: true,
        lastRelevant: true,
        relevant: true,
        resolved: true,
        reverted: true,
        typeField: true,
        updated: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BigfixContentResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bigfixContentResult(
    @common.Param() params: BigfixContentResultWhereUniqueInput
  ): Promise<BigfixContentResult | null> {
    const result = await this.service.bigfixContentResult({
      where: params,
      select: {
        applicable: true,
        contentId: true,
        created: true,
        datasourceDeviceId: true,
        datasourceSiteId: true,
        firstRelevant: true,
        id: true,
        lastNonRelevant: true,
        lastRelevant: true,
        relevant: true,
        resolved: true,
        reverted: true,
        typeField: true,
        updated: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BigfixContentResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBigfixContentResult(
    @common.Param() params: BigfixContentResultWhereUniqueInput,
    @common.Body() data: BigfixContentResultUpdateInput
  ): Promise<BigfixContentResult | null> {
    try {
      return await this.service.updateBigfixContentResult({
        where: params,
        data: data,
        select: {
          applicable: true,
          contentId: true,
          created: true,
          datasourceDeviceId: true,
          datasourceSiteId: true,
          firstRelevant: true,
          id: true,
          lastNonRelevant: true,
          lastRelevant: true,
          relevant: true,
          resolved: true,
          reverted: true,
          typeField: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BigfixContentResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBigfixContentResult(
    @common.Param() params: BigfixContentResultWhereUniqueInput
  ): Promise<BigfixContentResult | null> {
    try {
      return await this.service.deleteBigfixContentResult({
        where: params,
        select: {
          applicable: true,
          contentId: true,
          created: true,
          datasourceDeviceId: true,
          datasourceSiteId: true,
          firstRelevant: true,
          id: true,
          lastNonRelevant: true,
          lastRelevant: true,
          relevant: true,
          resolved: true,
          reverted: true,
          typeField: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
