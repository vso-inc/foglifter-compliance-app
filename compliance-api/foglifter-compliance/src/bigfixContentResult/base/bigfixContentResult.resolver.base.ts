/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BigfixContentResult } from "./BigfixContentResult";
import { BigfixContentResultCountArgs } from "./BigfixContentResultCountArgs";
import { BigfixContentResultFindManyArgs } from "./BigfixContentResultFindManyArgs";
import { BigfixContentResultFindUniqueArgs } from "./BigfixContentResultFindUniqueArgs";
import { CreateBigfixContentResultArgs } from "./CreateBigfixContentResultArgs";
import { UpdateBigfixContentResultArgs } from "./UpdateBigfixContentResultArgs";
import { DeleteBigfixContentResultArgs } from "./DeleteBigfixContentResultArgs";
import { BigfixContentResultService } from "../bigfixContentResult.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BigfixContentResult)
export class BigfixContentResultResolverBase {
  constructor(
    protected readonly service: BigfixContentResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "read",
    possession: "any",
  })
  async _bigfixContentResultsMeta(
    @graphql.Args() args: BigfixContentResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BigfixContentResult])
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "read",
    possession: "any",
  })
  async bigfixContentResults(
    @graphql.Args() args: BigfixContentResultFindManyArgs
  ): Promise<BigfixContentResult[]> {
    return this.service.bigfixContentResults(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BigfixContentResult, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "read",
    possession: "own",
  })
  async bigfixContentResult(
    @graphql.Args() args: BigfixContentResultFindUniqueArgs
  ): Promise<BigfixContentResult | null> {
    const result = await this.service.bigfixContentResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BigfixContentResult)
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "create",
    possession: "any",
  })
  async createBigfixContentResult(
    @graphql.Args() args: CreateBigfixContentResultArgs
  ): Promise<BigfixContentResult> {
    return await this.service.createBigfixContentResult({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BigfixContentResult)
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "update",
    possession: "any",
  })
  async updateBigfixContentResult(
    @graphql.Args() args: UpdateBigfixContentResultArgs
  ): Promise<BigfixContentResult | null> {
    try {
      return await this.service.updateBigfixContentResult({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BigfixContentResult)
  @nestAccessControl.UseRoles({
    resource: "BigfixContentResult",
    action: "delete",
    possession: "any",
  })
  async deleteBigfixContentResult(
    @graphql.Args() args: DeleteBigfixContentResultArgs
  ): Promise<BigfixContentResult | null> {
    try {
      return await this.service.deleteBigfixContentResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
