/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PatchChannel as PrismaPatchChannel,
  PatchChannelFixlet as PrismaPatchChannelFixlet,
  SubMgmtBigfixRequestPatchChannelIncludeList as PrismaSubMgmtBigfixRequestPatchChannelIncludeList,
} from "@prisma/client";

export class PatchChannelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PatchChannelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.patchChannel.count(args);
  }

  async patchChannels(
    args: Prisma.PatchChannelFindManyArgs
  ): Promise<PrismaPatchChannel[]> {
    return this.prisma.patchChannel.findMany(args);
  }
  async patchChannel(
    args: Prisma.PatchChannelFindUniqueArgs
  ): Promise<PrismaPatchChannel | null> {
    return this.prisma.patchChannel.findUnique(args);
  }
  async createPatchChannel(
    args: Prisma.PatchChannelCreateArgs
  ): Promise<PrismaPatchChannel> {
    return this.prisma.patchChannel.create(args);
  }
  async updatePatchChannel(
    args: Prisma.PatchChannelUpdateArgs
  ): Promise<PrismaPatchChannel> {
    return this.prisma.patchChannel.update(args);
  }
  async deletePatchChannel(
    args: Prisma.PatchChannelDeleteArgs
  ): Promise<PrismaPatchChannel> {
    return this.prisma.patchChannel.delete(args);
  }

  async findPatchChannelFixlet(
    parentId: number,
    args: Prisma.PatchChannelFixletFindManyArgs
  ): Promise<PrismaPatchChannelFixlet[]> {
    return this.prisma.patchChannel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .patchChannelFixlet(args);
  }

  async findSubMgmtBigfixRequestPatchChannelIncludeList(
    parentId: number,
    args: Prisma.SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs
  ): Promise<PrismaSubMgmtBigfixRequestPatchChannelIncludeList[]> {
    return this.prisma.patchChannel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subMgmtBigfixRequestPatchChannelIncludeList(args);
  }
}
