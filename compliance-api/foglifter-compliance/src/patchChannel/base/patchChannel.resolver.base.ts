/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PatchChannel } from "./PatchChannel";
import { PatchChannelCountArgs } from "./PatchChannelCountArgs";
import { PatchChannelFindManyArgs } from "./PatchChannelFindManyArgs";
import { PatchChannelFindUniqueArgs } from "./PatchChannelFindUniqueArgs";
import { CreatePatchChannelArgs } from "./CreatePatchChannelArgs";
import { UpdatePatchChannelArgs } from "./UpdatePatchChannelArgs";
import { DeletePatchChannelArgs } from "./DeletePatchChannelArgs";
import { PatchChannelFixletFindManyArgs } from "../../patchChannelFixlet/base/PatchChannelFixletFindManyArgs";
import { PatchChannelFixlet } from "../../patchChannelFixlet/base/PatchChannelFixlet";
import { SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs } from "../../subMgmtBigfixRequestPatchChannelIncludeList/base/SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs";
import { SubMgmtBigfixRequestPatchChannelIncludeList } from "../../subMgmtBigfixRequestPatchChannelIncludeList/base/SubMgmtBigfixRequestPatchChannelIncludeList";
import { PatchChannelService } from "../patchChannel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PatchChannel)
export class PatchChannelResolverBase {
  constructor(
    protected readonly service: PatchChannelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "read",
    possession: "any",
  })
  async _patchChannelsMeta(
    @graphql.Args() args: PatchChannelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PatchChannel])
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "read",
    possession: "any",
  })
  async patchChannels(
    @graphql.Args() args: PatchChannelFindManyArgs
  ): Promise<PatchChannel[]> {
    return this.service.patchChannels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PatchChannel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "read",
    possession: "own",
  })
  async patchChannel(
    @graphql.Args() args: PatchChannelFindUniqueArgs
  ): Promise<PatchChannel | null> {
    const result = await this.service.patchChannel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatchChannel)
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "create",
    possession: "any",
  })
  async createPatchChannel(
    @graphql.Args() args: CreatePatchChannelArgs
  ): Promise<PatchChannel> {
    return await this.service.createPatchChannel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatchChannel)
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "update",
    possession: "any",
  })
  async updatePatchChannel(
    @graphql.Args() args: UpdatePatchChannelArgs
  ): Promise<PatchChannel | null> {
    try {
      return await this.service.updatePatchChannel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PatchChannel)
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "delete",
    possession: "any",
  })
  async deletePatchChannel(
    @graphql.Args() args: DeletePatchChannelArgs
  ): Promise<PatchChannel | null> {
    try {
      return await this.service.deletePatchChannel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PatchChannelFixlet], {
    name: "patchChannelFixlet",
  })
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "read",
    possession: "any",
  })
  async findPatchChannelFixlet(
    @graphql.Parent() parent: PatchChannel,
    @graphql.Args() args: PatchChannelFixletFindManyArgs
  ): Promise<PatchChannelFixlet[]> {
    const results = await this.service.findPatchChannelFixlet(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SubMgmtBigfixRequestPatchChannelIncludeList], {
    name: "subMgmtBigfixRequestPatchChannelIncludeList",
  })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "read",
    possession: "any",
  })
  async findSubMgmtBigfixRequestPatchChannelIncludeList(
    @graphql.Parent() parent: PatchChannel,
    @graphql.Args()
    args: SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs
  ): Promise<SubMgmtBigfixRequestPatchChannelIncludeList[]> {
    const results =
      await this.service.findSubMgmtBigfixRequestPatchChannelIncludeList(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }
}
