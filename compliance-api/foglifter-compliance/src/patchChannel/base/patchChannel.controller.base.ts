/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PatchChannelService } from "../patchChannel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PatchChannelCreateInput } from "./PatchChannelCreateInput";
import { PatchChannel } from "./PatchChannel";
import { PatchChannelFindManyArgs } from "./PatchChannelFindManyArgs";
import { PatchChannelWhereUniqueInput } from "./PatchChannelWhereUniqueInput";
import { PatchChannelUpdateInput } from "./PatchChannelUpdateInput";
import { PatchChannelFixletFindManyArgs } from "../../patchChannelFixlet/base/PatchChannelFixletFindManyArgs";
import { PatchChannelFixlet } from "../../patchChannelFixlet/base/PatchChannelFixlet";
import { PatchChannelFixletWhereUniqueInput } from "../../patchChannelFixlet/base/PatchChannelFixletWhereUniqueInput";
import { SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs } from "../../subMgmtBigfixRequestPatchChannelIncludeList/base/SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs";
import { SubMgmtBigfixRequestPatchChannelIncludeList } from "../../subMgmtBigfixRequestPatchChannelIncludeList/base/SubMgmtBigfixRequestPatchChannelIncludeList";
import { SubMgmtBigfixRequestPatchChannelIncludeListWhereUniqueInput } from "../../subMgmtBigfixRequestPatchChannelIncludeList/base/SubMgmtBigfixRequestPatchChannelIncludeListWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PatchChannelControllerBase {
  constructor(
    protected readonly service: PatchChannelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PatchChannel })
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPatchChannel(
    @common.Body() data: PatchChannelCreateInput
  ): Promise<PatchChannel> {
    return await this.service.createPatchChannel({
      data: data,
      select: {
        created: true,
        id: true,
        isUserSelectable: true,
        name: true,
        note: true,
        operatingSystem: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PatchChannel] })
  @ApiNestedQuery(PatchChannelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async patchChannels(@common.Req() request: Request): Promise<PatchChannel[]> {
    const args = plainToClass(PatchChannelFindManyArgs, request.query);
    return this.service.patchChannels({
      ...args,
      select: {
        created: true,
        id: true,
        isUserSelectable: true,
        name: true,
        note: true,
        operatingSystem: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PatchChannel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async patchChannel(
    @common.Param() params: PatchChannelWhereUniqueInput
  ): Promise<PatchChannel | null> {
    const result = await this.service.patchChannel({
      where: params,
      select: {
        created: true,
        id: true,
        isUserSelectable: true,
        name: true,
        note: true,
        operatingSystem: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PatchChannel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePatchChannel(
    @common.Param() params: PatchChannelWhereUniqueInput,
    @common.Body() data: PatchChannelUpdateInput
  ): Promise<PatchChannel | null> {
    try {
      return await this.service.updatePatchChannel({
        where: params,
        data: data,
        select: {
          created: true,
          id: true,
          isUserSelectable: true,
          name: true,
          note: true,
          operatingSystem: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PatchChannel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePatchChannel(
    @common.Param() params: PatchChannelWhereUniqueInput
  ): Promise<PatchChannel | null> {
    try {
      return await this.service.deletePatchChannel({
        where: params,
        select: {
          created: true,
          id: true,
          isUserSelectable: true,
          name: true,
          note: true,
          operatingSystem: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/patchChannelFixlet")
  @ApiNestedQuery(PatchChannelFixletFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "read",
    possession: "any",
  })
  async findPatchChannelFixlet(
    @common.Req() request: Request,
    @common.Param() params: PatchChannelWhereUniqueInput
  ): Promise<PatchChannelFixlet[]> {
    const query = plainToClass(PatchChannelFixletFindManyArgs, request.query);
    const results = await this.service.findPatchChannelFixlet(params.id, {
      ...query,
      select: {
        commonPlatformEnumerationTag: true,
        created: true,
        fixletCategory: true,
        fixletName: true,
        fixletSourceReleased: true,
        fixletTag: true,
        id: true,

        patchChannel: {
          select: {
            id: true,
          },
        },

        relevantCount: true,
        site: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/patchChannelFixlet")
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "update",
    possession: "any",
  })
  async connectPatchChannelFixlet(
    @common.Param() params: PatchChannelWhereUniqueInput,
    @common.Body() body: PatchChannelFixletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patchChannelFixlet: {
        connect: body,
      },
    };
    await this.service.updatePatchChannel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/patchChannelFixlet")
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "update",
    possession: "any",
  })
  async updatePatchChannelFixlet(
    @common.Param() params: PatchChannelWhereUniqueInput,
    @common.Body() body: PatchChannelFixletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patchChannelFixlet: {
        set: body,
      },
    };
    await this.service.updatePatchChannel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/patchChannelFixlet")
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "update",
    possession: "any",
  })
  async disconnectPatchChannelFixlet(
    @common.Param() params: PatchChannelWhereUniqueInput,
    @common.Body() body: PatchChannelFixletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patchChannelFixlet: {
        disconnect: body,
      },
    };
    await this.service.updatePatchChannel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subMgmtBigfixRequestPatchChannelIncludeList")
  @ApiNestedQuery(SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtBigfixRequestPatchChannelIncludeList",
    action: "read",
    possession: "any",
  })
  async findSubMgmtBigfixRequestPatchChannelIncludeList(
    @common.Req() request: Request,
    @common.Param() params: PatchChannelWhereUniqueInput
  ): Promise<SubMgmtBigfixRequestPatchChannelIncludeList[]> {
    const query = plainToClass(
      SubMgmtBigfixRequestPatchChannelIncludeListFindManyArgs,
      request.query
    );
    const results =
      await this.service.findSubMgmtBigfixRequestPatchChannelIncludeList(
        params.id,
        {
          ...query,
          select: {
            id: true,

            patchChannel: {
              select: {
                id: true,
              },
            },

            subMgmtChangeLog: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subMgmtBigfixRequestPatchChannelIncludeList")
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "update",
    possession: "any",
  })
  async connectSubMgmtBigfixRequestPatchChannelIncludeList(
    @common.Param() params: PatchChannelWhereUniqueInput,
    @common.Body()
    body: SubMgmtBigfixRequestPatchChannelIncludeListWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtBigfixRequestPatchChannelIncludeList: {
        connect: body,
      },
    };
    await this.service.updatePatchChannel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subMgmtBigfixRequestPatchChannelIncludeList")
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "update",
    possession: "any",
  })
  async updateSubMgmtBigfixRequestPatchChannelIncludeList(
    @common.Param() params: PatchChannelWhereUniqueInput,
    @common.Body()
    body: SubMgmtBigfixRequestPatchChannelIncludeListWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtBigfixRequestPatchChannelIncludeList: {
        set: body,
      },
    };
    await this.service.updatePatchChannel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subMgmtBigfixRequestPatchChannelIncludeList")
  @nestAccessControl.UseRoles({
    resource: "PatchChannel",
    action: "update",
    possession: "any",
  })
  async disconnectSubMgmtBigfixRequestPatchChannelIncludeList(
    @common.Param() params: PatchChannelWhereUniqueInput,
    @common.Body()
    body: SubMgmtBigfixRequestPatchChannelIncludeListWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtBigfixRequestPatchChannelIncludeList: {
        disconnect: body,
      },
    };
    await this.service.updatePatchChannel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
