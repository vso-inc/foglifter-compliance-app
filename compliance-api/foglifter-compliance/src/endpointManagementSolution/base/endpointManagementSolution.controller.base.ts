/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EndpointManagementSolutionService } from "../endpointManagementSolution.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EndpointManagementSolutionCreateInput } from "./EndpointManagementSolutionCreateInput";
import { EndpointManagementSolution } from "./EndpointManagementSolution";
import { EndpointManagementSolutionFindManyArgs } from "./EndpointManagementSolutionFindManyArgs";
import { EndpointManagementSolutionWhereUniqueInput } from "./EndpointManagementSolutionWhereUniqueInput";
import { EndpointManagementSolutionUpdateInput } from "./EndpointManagementSolutionUpdateInput";
import { AssetFindManyArgs } from "../../asset/base/AssetFindManyArgs";
import { Asset } from "../../asset/base/Asset";
import { AssetWhereUniqueInput } from "../../asset/base/AssetWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EndpointManagementSolutionControllerBase {
  constructor(
    protected readonly service: EndpointManagementSolutionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EndpointManagementSolution })
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEndpointManagementSolution(
    @common.Body() data: EndpointManagementSolutionCreateInput
  ): Promise<EndpointManagementSolution> {
    return await this.service.createEndpointManagementSolution({
      data: {
        ...data,

        environment: data.environment
          ? {
              connect: data.environment,
            }
          : undefined,
      },
      select: {
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EndpointManagementSolution] })
  @ApiNestedQuery(EndpointManagementSolutionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async endpointManagementSolutions(
    @common.Req() request: Request
  ): Promise<EndpointManagementSolution[]> {
    const args = plainToClass(
      EndpointManagementSolutionFindManyArgs,
      request.query
    );
    return this.service.endpointManagementSolutions({
      ...args,
      select: {
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EndpointManagementSolution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async endpointManagementSolution(
    @common.Param() params: EndpointManagementSolutionWhereUniqueInput
  ): Promise<EndpointManagementSolution | null> {
    const result = await this.service.endpointManagementSolution({
      where: params,
      select: {
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EndpointManagementSolution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEndpointManagementSolution(
    @common.Param() params: EndpointManagementSolutionWhereUniqueInput,
    @common.Body() data: EndpointManagementSolutionUpdateInput
  ): Promise<EndpointManagementSolution | null> {
    try {
      return await this.service.updateEndpointManagementSolution({
        where: params,
        data: {
          ...data,

          environment: data.environment
            ? {
                connect: data.environment,
              }
            : undefined,
        },
        select: {
          description: true,

          environment: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EndpointManagementSolution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEndpointManagementSolution(
    @common.Param() params: EndpointManagementSolutionWhereUniqueInput
  ): Promise<EndpointManagementSolution | null> {
    try {
      return await this.service.deleteEndpointManagementSolution({
        where: params,
        select: {
          description: true,

          environment: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/asset")
  @ApiNestedQuery(AssetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async findAsset(
    @common.Req() request: Request,
    @common.Param() params: EndpointManagementSolutionWhereUniqueInput
  ): Promise<Asset[]> {
    const query = plainToClass(AssetFindManyArgs, request.query);
    const results = await this.service.findAsset(params.id, {
      ...query,
      select: {
        altId: true,
        appServerId: true,
        applicationHostId: true,
        assigned: true,
        created: true,
        description: true,

        endpointManagementSolution: {
          select: {
            id: true,
          },
        },

        enterpriseId: true,
        id: true,
        isLocked: true,
        isShared: true,
        note: true,
        systemBackupId: true,
        systemCitrixId: true,
        tag: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/asset")
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "update",
    possession: "any",
  })
  async connectAsset(
    @common.Param() params: EndpointManagementSolutionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      asset: {
        connect: body,
      },
    };
    await this.service.updateEndpointManagementSolution({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/asset")
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "update",
    possession: "any",
  })
  async updateAsset(
    @common.Param() params: EndpointManagementSolutionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      asset: {
        set: body,
      },
    };
    await this.service.updateEndpointManagementSolution({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/asset")
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "update",
    possession: "any",
  })
  async disconnectAsset(
    @common.Param() params: EndpointManagementSolutionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      asset: {
        disconnect: body,
      },
    };
    await this.service.updateEndpointManagementSolution({
      where: params,
      data,
      select: { id: true },
    });
  }
}
