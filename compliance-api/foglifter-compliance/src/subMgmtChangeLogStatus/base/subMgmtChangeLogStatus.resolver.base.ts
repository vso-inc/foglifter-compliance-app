/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubMgmtChangeLogStatus } from "./SubMgmtChangeLogStatus";
import { SubMgmtChangeLogStatusCountArgs } from "./SubMgmtChangeLogStatusCountArgs";
import { SubMgmtChangeLogStatusFindManyArgs } from "./SubMgmtChangeLogStatusFindManyArgs";
import { SubMgmtChangeLogStatusFindUniqueArgs } from "./SubMgmtChangeLogStatusFindUniqueArgs";
import { CreateSubMgmtChangeLogStatusArgs } from "./CreateSubMgmtChangeLogStatusArgs";
import { UpdateSubMgmtChangeLogStatusArgs } from "./UpdateSubMgmtChangeLogStatusArgs";
import { DeleteSubMgmtChangeLogStatusArgs } from "./DeleteSubMgmtChangeLogStatusArgs";
import { SubMgmtChangeLogFindManyArgs } from "../../subMgmtChangeLog/base/SubMgmtChangeLogFindManyArgs";
import { SubMgmtChangeLog } from "../../subMgmtChangeLog/base/SubMgmtChangeLog";
import { SubMgmtChangeLogStatusService } from "../subMgmtChangeLogStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubMgmtChangeLogStatus)
export class SubMgmtChangeLogStatusResolverBase {
  constructor(
    protected readonly service: SubMgmtChangeLogStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "read",
    possession: "any",
  })
  async _subMgmtChangeLogStatusesMeta(
    @graphql.Args() args: SubMgmtChangeLogStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubMgmtChangeLogStatus])
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "read",
    possession: "any",
  })
  async subMgmtChangeLogStatuses(
    @graphql.Args() args: SubMgmtChangeLogStatusFindManyArgs
  ): Promise<SubMgmtChangeLogStatus[]> {
    return this.service.subMgmtChangeLogStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubMgmtChangeLogStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "read",
    possession: "own",
  })
  async subMgmtChangeLogStatus(
    @graphql.Args() args: SubMgmtChangeLogStatusFindUniqueArgs
  ): Promise<SubMgmtChangeLogStatus | null> {
    const result = await this.service.subMgmtChangeLogStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubMgmtChangeLogStatus)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "create",
    possession: "any",
  })
  async createSubMgmtChangeLogStatus(
    @graphql.Args() args: CreateSubMgmtChangeLogStatusArgs
  ): Promise<SubMgmtChangeLogStatus> {
    return await this.service.createSubMgmtChangeLogStatus({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubMgmtChangeLogStatus)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "update",
    possession: "any",
  })
  async updateSubMgmtChangeLogStatus(
    @graphql.Args() args: UpdateSubMgmtChangeLogStatusArgs
  ): Promise<SubMgmtChangeLogStatus | null> {
    try {
      return await this.service.updateSubMgmtChangeLogStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubMgmtChangeLogStatus)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "delete",
    possession: "any",
  })
  async deleteSubMgmtChangeLogStatus(
    @graphql.Args() args: DeleteSubMgmtChangeLogStatusArgs
  ): Promise<SubMgmtChangeLogStatus | null> {
    try {
      return await this.service.deleteSubMgmtChangeLogStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SubMgmtChangeLog], { name: "subMgmtChangeLog" })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "any",
  })
  async findSubMgmtChangeLog(
    @graphql.Parent() parent: SubMgmtChangeLogStatus,
    @graphql.Args() args: SubMgmtChangeLogFindManyArgs
  ): Promise<SubMgmtChangeLog[]> {
    const results = await this.service.findSubMgmtChangeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
