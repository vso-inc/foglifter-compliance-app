/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubMgmtChangeLogStatusService } from "../subMgmtChangeLogStatus.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubMgmtChangeLogStatusCreateInput } from "./SubMgmtChangeLogStatusCreateInput";
import { SubMgmtChangeLogStatus } from "./SubMgmtChangeLogStatus";
import { SubMgmtChangeLogStatusFindManyArgs } from "./SubMgmtChangeLogStatusFindManyArgs";
import { SubMgmtChangeLogStatusWhereUniqueInput } from "./SubMgmtChangeLogStatusWhereUniqueInput";
import { SubMgmtChangeLogStatusUpdateInput } from "./SubMgmtChangeLogStatusUpdateInput";
import { SubMgmtChangeLogFindManyArgs } from "../../subMgmtChangeLog/base/SubMgmtChangeLogFindManyArgs";
import { SubMgmtChangeLog } from "../../subMgmtChangeLog/base/SubMgmtChangeLog";
import { SubMgmtChangeLogWhereUniqueInput } from "../../subMgmtChangeLog/base/SubMgmtChangeLogWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubMgmtChangeLogStatusControllerBase {
  constructor(
    protected readonly service: SubMgmtChangeLogStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubMgmtChangeLogStatus })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubMgmtChangeLogStatus(
    @common.Body() data: SubMgmtChangeLogStatusCreateInput
  ): Promise<SubMgmtChangeLogStatus> {
    return await this.service.createSubMgmtChangeLogStatus({
      data: data,
      select: {
        id: true,
        status: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SubMgmtChangeLogStatus] })
  @ApiNestedQuery(SubMgmtChangeLogStatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subMgmtChangeLogStatuses(
    @common.Req() request: Request
  ): Promise<SubMgmtChangeLogStatus[]> {
    const args = plainToClass(
      SubMgmtChangeLogStatusFindManyArgs,
      request.query
    );
    return this.service.subMgmtChangeLogStatuses({
      ...args,
      select: {
        id: true,
        status: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubMgmtChangeLogStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subMgmtChangeLogStatus(
    @common.Param() params: SubMgmtChangeLogStatusWhereUniqueInput
  ): Promise<SubMgmtChangeLogStatus | null> {
    const result = await this.service.subMgmtChangeLogStatus({
      where: params,
      select: {
        id: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubMgmtChangeLogStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubMgmtChangeLogStatus(
    @common.Param() params: SubMgmtChangeLogStatusWhereUniqueInput,
    @common.Body() data: SubMgmtChangeLogStatusUpdateInput
  ): Promise<SubMgmtChangeLogStatus | null> {
    try {
      return await this.service.updateSubMgmtChangeLogStatus({
        where: params,
        data: data,
        select: {
          id: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubMgmtChangeLogStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubMgmtChangeLogStatus(
    @common.Param() params: SubMgmtChangeLogStatusWhereUniqueInput
  ): Promise<SubMgmtChangeLogStatus | null> {
    try {
      return await this.service.deleteSubMgmtChangeLogStatus({
        where: params,
        select: {
          id: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subMgmtChangeLog")
  @ApiNestedQuery(SubMgmtChangeLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "any",
  })
  async findSubMgmtChangeLog(
    @common.Req() request: Request,
    @common.Param() params: SubMgmtChangeLogStatusWhereUniqueInput
  ): Promise<SubMgmtChangeLog[]> {
    const query = plainToClass(SubMgmtChangeLogFindManyArgs, request.query);
    const results = await this.service.findSubMgmtChangeLog(params.id, {
      ...query,
      select: {
        action: true,

        asset: {
          select: {
            id: true,
          },
        },

        bigfixRequest: {
          select: {
            id: true,
          },
        },

        created: true,
        hostname: true,
        id: true,
        patchChannelIncludeList: true,

        subMgmtChangeLogStatus: {
          select: {
            id: true,
          },
        },

        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subMgmtChangeLog")
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "update",
    possession: "any",
  })
  async connectSubMgmtChangeLog(
    @common.Param() params: SubMgmtChangeLogStatusWhereUniqueInput,
    @common.Body() body: SubMgmtChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtChangeLog: {
        connect: body,
      },
    };
    await this.service.updateSubMgmtChangeLogStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subMgmtChangeLog")
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "update",
    possession: "any",
  })
  async updateSubMgmtChangeLog(
    @common.Param() params: SubMgmtChangeLogStatusWhereUniqueInput,
    @common.Body() body: SubMgmtChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtChangeLog: {
        set: body,
      },
    };
    await this.service.updateSubMgmtChangeLogStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subMgmtChangeLog")
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLogStatus",
    action: "update",
    possession: "any",
  })
  async disconnectSubMgmtChangeLog(
    @common.Param() params: SubMgmtChangeLogStatusWhereUniqueInput,
    @common.Body() body: SubMgmtChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtChangeLog: {
        disconnect: body,
      },
    };
    await this.service.updateSubMgmtChangeLogStatus({
      where: params,
      data,
      select: { id: true },
    });
  }
}
