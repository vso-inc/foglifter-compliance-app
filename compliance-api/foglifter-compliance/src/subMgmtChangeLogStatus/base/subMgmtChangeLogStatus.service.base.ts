/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SubMgmtChangeLogStatus as PrismaSubMgmtChangeLogStatus,
  SubMgmtChangeLog as PrismaSubMgmtChangeLog,
} from "@prisma/client";

export class SubMgmtChangeLogStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubMgmtChangeLogStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subMgmtChangeLogStatus.count(args);
  }

  async subMgmtChangeLogStatuses(
    args: Prisma.SubMgmtChangeLogStatusFindManyArgs
  ): Promise<PrismaSubMgmtChangeLogStatus[]> {
    return this.prisma.subMgmtChangeLogStatus.findMany(args);
  }
  async subMgmtChangeLogStatus(
    args: Prisma.SubMgmtChangeLogStatusFindUniqueArgs
  ): Promise<PrismaSubMgmtChangeLogStatus | null> {
    return this.prisma.subMgmtChangeLogStatus.findUnique(args);
  }
  async createSubMgmtChangeLogStatus(
    args: Prisma.SubMgmtChangeLogStatusCreateArgs
  ): Promise<PrismaSubMgmtChangeLogStatus> {
    return this.prisma.subMgmtChangeLogStatus.create(args);
  }
  async updateSubMgmtChangeLogStatus(
    args: Prisma.SubMgmtChangeLogStatusUpdateArgs
  ): Promise<PrismaSubMgmtChangeLogStatus> {
    return this.prisma.subMgmtChangeLogStatus.update(args);
  }
  async deleteSubMgmtChangeLogStatus(
    args: Prisma.SubMgmtChangeLogStatusDeleteArgs
  ): Promise<PrismaSubMgmtChangeLogStatus> {
    return this.prisma.subMgmtChangeLogStatus.delete(args);
  }

  async findSubMgmtChangeLog(
    parentId: number,
    args: Prisma.SubMgmtChangeLogFindManyArgs
  ): Promise<PrismaSubMgmtChangeLog[]> {
    return this.prisma.subMgmtChangeLogStatus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subMgmtChangeLog(args);
  }
}
