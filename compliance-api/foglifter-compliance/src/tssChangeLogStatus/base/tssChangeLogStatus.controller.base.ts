/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TssChangeLogStatusService } from "../tssChangeLogStatus.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TssChangeLogStatusCreateInput } from "./TssChangeLogStatusCreateInput";
import { TssChangeLogStatus } from "./TssChangeLogStatus";
import { TssChangeLogStatusFindManyArgs } from "./TssChangeLogStatusFindManyArgs";
import { TssChangeLogStatusWhereUniqueInput } from "./TssChangeLogStatusWhereUniqueInput";
import { TssChangeLogStatusUpdateInput } from "./TssChangeLogStatusUpdateInput";
import { TssChangeLogFindManyArgs } from "../../tssChangeLog/base/TssChangeLogFindManyArgs";
import { TssChangeLog } from "../../tssChangeLog/base/TssChangeLog";
import { TssChangeLogWhereUniqueInput } from "../../tssChangeLog/base/TssChangeLogWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TssChangeLogStatusControllerBase {
  constructor(
    protected readonly service: TssChangeLogStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TssChangeLogStatus })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTssChangeLogStatus(
    @common.Body() data: TssChangeLogStatusCreateInput
  ): Promise<TssChangeLogStatus> {
    return await this.service.createTssChangeLogStatus({
      data: data,
      select: {
        id: true,
        status: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TssChangeLogStatus] })
  @ApiNestedQuery(TssChangeLogStatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tssChangeLogStatuses(
    @common.Req() request: Request
  ): Promise<TssChangeLogStatus[]> {
    const args = plainToClass(TssChangeLogStatusFindManyArgs, request.query);
    return this.service.tssChangeLogStatuses({
      ...args,
      select: {
        id: true,
        status: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TssChangeLogStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tssChangeLogStatus(
    @common.Param() params: TssChangeLogStatusWhereUniqueInput
  ): Promise<TssChangeLogStatus | null> {
    const result = await this.service.tssChangeLogStatus({
      where: params,
      select: {
        id: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TssChangeLogStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTssChangeLogStatus(
    @common.Param() params: TssChangeLogStatusWhereUniqueInput,
    @common.Body() data: TssChangeLogStatusUpdateInput
  ): Promise<TssChangeLogStatus | null> {
    try {
      return await this.service.updateTssChangeLogStatus({
        where: params,
        data: data,
        select: {
          id: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TssChangeLogStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTssChangeLogStatus(
    @common.Param() params: TssChangeLogStatusWhereUniqueInput
  ): Promise<TssChangeLogStatus | null> {
    try {
      return await this.service.deleteTssChangeLogStatus({
        where: params,
        select: {
          id: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/tssChangeLog")
  @ApiNestedQuery(TssChangeLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "read",
    possession: "any",
  })
  async findTssChangeLog(
    @common.Req() request: Request,
    @common.Param() params: TssChangeLogStatusWhereUniqueInput
  ): Promise<TssChangeLog[]> {
    const query = plainToClass(TssChangeLogFindManyArgs, request.query);
    const results = await this.service.findTssChangeLog(params.id, {
      ...query,
      select: {
        action: true,
        applyOn: true,
        applyOnNextScheduledMaintWindow: true,

        asset: {
          select: {
            id: true,
          },
        },

        bigfixRequest: {
          select: {
            id: true,
          },
        },

        created: true,
        id: true,
        remediationWindowHours: true,

        tssChangeLogStatus: {
          select: {
            id: true,
          },
        },

        tssIncludeList: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tssChangeLog")
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "update",
    possession: "any",
  })
  async connectTssChangeLog(
    @common.Param() params: TssChangeLogStatusWhereUniqueInput,
    @common.Body() body: TssChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tssChangeLog: {
        connect: body,
      },
    };
    await this.service.updateTssChangeLogStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tssChangeLog")
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "update",
    possession: "any",
  })
  async updateTssChangeLog(
    @common.Param() params: TssChangeLogStatusWhereUniqueInput,
    @common.Body() body: TssChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tssChangeLog: {
        set: body,
      },
    };
    await this.service.updateTssChangeLogStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tssChangeLog")
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "update",
    possession: "any",
  })
  async disconnectTssChangeLog(
    @common.Param() params: TssChangeLogStatusWhereUniqueInput,
    @common.Body() body: TssChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tssChangeLog: {
        disconnect: body,
      },
    };
    await this.service.updateTssChangeLogStatus({
      where: params,
      data,
      select: { id: true },
    });
  }
}
