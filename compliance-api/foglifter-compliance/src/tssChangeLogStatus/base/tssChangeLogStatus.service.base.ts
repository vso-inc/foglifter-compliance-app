/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TssChangeLogStatus as PrismaTssChangeLogStatus,
  TssChangeLog as PrismaTssChangeLog,
} from "@prisma/client";

export class TssChangeLogStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TssChangeLogStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tssChangeLogStatus.count(args);
  }

  async tssChangeLogStatuses(
    args: Prisma.TssChangeLogStatusFindManyArgs
  ): Promise<PrismaTssChangeLogStatus[]> {
    return this.prisma.tssChangeLogStatus.findMany(args);
  }
  async tssChangeLogStatus(
    args: Prisma.TssChangeLogStatusFindUniqueArgs
  ): Promise<PrismaTssChangeLogStatus | null> {
    return this.prisma.tssChangeLogStatus.findUnique(args);
  }
  async createTssChangeLogStatus(
    args: Prisma.TssChangeLogStatusCreateArgs
  ): Promise<PrismaTssChangeLogStatus> {
    return this.prisma.tssChangeLogStatus.create(args);
  }
  async updateTssChangeLogStatus(
    args: Prisma.TssChangeLogStatusUpdateArgs
  ): Promise<PrismaTssChangeLogStatus> {
    return this.prisma.tssChangeLogStatus.update(args);
  }
  async deleteTssChangeLogStatus(
    args: Prisma.TssChangeLogStatusDeleteArgs
  ): Promise<PrismaTssChangeLogStatus> {
    return this.prisma.tssChangeLogStatus.delete(args);
  }

  async findTssChangeLog(
    parentId: number,
    args: Prisma.TssChangeLogFindManyArgs
  ): Promise<PrismaTssChangeLog[]> {
    return this.prisma.tssChangeLogStatus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tssChangeLog(args);
  }
}
