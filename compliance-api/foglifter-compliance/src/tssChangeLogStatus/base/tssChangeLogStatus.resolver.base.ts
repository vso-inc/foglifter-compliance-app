/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TssChangeLogStatus } from "./TssChangeLogStatus";
import { TssChangeLogStatusCountArgs } from "./TssChangeLogStatusCountArgs";
import { TssChangeLogStatusFindManyArgs } from "./TssChangeLogStatusFindManyArgs";
import { TssChangeLogStatusFindUniqueArgs } from "./TssChangeLogStatusFindUniqueArgs";
import { CreateTssChangeLogStatusArgs } from "./CreateTssChangeLogStatusArgs";
import { UpdateTssChangeLogStatusArgs } from "./UpdateTssChangeLogStatusArgs";
import { DeleteTssChangeLogStatusArgs } from "./DeleteTssChangeLogStatusArgs";
import { TssChangeLogFindManyArgs } from "../../tssChangeLog/base/TssChangeLogFindManyArgs";
import { TssChangeLog } from "../../tssChangeLog/base/TssChangeLog";
import { TssChangeLogStatusService } from "../tssChangeLogStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TssChangeLogStatus)
export class TssChangeLogStatusResolverBase {
  constructor(
    protected readonly service: TssChangeLogStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "read",
    possession: "any",
  })
  async _tssChangeLogStatusesMeta(
    @graphql.Args() args: TssChangeLogStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TssChangeLogStatus])
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "read",
    possession: "any",
  })
  async tssChangeLogStatuses(
    @graphql.Args() args: TssChangeLogStatusFindManyArgs
  ): Promise<TssChangeLogStatus[]> {
    return this.service.tssChangeLogStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TssChangeLogStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "read",
    possession: "own",
  })
  async tssChangeLogStatus(
    @graphql.Args() args: TssChangeLogStatusFindUniqueArgs
  ): Promise<TssChangeLogStatus | null> {
    const result = await this.service.tssChangeLogStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TssChangeLogStatus)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "create",
    possession: "any",
  })
  async createTssChangeLogStatus(
    @graphql.Args() args: CreateTssChangeLogStatusArgs
  ): Promise<TssChangeLogStatus> {
    return await this.service.createTssChangeLogStatus({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TssChangeLogStatus)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "update",
    possession: "any",
  })
  async updateTssChangeLogStatus(
    @graphql.Args() args: UpdateTssChangeLogStatusArgs
  ): Promise<TssChangeLogStatus | null> {
    try {
      return await this.service.updateTssChangeLogStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TssChangeLogStatus)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLogStatus",
    action: "delete",
    possession: "any",
  })
  async deleteTssChangeLogStatus(
    @graphql.Args() args: DeleteTssChangeLogStatusArgs
  ): Promise<TssChangeLogStatus | null> {
    try {
      return await this.service.deleteTssChangeLogStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TssChangeLog], { name: "tssChangeLog" })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "read",
    possession: "any",
  })
  async findTssChangeLog(
    @graphql.Parent() parent: TssChangeLogStatus,
    @graphql.Args() args: TssChangeLogFindManyArgs
  ): Promise<TssChangeLog[]> {
    const results = await this.service.findTssChangeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
