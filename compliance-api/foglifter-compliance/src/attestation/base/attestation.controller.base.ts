/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AttestationService } from "../attestation.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AttestationCreateInput } from "./AttestationCreateInput";
import { Attestation } from "./Attestation";
import { AttestationFindManyArgs } from "./AttestationFindManyArgs";
import { AttestationWhereUniqueInput } from "./AttestationWhereUniqueInput";
import { AttestationUpdateInput } from "./AttestationUpdateInput";
import { AttestationHostFindManyArgs } from "../../attestationHost/base/AttestationHostFindManyArgs";
import { AttestationHost } from "../../attestationHost/base/AttestationHost";
import { AttestationHostWhereUniqueInput } from "../../attestationHost/base/AttestationHostWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AttestationControllerBase {
  constructor(
    protected readonly service: AttestationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Attestation })
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAttestation(
    @common.Body() data: AttestationCreateInput
  ): Promise<Attestation> {
    return await this.service.createAttestation({
      data: {
        ...data,

        application: {
          connect: data.application,
        },

        attestationType: {
          connect: data.attestationType,
        },
      },
      select: {
        alternateContactEmail: true,
        alternateContactNuid: true,

        application: {
          select: {
            id: true,
          },
        },

        attestationType: {
          select: {
            id: true,
          },
        },

        caseId: true,
        connectedToAThirdPartySystem: true,
        created: true,
        guid: true,
        hasSensitiveData: true,
        id: true,
        impactedRegion: true,
        isEmergencyRequest: true,
        isPermanentRequest: true,
        justification: true,
        longTermSolution: true,
        mitigatingCompensatingControls: true,
        owningOrganization: true,
        primaryContactEmail: true,
        primaryContactNuid: true,
        remediationPlan: true,
        remediationPlanTargetedCompletion: true,
        response: true,
        riskManagementOption: true,
        sentToThirdParty: true,
        status: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Attestation] })
  @ApiNestedQuery(AttestationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async attestations(@common.Req() request: Request): Promise<Attestation[]> {
    const args = plainToClass(AttestationFindManyArgs, request.query);
    return this.service.attestations({
      ...args,
      select: {
        alternateContactEmail: true,
        alternateContactNuid: true,

        application: {
          select: {
            id: true,
          },
        },

        attestationType: {
          select: {
            id: true,
          },
        },

        caseId: true,
        connectedToAThirdPartySystem: true,
        created: true,
        guid: true,
        hasSensitiveData: true,
        id: true,
        impactedRegion: true,
        isEmergencyRequest: true,
        isPermanentRequest: true,
        justification: true,
        longTermSolution: true,
        mitigatingCompensatingControls: true,
        owningOrganization: true,
        primaryContactEmail: true,
        primaryContactNuid: true,
        remediationPlan: true,
        remediationPlanTargetedCompletion: true,
        response: true,
        riskManagementOption: true,
        sentToThirdParty: true,
        status: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Attestation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async attestation(
    @common.Param() params: AttestationWhereUniqueInput
  ): Promise<Attestation | null> {
    const result = await this.service.attestation({
      where: params,
      select: {
        alternateContactEmail: true,
        alternateContactNuid: true,

        application: {
          select: {
            id: true,
          },
        },

        attestationType: {
          select: {
            id: true,
          },
        },

        caseId: true,
        connectedToAThirdPartySystem: true,
        created: true,
        guid: true,
        hasSensitiveData: true,
        id: true,
        impactedRegion: true,
        isEmergencyRequest: true,
        isPermanentRequest: true,
        justification: true,
        longTermSolution: true,
        mitigatingCompensatingControls: true,
        owningOrganization: true,
        primaryContactEmail: true,
        primaryContactNuid: true,
        remediationPlan: true,
        remediationPlanTargetedCompletion: true,
        response: true,
        riskManagementOption: true,
        sentToThirdParty: true,
        status: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Attestation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAttestation(
    @common.Param() params: AttestationWhereUniqueInput,
    @common.Body() data: AttestationUpdateInput
  ): Promise<Attestation | null> {
    try {
      return await this.service.updateAttestation({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },

          attestationType: {
            connect: data.attestationType,
          },
        },
        select: {
          alternateContactEmail: true,
          alternateContactNuid: true,

          application: {
            select: {
              id: true,
            },
          },

          attestationType: {
            select: {
              id: true,
            },
          },

          caseId: true,
          connectedToAThirdPartySystem: true,
          created: true,
          guid: true,
          hasSensitiveData: true,
          id: true,
          impactedRegion: true,
          isEmergencyRequest: true,
          isPermanentRequest: true,
          justification: true,
          longTermSolution: true,
          mitigatingCompensatingControls: true,
          owningOrganization: true,
          primaryContactEmail: true,
          primaryContactNuid: true,
          remediationPlan: true,
          remediationPlanTargetedCompletion: true,
          response: true,
          riskManagementOption: true,
          sentToThirdParty: true,
          status: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Attestation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAttestation(
    @common.Param() params: AttestationWhereUniqueInput
  ): Promise<Attestation | null> {
    try {
      return await this.service.deleteAttestation({
        where: params,
        select: {
          alternateContactEmail: true,
          alternateContactNuid: true,

          application: {
            select: {
              id: true,
            },
          },

          attestationType: {
            select: {
              id: true,
            },
          },

          caseId: true,
          connectedToAThirdPartySystem: true,
          created: true,
          guid: true,
          hasSensitiveData: true,
          id: true,
          impactedRegion: true,
          isEmergencyRequest: true,
          isPermanentRequest: true,
          justification: true,
          longTermSolution: true,
          mitigatingCompensatingControls: true,
          owningOrganization: true,
          primaryContactEmail: true,
          primaryContactNuid: true,
          remediationPlan: true,
          remediationPlanTargetedCompletion: true,
          response: true,
          riskManagementOption: true,
          sentToThirdParty: true,
          status: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attestationHost")
  @ApiNestedQuery(AttestationHostFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "read",
    possession: "any",
  })
  async findAttestationHost(
    @common.Req() request: Request,
    @common.Param() params: AttestationWhereUniqueInput
  ): Promise<AttestationHost[]> {
    const query = plainToClass(AttestationHostFindManyArgs, request.query);
    const results = await this.service.findAttestationHost(params.id, {
      ...query,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        attestation: {
          select: {
            id: true,
          },
        },

        created: true,
        id: true,
        isSupportedByThirdParty: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attestationHost")
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "update",
    possession: "any",
  })
  async connectAttestationHost(
    @common.Param() params: AttestationWhereUniqueInput,
    @common.Body() body: AttestationHostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestationHost: {
        connect: body,
      },
    };
    await this.service.updateAttestation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attestationHost")
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "update",
    possession: "any",
  })
  async updateAttestationHost(
    @common.Param() params: AttestationWhereUniqueInput,
    @common.Body() body: AttestationHostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestationHost: {
        set: body,
      },
    };
    await this.service.updateAttestation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attestationHost")
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "update",
    possession: "any",
  })
  async disconnectAttestationHost(
    @common.Param() params: AttestationWhereUniqueInput,
    @common.Body() body: AttestationHostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attestationHost: {
        disconnect: body,
      },
    };
    await this.service.updateAttestation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
