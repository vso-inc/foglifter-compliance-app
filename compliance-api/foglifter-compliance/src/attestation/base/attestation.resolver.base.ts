/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Attestation } from "./Attestation";
import { AttestationCountArgs } from "./AttestationCountArgs";
import { AttestationFindManyArgs } from "./AttestationFindManyArgs";
import { AttestationFindUniqueArgs } from "./AttestationFindUniqueArgs";
import { CreateAttestationArgs } from "./CreateAttestationArgs";
import { UpdateAttestationArgs } from "./UpdateAttestationArgs";
import { DeleteAttestationArgs } from "./DeleteAttestationArgs";
import { AttestationHostFindManyArgs } from "../../attestationHost/base/AttestationHostFindManyArgs";
import { AttestationHost } from "../../attestationHost/base/AttestationHost";
import { Application } from "../../application/base/Application";
import { AttestationType } from "../../attestationType/base/AttestationType";
import { AttestationService } from "../attestation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Attestation)
export class AttestationResolverBase {
  constructor(
    protected readonly service: AttestationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "any",
  })
  async _attestationsMeta(
    @graphql.Args() args: AttestationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Attestation])
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "any",
  })
  async attestations(
    @graphql.Args() args: AttestationFindManyArgs
  ): Promise<Attestation[]> {
    return this.service.attestations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Attestation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "own",
  })
  async attestation(
    @graphql.Args() args: AttestationFindUniqueArgs
  ): Promise<Attestation | null> {
    const result = await this.service.attestation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Attestation)
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "create",
    possession: "any",
  })
  async createAttestation(
    @graphql.Args() args: CreateAttestationArgs
  ): Promise<Attestation> {
    return await this.service.createAttestation({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        attestationType: {
          connect: args.data.attestationType,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Attestation)
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "update",
    possession: "any",
  })
  async updateAttestation(
    @graphql.Args() args: UpdateAttestationArgs
  ): Promise<Attestation | null> {
    try {
      return await this.service.updateAttestation({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          attestationType: {
            connect: args.data.attestationType,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Attestation)
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "delete",
    possession: "any",
  })
  async deleteAttestation(
    @graphql.Args() args: DeleteAttestationArgs
  ): Promise<Attestation | null> {
    try {
      return await this.service.deleteAttestation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AttestationHost], { name: "attestationHost" })
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "read",
    possession: "any",
  })
  async findAttestationHost(
    @graphql.Parent() parent: Attestation,
    @graphql.Args() args: AttestationHostFindManyArgs
  ): Promise<AttestationHost[]> {
    const results = await this.service.findAttestationHost(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplication(
    @graphql.Parent() parent: Attestation
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AttestationType, {
    nullable: true,
    name: "attestationType",
  })
  @nestAccessControl.UseRoles({
    resource: "AttestationType",
    action: "read",
    possession: "any",
  })
  async getAttestationType(
    @graphql.Parent() parent: Attestation
  ): Promise<AttestationType | null> {
    const result = await this.service.getAttestationType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
