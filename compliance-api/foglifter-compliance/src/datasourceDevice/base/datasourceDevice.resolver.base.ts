/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DatasourceDevice } from "./DatasourceDevice";
import { DatasourceDeviceCountArgs } from "./DatasourceDeviceCountArgs";
import { DatasourceDeviceFindManyArgs } from "./DatasourceDeviceFindManyArgs";
import { DatasourceDeviceFindUniqueArgs } from "./DatasourceDeviceFindUniqueArgs";
import { CreateDatasourceDeviceArgs } from "./CreateDatasourceDeviceArgs";
import { UpdateDatasourceDeviceArgs } from "./UpdateDatasourceDeviceArgs";
import { DeleteDatasourceDeviceArgs } from "./DeleteDatasourceDeviceArgs";
import { Asset } from "../../asset/base/Asset";
import { DatasourceDeviceService } from "../datasourceDevice.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DatasourceDevice)
export class DatasourceDeviceResolverBase {
  constructor(
    protected readonly service: DatasourceDeviceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DatasourceDevice",
    action: "read",
    possession: "any",
  })
  async _datasourceDevicesMeta(
    @graphql.Args() args: DatasourceDeviceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DatasourceDevice])
  @nestAccessControl.UseRoles({
    resource: "DatasourceDevice",
    action: "read",
    possession: "any",
  })
  async datasourceDevices(
    @graphql.Args() args: DatasourceDeviceFindManyArgs
  ): Promise<DatasourceDevice[]> {
    return this.service.datasourceDevices(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DatasourceDevice, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DatasourceDevice",
    action: "read",
    possession: "own",
  })
  async datasourceDevice(
    @graphql.Args() args: DatasourceDeviceFindUniqueArgs
  ): Promise<DatasourceDevice | null> {
    const result = await this.service.datasourceDevice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DatasourceDevice)
  @nestAccessControl.UseRoles({
    resource: "DatasourceDevice",
    action: "create",
    possession: "any",
  })
  async createDatasourceDevice(
    @graphql.Args() args: CreateDatasourceDeviceArgs
  ): Promise<DatasourceDevice> {
    return await this.service.createDatasourceDevice({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DatasourceDevice)
  @nestAccessControl.UseRoles({
    resource: "DatasourceDevice",
    action: "update",
    possession: "any",
  })
  async updateDatasourceDevice(
    @graphql.Args() args: UpdateDatasourceDeviceArgs
  ): Promise<DatasourceDevice | null> {
    try {
      return await this.service.updateDatasourceDevice({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DatasourceDevice)
  @nestAccessControl.UseRoles({
    resource: "DatasourceDevice",
    action: "delete",
    possession: "any",
  })
  async deleteDatasourceDevice(
    @graphql.Args() args: DeleteDatasourceDeviceArgs
  ): Promise<DatasourceDevice | null> {
    try {
      return await this.service.deleteDatasourceDevice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: DatasourceDevice
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
