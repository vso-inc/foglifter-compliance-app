/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DatasourceDevice as PrismaDatasourceDevice,
  Asset as PrismaAsset,
} from "@prisma/client";

export class DatasourceDeviceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DatasourceDeviceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.datasourceDevice.count(args);
  }

  async datasourceDevices(
    args: Prisma.DatasourceDeviceFindManyArgs
  ): Promise<PrismaDatasourceDevice[]> {
    return this.prisma.datasourceDevice.findMany(args);
  }
  async datasourceDevice(
    args: Prisma.DatasourceDeviceFindUniqueArgs
  ): Promise<PrismaDatasourceDevice | null> {
    return this.prisma.datasourceDevice.findUnique(args);
  }
  async createDatasourceDevice(
    args: Prisma.DatasourceDeviceCreateArgs
  ): Promise<PrismaDatasourceDevice> {
    return this.prisma.datasourceDevice.create(args);
  }
  async updateDatasourceDevice(
    args: Prisma.DatasourceDeviceUpdateArgs
  ): Promise<PrismaDatasourceDevice> {
    return this.prisma.datasourceDevice.update(args);
  }
  async deleteDatasourceDevice(
    args: Prisma.DatasourceDeviceDeleteArgs
  ): Promise<PrismaDatasourceDevice> {
    return this.prisma.datasourceDevice.delete(args);
  }

  async getAsset(parentId: bigint): Promise<PrismaAsset | null> {
    return this.prisma.datasourceDevice
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
