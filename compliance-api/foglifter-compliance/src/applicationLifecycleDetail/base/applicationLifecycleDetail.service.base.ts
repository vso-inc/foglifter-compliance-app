/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationLifecycleDetail as PrismaApplicationLifecycleDetail,
  Application as PrismaApplication,
} from "@prisma/client";

export class ApplicationLifecycleDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationLifecycleDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicationLifecycleDetail.count(args);
  }

  async applicationLifecycleDetails(
    args: Prisma.ApplicationLifecycleDetailFindManyArgs
  ): Promise<PrismaApplicationLifecycleDetail[]> {
    return this.prisma.applicationLifecycleDetail.findMany(args);
  }
  async applicationLifecycleDetail(
    args: Prisma.ApplicationLifecycleDetailFindUniqueArgs
  ): Promise<PrismaApplicationLifecycleDetail | null> {
    return this.prisma.applicationLifecycleDetail.findUnique(args);
  }
  async createApplicationLifecycleDetail(
    args: Prisma.ApplicationLifecycleDetailCreateArgs
  ): Promise<PrismaApplicationLifecycleDetail> {
    return this.prisma.applicationLifecycleDetail.create(args);
  }
  async updateApplicationLifecycleDetail(
    args: Prisma.ApplicationLifecycleDetailUpdateArgs
  ): Promise<PrismaApplicationLifecycleDetail> {
    return this.prisma.applicationLifecycleDetail.update(args);
  }
  async deleteApplicationLifecycleDetail(
    args: Prisma.ApplicationLifecycleDetailDeleteArgs
  ): Promise<PrismaApplicationLifecycleDetail> {
    return this.prisma.applicationLifecycleDetail.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.applicationLifecycleDetail
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
