/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApplicationLifecycleDetail } from "./ApplicationLifecycleDetail";
import { ApplicationLifecycleDetailCountArgs } from "./ApplicationLifecycleDetailCountArgs";
import { ApplicationLifecycleDetailFindManyArgs } from "./ApplicationLifecycleDetailFindManyArgs";
import { ApplicationLifecycleDetailFindUniqueArgs } from "./ApplicationLifecycleDetailFindUniqueArgs";
import { CreateApplicationLifecycleDetailArgs } from "./CreateApplicationLifecycleDetailArgs";
import { UpdateApplicationLifecycleDetailArgs } from "./UpdateApplicationLifecycleDetailArgs";
import { DeleteApplicationLifecycleDetailArgs } from "./DeleteApplicationLifecycleDetailArgs";
import { Application } from "../../application/base/Application";
import { ApplicationLifecycleDetailService } from "../applicationLifecycleDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationLifecycleDetail)
export class ApplicationLifecycleDetailResolverBase {
  constructor(
    protected readonly service: ApplicationLifecycleDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationLifecycleDetail",
    action: "read",
    possession: "any",
  })
  async _applicationLifecycleDetailsMeta(
    @graphql.Args() args: ApplicationLifecycleDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationLifecycleDetail])
  @nestAccessControl.UseRoles({
    resource: "ApplicationLifecycleDetail",
    action: "read",
    possession: "any",
  })
  async applicationLifecycleDetails(
    @graphql.Args() args: ApplicationLifecycleDetailFindManyArgs
  ): Promise<ApplicationLifecycleDetail[]> {
    return this.service.applicationLifecycleDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationLifecycleDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationLifecycleDetail",
    action: "read",
    possession: "own",
  })
  async applicationLifecycleDetail(
    @graphql.Args() args: ApplicationLifecycleDetailFindUniqueArgs
  ): Promise<ApplicationLifecycleDetail | null> {
    const result = await this.service.applicationLifecycleDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationLifecycleDetail)
  @nestAccessControl.UseRoles({
    resource: "ApplicationLifecycleDetail",
    action: "create",
    possession: "any",
  })
  async createApplicationLifecycleDetail(
    @graphql.Args() args: CreateApplicationLifecycleDetailArgs
  ): Promise<ApplicationLifecycleDetail> {
    return await this.service.createApplicationLifecycleDetail({
      ...args,
      data: {
        ...args.data,

        application: args.data.application
          ? {
              connect: args.data.application,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationLifecycleDetail)
  @nestAccessControl.UseRoles({
    resource: "ApplicationLifecycleDetail",
    action: "update",
    possession: "any",
  })
  async updateApplicationLifecycleDetail(
    @graphql.Args() args: UpdateApplicationLifecycleDetailArgs
  ): Promise<ApplicationLifecycleDetail | null> {
    try {
      return await this.service.updateApplicationLifecycleDetail({
        ...args,
        data: {
          ...args.data,

          application: args.data.application
            ? {
                connect: args.data.application,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationLifecycleDetail)
  @nestAccessControl.UseRoles({
    resource: "ApplicationLifecycleDetail",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationLifecycleDetail(
    @graphql.Args() args: DeleteApplicationLifecycleDetailArgs
  ): Promise<ApplicationLifecycleDetail | null> {
    try {
      return await this.service.deleteApplicationLifecycleDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplication(
    @graphql.Parent() parent: ApplicationLifecycleDetail
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
