/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationOrganization as PrismaApplicationOrganization,
  Application as PrismaApplication,
} from "@prisma/client";

export class ApplicationOrganizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationOrganizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicationOrganization.count(args);
  }

  async applicationOrganizations(
    args: Prisma.ApplicationOrganizationFindManyArgs
  ): Promise<PrismaApplicationOrganization[]> {
    return this.prisma.applicationOrganization.findMany(args);
  }
  async applicationOrganization(
    args: Prisma.ApplicationOrganizationFindUniqueArgs
  ): Promise<PrismaApplicationOrganization | null> {
    return this.prisma.applicationOrganization.findUnique(args);
  }
  async createApplicationOrganization(
    args: Prisma.ApplicationOrganizationCreateArgs
  ): Promise<PrismaApplicationOrganization> {
    return this.prisma.applicationOrganization.create(args);
  }
  async updateApplicationOrganization(
    args: Prisma.ApplicationOrganizationUpdateArgs
  ): Promise<PrismaApplicationOrganization> {
    return this.prisma.applicationOrganization.update(args);
  }
  async deleteApplicationOrganization(
    args: Prisma.ApplicationOrganizationDeleteArgs
  ): Promise<PrismaApplicationOrganization> {
    return this.prisma.applicationOrganization.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.applicationOrganization
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
