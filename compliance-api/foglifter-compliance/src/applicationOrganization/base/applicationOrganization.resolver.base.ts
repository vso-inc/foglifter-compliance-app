/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApplicationOrganization } from "./ApplicationOrganization";
import { ApplicationOrganizationCountArgs } from "./ApplicationOrganizationCountArgs";
import { ApplicationOrganizationFindManyArgs } from "./ApplicationOrganizationFindManyArgs";
import { ApplicationOrganizationFindUniqueArgs } from "./ApplicationOrganizationFindUniqueArgs";
import { CreateApplicationOrganizationArgs } from "./CreateApplicationOrganizationArgs";
import { UpdateApplicationOrganizationArgs } from "./UpdateApplicationOrganizationArgs";
import { DeleteApplicationOrganizationArgs } from "./DeleteApplicationOrganizationArgs";
import { Application } from "../../application/base/Application";
import { ApplicationOrganizationService } from "../applicationOrganization.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationOrganization)
export class ApplicationOrganizationResolverBase {
  constructor(
    protected readonly service: ApplicationOrganizationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationOrganization",
    action: "read",
    possession: "any",
  })
  async _applicationOrganizationsMeta(
    @graphql.Args() args: ApplicationOrganizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationOrganization])
  @nestAccessControl.UseRoles({
    resource: "ApplicationOrganization",
    action: "read",
    possession: "any",
  })
  async applicationOrganizations(
    @graphql.Args() args: ApplicationOrganizationFindManyArgs
  ): Promise<ApplicationOrganization[]> {
    return this.service.applicationOrganizations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationOrganization, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationOrganization",
    action: "read",
    possession: "own",
  })
  async applicationOrganization(
    @graphql.Args() args: ApplicationOrganizationFindUniqueArgs
  ): Promise<ApplicationOrganization | null> {
    const result = await this.service.applicationOrganization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationOrganization)
  @nestAccessControl.UseRoles({
    resource: "ApplicationOrganization",
    action: "create",
    possession: "any",
  })
  async createApplicationOrganization(
    @graphql.Args() args: CreateApplicationOrganizationArgs
  ): Promise<ApplicationOrganization> {
    return await this.service.createApplicationOrganization({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationOrganization)
  @nestAccessControl.UseRoles({
    resource: "ApplicationOrganization",
    action: "update",
    possession: "any",
  })
  async updateApplicationOrganization(
    @graphql.Args() args: UpdateApplicationOrganizationArgs
  ): Promise<ApplicationOrganization | null> {
    try {
      return await this.service.updateApplicationOrganization({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationOrganization)
  @nestAccessControl.UseRoles({
    resource: "ApplicationOrganization",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationOrganization(
    @graphql.Args() args: DeleteApplicationOrganizationArgs
  ): Promise<ApplicationOrganization | null> {
    try {
      return await this.service.deleteApplicationOrganization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplication(
    @graphql.Parent() parent: ApplicationOrganization
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
