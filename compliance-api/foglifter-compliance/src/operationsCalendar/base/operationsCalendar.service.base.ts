/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OperationsCalendar as PrismaOperationsCalendar,
  Asset as PrismaAsset,
  Contact as PrismaContact,
  OperationsCalendarStatus as PrismaOperationsCalendarStatus,
} from "@prisma/client";

export class OperationsCalendarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OperationsCalendarCountArgs, "select">
  ): Promise<number> {
    return this.prisma.operationsCalendar.count(args);
  }

  async operationsCalendars(
    args: Prisma.OperationsCalendarFindManyArgs
  ): Promise<PrismaOperationsCalendar[]> {
    return this.prisma.operationsCalendar.findMany(args);
  }
  async operationsCalendar(
    args: Prisma.OperationsCalendarFindUniqueArgs
  ): Promise<PrismaOperationsCalendar | null> {
    return this.prisma.operationsCalendar.findUnique(args);
  }
  async createOperationsCalendar(
    args: Prisma.OperationsCalendarCreateArgs
  ): Promise<PrismaOperationsCalendar> {
    return this.prisma.operationsCalendar.create(args);
  }
  async updateOperationsCalendar(
    args: Prisma.OperationsCalendarUpdateArgs
  ): Promise<PrismaOperationsCalendar> {
    return this.prisma.operationsCalendar.update(args);
  }
  async deleteOperationsCalendar(
    args: Prisma.OperationsCalendarDeleteArgs
  ): Promise<PrismaOperationsCalendar> {
    return this.prisma.operationsCalendar.delete(args);
  }

  async getAsset(parentId: number): Promise<PrismaAsset | null> {
    return this.prisma.operationsCalendar
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }

  async getContact(parentId: number): Promise<PrismaContact | null> {
    return this.prisma.operationsCalendar
      .findUnique({
        where: { id: parentId },
      })
      .contact();
  }

  async getOperationsCalendarStatus(
    parentId: number
  ): Promise<PrismaOperationsCalendarStatus | null> {
    return this.prisma.operationsCalendar
      .findUnique({
        where: { id: parentId },
      })
      .operationsCalendarStatus();
  }
}
