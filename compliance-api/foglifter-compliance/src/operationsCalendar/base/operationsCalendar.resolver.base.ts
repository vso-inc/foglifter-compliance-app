/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OperationsCalendar } from "./OperationsCalendar";
import { OperationsCalendarCountArgs } from "./OperationsCalendarCountArgs";
import { OperationsCalendarFindManyArgs } from "./OperationsCalendarFindManyArgs";
import { OperationsCalendarFindUniqueArgs } from "./OperationsCalendarFindUniqueArgs";
import { CreateOperationsCalendarArgs } from "./CreateOperationsCalendarArgs";
import { UpdateOperationsCalendarArgs } from "./UpdateOperationsCalendarArgs";
import { DeleteOperationsCalendarArgs } from "./DeleteOperationsCalendarArgs";
import { Asset } from "../../asset/base/Asset";
import { Contact } from "../../contact/base/Contact";
import { OperationsCalendarStatus } from "../../operationsCalendarStatus/base/OperationsCalendarStatus";
import { OperationsCalendarService } from "../operationsCalendar.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OperationsCalendar)
export class OperationsCalendarResolverBase {
  constructor(
    protected readonly service: OperationsCalendarService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "read",
    possession: "any",
  })
  async _operationsCalendarsMeta(
    @graphql.Args() args: OperationsCalendarCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OperationsCalendar])
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "read",
    possession: "any",
  })
  async operationsCalendars(
    @graphql.Args() args: OperationsCalendarFindManyArgs
  ): Promise<OperationsCalendar[]> {
    return this.service.operationsCalendars(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OperationsCalendar, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "read",
    possession: "own",
  })
  async operationsCalendar(
    @graphql.Args() args: OperationsCalendarFindUniqueArgs
  ): Promise<OperationsCalendar | null> {
    const result = await this.service.operationsCalendar(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OperationsCalendar)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "create",
    possession: "any",
  })
  async createOperationsCalendar(
    @graphql.Args() args: CreateOperationsCalendarArgs
  ): Promise<OperationsCalendar> {
    return await this.service.createOperationsCalendar({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,

        contact: args.data.contact
          ? {
              connect: args.data.contact,
            }
          : undefined,

        operationsCalendarStatus: args.data.operationsCalendarStatus
          ? {
              connect: args.data.operationsCalendarStatus,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OperationsCalendar)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "update",
    possession: "any",
  })
  async updateOperationsCalendar(
    @graphql.Args() args: UpdateOperationsCalendarArgs
  ): Promise<OperationsCalendar | null> {
    try {
      return await this.service.updateOperationsCalendar({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,

          contact: args.data.contact
            ? {
                connect: args.data.contact,
              }
            : undefined,

          operationsCalendarStatus: args.data.operationsCalendarStatus
            ? {
                connect: args.data.operationsCalendarStatus,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OperationsCalendar)
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "delete",
    possession: "any",
  })
  async deleteOperationsCalendar(
    @graphql.Args() args: DeleteOperationsCalendarArgs
  ): Promise<OperationsCalendar | null> {
    try {
      return await this.service.deleteOperationsCalendar(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: OperationsCalendar
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Contact, {
    nullable: true,
    name: "contact",
  })
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  async getContact(
    @graphql.Parent() parent: OperationsCalendar
  ): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OperationsCalendarStatus, {
    nullable: true,
    name: "operationsCalendarStatus",
  })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendarStatus",
    action: "read",
    possession: "any",
  })
  async getOperationsCalendarStatus(
    @graphql.Parent() parent: OperationsCalendar
  ): Promise<OperationsCalendarStatus | null> {
    const result = await this.service.getOperationsCalendarStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
