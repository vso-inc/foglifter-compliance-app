/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BigfixRequestType } from "./BigfixRequestType";
import { BigfixRequestTypeCountArgs } from "./BigfixRequestTypeCountArgs";
import { BigfixRequestTypeFindManyArgs } from "./BigfixRequestTypeFindManyArgs";
import { BigfixRequestTypeFindUniqueArgs } from "./BigfixRequestTypeFindUniqueArgs";
import { CreateBigfixRequestTypeArgs } from "./CreateBigfixRequestTypeArgs";
import { UpdateBigfixRequestTypeArgs } from "./UpdateBigfixRequestTypeArgs";
import { DeleteBigfixRequestTypeArgs } from "./DeleteBigfixRequestTypeArgs";
import { BigfixRequestFindManyArgs } from "../../bigfixRequest/base/BigfixRequestFindManyArgs";
import { BigfixRequest } from "../../bigfixRequest/base/BigfixRequest";
import { BigfixRequestTypeService } from "../bigfixRequestType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BigfixRequestType)
export class BigfixRequestTypeResolverBase {
  constructor(
    protected readonly service: BigfixRequestTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "read",
    possession: "any",
  })
  async _bigfixRequestTypesMeta(
    @graphql.Args() args: BigfixRequestTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BigfixRequestType])
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "read",
    possession: "any",
  })
  async bigfixRequestTypes(
    @graphql.Args() args: BigfixRequestTypeFindManyArgs
  ): Promise<BigfixRequestType[]> {
    return this.service.bigfixRequestTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BigfixRequestType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "read",
    possession: "own",
  })
  async bigfixRequestType(
    @graphql.Args() args: BigfixRequestTypeFindUniqueArgs
  ): Promise<BigfixRequestType | null> {
    const result = await this.service.bigfixRequestType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BigfixRequestType)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "create",
    possession: "any",
  })
  async createBigfixRequestType(
    @graphql.Args() args: CreateBigfixRequestTypeArgs
  ): Promise<BigfixRequestType> {
    return await this.service.createBigfixRequestType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BigfixRequestType)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "update",
    possession: "any",
  })
  async updateBigfixRequestType(
    @graphql.Args() args: UpdateBigfixRequestTypeArgs
  ): Promise<BigfixRequestType | null> {
    try {
      return await this.service.updateBigfixRequestType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BigfixRequestType)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "delete",
    possession: "any",
  })
  async deleteBigfixRequestType(
    @graphql.Args() args: DeleteBigfixRequestTypeArgs
  ): Promise<BigfixRequestType | null> {
    try {
      return await this.service.deleteBigfixRequestType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BigfixRequest], { name: "bigfixRequest" })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "any",
  })
  async findBigfixRequest(
    @graphql.Parent() parent: BigfixRequestType,
    @graphql.Args() args: BigfixRequestFindManyArgs
  ): Promise<BigfixRequest[]> {
    const results = await this.service.findBigfixRequest(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
