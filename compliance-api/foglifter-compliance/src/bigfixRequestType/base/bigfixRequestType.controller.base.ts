/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BigfixRequestTypeService } from "../bigfixRequestType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BigfixRequestTypeCreateInput } from "./BigfixRequestTypeCreateInput";
import { BigfixRequestType } from "./BigfixRequestType";
import { BigfixRequestTypeFindManyArgs } from "./BigfixRequestTypeFindManyArgs";
import { BigfixRequestTypeWhereUniqueInput } from "./BigfixRequestTypeWhereUniqueInput";
import { BigfixRequestTypeUpdateInput } from "./BigfixRequestTypeUpdateInput";
import { BigfixRequestFindManyArgs } from "../../bigfixRequest/base/BigfixRequestFindManyArgs";
import { BigfixRequest } from "../../bigfixRequest/base/BigfixRequest";
import { BigfixRequestWhereUniqueInput } from "../../bigfixRequest/base/BigfixRequestWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BigfixRequestTypeControllerBase {
  constructor(
    protected readonly service: BigfixRequestTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BigfixRequestType })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBigfixRequestType(
    @common.Body() data: BigfixRequestTypeCreateInput
  ): Promise<BigfixRequestType> {
    return await this.service.createBigfixRequestType({
      data: data,
      select: {
        id: true,
        requestType: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [BigfixRequestType] })
  @ApiNestedQuery(BigfixRequestTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bigfixRequestTypes(
    @common.Req() request: Request
  ): Promise<BigfixRequestType[]> {
    const args = plainToClass(BigfixRequestTypeFindManyArgs, request.query);
    return this.service.bigfixRequestTypes({
      ...args,
      select: {
        id: true,
        requestType: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BigfixRequestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bigfixRequestType(
    @common.Param() params: BigfixRequestTypeWhereUniqueInput
  ): Promise<BigfixRequestType | null> {
    const result = await this.service.bigfixRequestType({
      where: params,
      select: {
        id: true,
        requestType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BigfixRequestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBigfixRequestType(
    @common.Param() params: BigfixRequestTypeWhereUniqueInput,
    @common.Body() data: BigfixRequestTypeUpdateInput
  ): Promise<BigfixRequestType | null> {
    try {
      return await this.service.updateBigfixRequestType({
        where: params,
        data: data,
        select: {
          id: true,
          requestType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BigfixRequestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBigfixRequestType(
    @common.Param() params: BigfixRequestTypeWhereUniqueInput
  ): Promise<BigfixRequestType | null> {
    try {
      return await this.service.deleteBigfixRequestType({
        where: params,
        select: {
          id: true,
          requestType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bigfixRequest")
  @ApiNestedQuery(BigfixRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "any",
  })
  async findBigfixRequest(
    @common.Req() request: Request,
    @common.Param() params: BigfixRequestTypeWhereUniqueInput
  ): Promise<BigfixRequest[]> {
    const query = plainToClass(BigfixRequestFindManyArgs, request.query);
    const results = await this.service.findBigfixRequest(params.id, {
      ...query,
      select: {
        actionScriptId: true,

        asset: {
          select: {
            id: true,
          },
        },

        bigfixEnvironment: true,

        bigfixRequestType: {
          select: {
            id: true,
          },
        },

        computerId: true,
        computerStatus: true,
        created: true,
        httpResponse: true,
        httpResponseMessage: true,
        id: true,
        request: true,
        requestComputerSettings: true,
        requestStatus: true,
        response: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bigfixRequest")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "update",
    possession: "any",
  })
  async connectBigfixRequest(
    @common.Param() params: BigfixRequestTypeWhereUniqueInput,
    @common.Body() body: BigfixRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bigfixRequest: {
        connect: body,
      },
    };
    await this.service.updateBigfixRequestType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bigfixRequest")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "update",
    possession: "any",
  })
  async updateBigfixRequest(
    @common.Param() params: BigfixRequestTypeWhereUniqueInput,
    @common.Body() body: BigfixRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bigfixRequest: {
        set: body,
      },
    };
    await this.service.updateBigfixRequestType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bigfixRequest")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "update",
    possession: "any",
  })
  async disconnectBigfixRequest(
    @common.Param() params: BigfixRequestTypeWhereUniqueInput,
    @common.Body() body: BigfixRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bigfixRequest: {
        disconnect: body,
      },
    };
    await this.service.updateBigfixRequestType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
