/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BigfixRequestType as PrismaBigfixRequestType,
  BigfixRequest as PrismaBigfixRequest,
} from "@prisma/client";

export class BigfixRequestTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BigfixRequestTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bigfixRequestType.count(args);
  }

  async bigfixRequestTypes(
    args: Prisma.BigfixRequestTypeFindManyArgs
  ): Promise<PrismaBigfixRequestType[]> {
    return this.prisma.bigfixRequestType.findMany(args);
  }
  async bigfixRequestType(
    args: Prisma.BigfixRequestTypeFindUniqueArgs
  ): Promise<PrismaBigfixRequestType | null> {
    return this.prisma.bigfixRequestType.findUnique(args);
  }
  async createBigfixRequestType(
    args: Prisma.BigfixRequestTypeCreateArgs
  ): Promise<PrismaBigfixRequestType> {
    return this.prisma.bigfixRequestType.create(args);
  }
  async updateBigfixRequestType(
    args: Prisma.BigfixRequestTypeUpdateArgs
  ): Promise<PrismaBigfixRequestType> {
    return this.prisma.bigfixRequestType.update(args);
  }
  async deleteBigfixRequestType(
    args: Prisma.BigfixRequestTypeDeleteArgs
  ): Promise<PrismaBigfixRequestType> {
    return this.prisma.bigfixRequestType.delete(args);
  }

  async findBigfixRequest(
    parentId: number,
    args: Prisma.BigfixRequestFindManyArgs
  ): Promise<PrismaBigfixRequest[]> {
    return this.prisma.bigfixRequestType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bigfixRequest(args);
  }
}
