/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationSupportDetail as PrismaApplicationSupportDetail,
  Application as PrismaApplication,
} from "@prisma/client";

export class ApplicationSupportDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationSupportDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicationSupportDetail.count(args);
  }

  async applicationSupportDetails(
    args: Prisma.ApplicationSupportDetailFindManyArgs
  ): Promise<PrismaApplicationSupportDetail[]> {
    return this.prisma.applicationSupportDetail.findMany(args);
  }
  async applicationSupportDetail(
    args: Prisma.ApplicationSupportDetailFindUniqueArgs
  ): Promise<PrismaApplicationSupportDetail | null> {
    return this.prisma.applicationSupportDetail.findUnique(args);
  }
  async createApplicationSupportDetail(
    args: Prisma.ApplicationSupportDetailCreateArgs
  ): Promise<PrismaApplicationSupportDetail> {
    return this.prisma.applicationSupportDetail.create(args);
  }
  async updateApplicationSupportDetail(
    args: Prisma.ApplicationSupportDetailUpdateArgs
  ): Promise<PrismaApplicationSupportDetail> {
    return this.prisma.applicationSupportDetail.update(args);
  }
  async deleteApplicationSupportDetail(
    args: Prisma.ApplicationSupportDetailDeleteArgs
  ): Promise<PrismaApplicationSupportDetail> {
    return this.prisma.applicationSupportDetail.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.applicationSupportDetail
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
