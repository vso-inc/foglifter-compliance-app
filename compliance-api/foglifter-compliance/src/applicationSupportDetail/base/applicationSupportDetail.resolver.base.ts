/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApplicationSupportDetail } from "./ApplicationSupportDetail";
import { ApplicationSupportDetailCountArgs } from "./ApplicationSupportDetailCountArgs";
import { ApplicationSupportDetailFindManyArgs } from "./ApplicationSupportDetailFindManyArgs";
import { ApplicationSupportDetailFindUniqueArgs } from "./ApplicationSupportDetailFindUniqueArgs";
import { CreateApplicationSupportDetailArgs } from "./CreateApplicationSupportDetailArgs";
import { UpdateApplicationSupportDetailArgs } from "./UpdateApplicationSupportDetailArgs";
import { DeleteApplicationSupportDetailArgs } from "./DeleteApplicationSupportDetailArgs";
import { Application } from "../../application/base/Application";
import { ApplicationSupportDetailService } from "../applicationSupportDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationSupportDetail)
export class ApplicationSupportDetailResolverBase {
  constructor(
    protected readonly service: ApplicationSupportDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationSupportDetail",
    action: "read",
    possession: "any",
  })
  async _applicationSupportDetailsMeta(
    @graphql.Args() args: ApplicationSupportDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationSupportDetail])
  @nestAccessControl.UseRoles({
    resource: "ApplicationSupportDetail",
    action: "read",
    possession: "any",
  })
  async applicationSupportDetails(
    @graphql.Args() args: ApplicationSupportDetailFindManyArgs
  ): Promise<ApplicationSupportDetail[]> {
    return this.service.applicationSupportDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationSupportDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationSupportDetail",
    action: "read",
    possession: "own",
  })
  async applicationSupportDetail(
    @graphql.Args() args: ApplicationSupportDetailFindUniqueArgs
  ): Promise<ApplicationSupportDetail | null> {
    const result = await this.service.applicationSupportDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationSupportDetail)
  @nestAccessControl.UseRoles({
    resource: "ApplicationSupportDetail",
    action: "create",
    possession: "any",
  })
  async createApplicationSupportDetail(
    @graphql.Args() args: CreateApplicationSupportDetailArgs
  ): Promise<ApplicationSupportDetail> {
    return await this.service.createApplicationSupportDetail({
      ...args,
      data: {
        ...args.data,

        application: args.data.application
          ? {
              connect: args.data.application,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationSupportDetail)
  @nestAccessControl.UseRoles({
    resource: "ApplicationSupportDetail",
    action: "update",
    possession: "any",
  })
  async updateApplicationSupportDetail(
    @graphql.Args() args: UpdateApplicationSupportDetailArgs
  ): Promise<ApplicationSupportDetail | null> {
    try {
      return await this.service.updateApplicationSupportDetail({
        ...args,
        data: {
          ...args.data,

          application: args.data.application
            ? {
                connect: args.data.application,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationSupportDetail)
  @nestAccessControl.UseRoles({
    resource: "ApplicationSupportDetail",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationSupportDetail(
    @graphql.Args() args: DeleteApplicationSupportDetailArgs
  ): Promise<ApplicationSupportDetail | null> {
    try {
      return await this.service.deleteApplicationSupportDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplication(
    @graphql.Parent() parent: ApplicationSupportDetail
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
