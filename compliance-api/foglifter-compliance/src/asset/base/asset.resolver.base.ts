/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Asset } from "./Asset";
import { AssetCountArgs } from "./AssetCountArgs";
import { AssetFindManyArgs } from "./AssetFindManyArgs";
import { AssetFindUniqueArgs } from "./AssetFindUniqueArgs";
import { CreateAssetArgs } from "./CreateAssetArgs";
import { UpdateAssetArgs } from "./UpdateAssetArgs";
import { DeleteAssetArgs } from "./DeleteAssetArgs";
import { ApplicationDeploymentFindManyArgs } from "../../applicationDeployment/base/ApplicationDeploymentFindManyArgs";
import { ApplicationDeployment } from "../../applicationDeployment/base/ApplicationDeployment";
import { AssetConfigurationDetailFindManyArgs } from "../../assetConfigurationDetail/base/AssetConfigurationDetailFindManyArgs";
import { AssetConfigurationDetail } from "../../assetConfigurationDetail/base/AssetConfigurationDetail";
import { AssetLocationDetailFindManyArgs } from "../../assetLocationDetail/base/AssetLocationDetailFindManyArgs";
import { AssetLocationDetail } from "../../assetLocationDetail/base/AssetLocationDetail";
import { AssetNetworkDetailFindManyArgs } from "../../assetNetworkDetail/base/AssetNetworkDetailFindManyArgs";
import { AssetNetworkDetail } from "../../assetNetworkDetail/base/AssetNetworkDetail";
import { AssetSupportDetailFindManyArgs } from "../../assetSupportDetail/base/AssetSupportDetailFindManyArgs";
import { AssetSupportDetail } from "../../assetSupportDetail/base/AssetSupportDetail";
import { AttestationHostFindManyArgs } from "../../attestationHost/base/AttestationHostFindManyArgs";
import { AttestationHost } from "../../attestationHost/base/AttestationHost";
import { BigfixRequestFindManyArgs } from "../../bigfixRequest/base/BigfixRequestFindManyArgs";
import { BigfixRequest } from "../../bigfixRequest/base/BigfixRequest";
import { DatasourceDeviceFindManyArgs } from "../../datasourceDevice/base/DatasourceDeviceFindManyArgs";
import { DatasourceDevice } from "../../datasourceDevice/base/DatasourceDevice";
import { ExceptionFindManyArgs } from "../../exception/base/ExceptionFindManyArgs";
import { Exception } from "../../exception/base/Exception";
import { IpAddressFindManyArgs } from "../../ipAddress/base/IpAddressFindManyArgs";
import { IpAddress } from "../../ipAddress/base/IpAddress";
import { MaintenanceWindowFindManyArgs } from "../../maintenanceWindow/base/MaintenanceWindowFindManyArgs";
import { MaintenanceWindow } from "../../maintenanceWindow/base/MaintenanceWindow";
import { OperationsCalendarFindManyArgs } from "../../operationsCalendar/base/OperationsCalendarFindManyArgs";
import { OperationsCalendar } from "../../operationsCalendar/base/OperationsCalendar";
import { RebootWindowFindManyArgs } from "../../rebootWindow/base/RebootWindowFindManyArgs";
import { RebootWindow } from "../../rebootWindow/base/RebootWindow";
import { SubMgmtChangeLogFindManyArgs } from "../../subMgmtChangeLog/base/SubMgmtChangeLogFindManyArgs";
import { SubMgmtChangeLog } from "../../subMgmtChangeLog/base/SubMgmtChangeLog";
import { TssChangeLogFindManyArgs } from "../../tssChangeLog/base/TssChangeLogFindManyArgs";
import { TssChangeLog } from "../../tssChangeLog/base/TssChangeLog";
import { EndpointManagementSolution } from "../../endpointManagementSolution/base/EndpointManagementSolution";
import { AssetService } from "../asset.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Asset)
export class AssetResolverBase {
  constructor(
    protected readonly service: AssetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async _assetsMeta(
    @graphql.Args() args: AssetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Asset])
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async assets(@graphql.Args() args: AssetFindManyArgs): Promise<Asset[]> {
    return this.service.assets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Asset, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "own",
  })
  async asset(
    @graphql.Args() args: AssetFindUniqueArgs
  ): Promise<Asset | null> {
    const result = await this.service.asset(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Asset)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "create",
    possession: "any",
  })
  async createAsset(@graphql.Args() args: CreateAssetArgs): Promise<Asset> {
    return await this.service.createAsset({
      ...args,
      data: {
        ...args.data,

        endpointManagementSolution: args.data.endpointManagementSolution
          ? {
              connect: args.data.endpointManagementSolution,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Asset)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "update",
    possession: "any",
  })
  async updateAsset(
    @graphql.Args() args: UpdateAssetArgs
  ): Promise<Asset | null> {
    try {
      return await this.service.updateAsset({
        ...args,
        data: {
          ...args.data,

          endpointManagementSolution: args.data.endpointManagementSolution
            ? {
                connect: args.data.endpointManagementSolution,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Asset)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "delete",
    possession: "any",
  })
  async deleteAsset(
    @graphql.Args() args: DeleteAssetArgs
  ): Promise<Asset | null> {
    try {
      return await this.service.deleteAsset(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApplicationDeployment], {
    name: "applicationDeployment",
  })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "read",
    possession: "any",
  })
  async findApplicationDeployment(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: ApplicationDeploymentFindManyArgs
  ): Promise<ApplicationDeployment[]> {
    const results = await this.service.findApplicationDeployment(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AssetConfigurationDetail], {
    name: "assetConfigurationDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "AssetConfigurationDetail",
    action: "read",
    possession: "any",
  })
  async findAssetConfigurationDetails(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: AssetConfigurationDetailFindManyArgs
  ): Promise<AssetConfigurationDetail[]> {
    const results = await this.service.findAssetConfigurationDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AssetLocationDetail], {
    name: "assetLocationDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "AssetLocationDetail",
    action: "read",
    possession: "any",
  })
  async findAssetLocationDetails(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: AssetLocationDetailFindManyArgs
  ): Promise<AssetLocationDetail[]> {
    const results = await this.service.findAssetLocationDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AssetNetworkDetail], {
    name: "assetNetworkDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "read",
    possession: "any",
  })
  async findAssetNetworkDetails(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: AssetNetworkDetailFindManyArgs
  ): Promise<AssetNetworkDetail[]> {
    const results = await this.service.findAssetNetworkDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AssetSupportDetail], {
    name: "assetSupportDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "AssetSupportDetail",
    action: "read",
    possession: "any",
  })
  async findAssetSupportDetails(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: AssetSupportDetailFindManyArgs
  ): Promise<AssetSupportDetail[]> {
    const results = await this.service.findAssetSupportDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AttestationHost], { name: "attestationHost" })
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "read",
    possession: "any",
  })
  async findAttestationHost(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: AttestationHostFindManyArgs
  ): Promise<AttestationHost[]> {
    const results = await this.service.findAttestationHost(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BigfixRequest], { name: "bigfixRequest" })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "any",
  })
  async findBigfixRequest(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: BigfixRequestFindManyArgs
  ): Promise<BigfixRequest[]> {
    const results = await this.service.findBigfixRequest(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DatasourceDevice], { name: "datasourceDevices" })
  @nestAccessControl.UseRoles({
    resource: "DatasourceDevice",
    action: "read",
    possession: "any",
  })
  async findDatasourceDevices(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: DatasourceDeviceFindManyArgs
  ): Promise<DatasourceDevice[]> {
    const results = await this.service.findDatasourceDevices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Exception], { name: "exception" })
  @nestAccessControl.UseRoles({
    resource: "Exception",
    action: "read",
    possession: "any",
  })
  async findException(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: ExceptionFindManyArgs
  ): Promise<Exception[]> {
    const results = await this.service.findException(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [IpAddress], { name: "ipAddress" })
  @nestAccessControl.UseRoles({
    resource: "IpAddress",
    action: "read",
    possession: "any",
  })
  async findIpAddress(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: IpAddressFindManyArgs
  ): Promise<IpAddress[]> {
    const results = await this.service.findIpAddress(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceWindow], {
    name: "maintenanceWindow",
  })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceWindow",
    action: "read",
    possession: "any",
  })
  async findMaintenanceWindow(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: MaintenanceWindowFindManyArgs
  ): Promise<MaintenanceWindow[]> {
    const results = await this.service.findMaintenanceWindow(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OperationsCalendar], {
    name: "operationsCalendar",
  })
  @nestAccessControl.UseRoles({
    resource: "OperationsCalendar",
    action: "read",
    possession: "any",
  })
  async findOperationsCalendar(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: OperationsCalendarFindManyArgs
  ): Promise<OperationsCalendar[]> {
    const results = await this.service.findOperationsCalendar(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RebootWindow], { name: "rebootWindow" })
  @nestAccessControl.UseRoles({
    resource: "RebootWindow",
    action: "read",
    possession: "any",
  })
  async findRebootWindow(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: RebootWindowFindManyArgs
  ): Promise<RebootWindow[]> {
    const results = await this.service.findRebootWindow(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SubMgmtChangeLog], { name: "subMgmtChangeLog" })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "any",
  })
  async findSubMgmtChangeLog(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: SubMgmtChangeLogFindManyArgs
  ): Promise<SubMgmtChangeLog[]> {
    const results = await this.service.findSubMgmtChangeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TssChangeLog], { name: "tssChangeLog" })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "read",
    possession: "any",
  })
  async findTssChangeLog(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: TssChangeLogFindManyArgs
  ): Promise<TssChangeLog[]> {
    const results = await this.service.findTssChangeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EndpointManagementSolution, {
    nullable: true,
    name: "endpointManagementSolution",
  })
  @nestAccessControl.UseRoles({
    resource: "EndpointManagementSolution",
    action: "read",
    possession: "any",
  })
  async getEndpointManagementSolution(
    @graphql.Parent() parent: Asset
  ): Promise<EndpointManagementSolution | null> {
    const result = await this.service.getEndpointManagementSolution(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
