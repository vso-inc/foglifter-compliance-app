/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Asset as PrismaAsset,
  ApplicationDeployment as PrismaApplicationDeployment,
  AssetConfigurationDetail as PrismaAssetConfigurationDetail,
  AssetLocationDetail as PrismaAssetLocationDetail,
  AssetNetworkDetail as PrismaAssetNetworkDetail,
  AssetSupportDetail as PrismaAssetSupportDetail,
  AttestationHost as PrismaAttestationHost,
  BigfixRequest as PrismaBigfixRequest,
  DatasourceDevice as PrismaDatasourceDevice,
  Exception as PrismaException,
  IpAddress as PrismaIpAddress,
  MaintenanceWindow as PrismaMaintenanceWindow,
  OperationsCalendar as PrismaOperationsCalendar,
  RebootWindow as PrismaRebootWindow,
  SubMgmtChangeLog as PrismaSubMgmtChangeLog,
  TssChangeLog as PrismaTssChangeLog,
  EndpointManagementSolution as PrismaEndpointManagementSolution,
} from "@prisma/client";

export class AssetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AssetCountArgs, "select">): Promise<number> {
    return this.prisma.asset.count(args);
  }

  async assets(args: Prisma.AssetFindManyArgs): Promise<PrismaAsset[]> {
    return this.prisma.asset.findMany(args);
  }
  async asset(args: Prisma.AssetFindUniqueArgs): Promise<PrismaAsset | null> {
    return this.prisma.asset.findUnique(args);
  }
  async createAsset(args: Prisma.AssetCreateArgs): Promise<PrismaAsset> {
    return this.prisma.asset.create(args);
  }
  async updateAsset(args: Prisma.AssetUpdateArgs): Promise<PrismaAsset> {
    return this.prisma.asset.update(args);
  }
  async deleteAsset(args: Prisma.AssetDeleteArgs): Promise<PrismaAsset> {
    return this.prisma.asset.delete(args);
  }

  async findApplicationDeployment(
    parentId: bigint,
    args: Prisma.ApplicationDeploymentFindManyArgs
  ): Promise<PrismaApplicationDeployment[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applicationDeployment(args);
  }

  async findAssetConfigurationDetails(
    parentId: bigint,
    args: Prisma.AssetConfigurationDetailFindManyArgs
  ): Promise<PrismaAssetConfigurationDetail[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assetConfigurationDetails(args);
  }

  async findAssetLocationDetails(
    parentId: bigint,
    args: Prisma.AssetLocationDetailFindManyArgs
  ): Promise<PrismaAssetLocationDetail[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assetLocationDetails(args);
  }

  async findAssetNetworkDetails(
    parentId: bigint,
    args: Prisma.AssetNetworkDetailFindManyArgs
  ): Promise<PrismaAssetNetworkDetail[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assetNetworkDetails(args);
  }

  async findAssetSupportDetails(
    parentId: bigint,
    args: Prisma.AssetSupportDetailFindManyArgs
  ): Promise<PrismaAssetSupportDetail[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assetSupportDetails(args);
  }

  async findAttestationHost(
    parentId: bigint,
    args: Prisma.AttestationHostFindManyArgs
  ): Promise<PrismaAttestationHost[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attestationHost(args);
  }

  async findBigfixRequest(
    parentId: bigint,
    args: Prisma.BigfixRequestFindManyArgs
  ): Promise<PrismaBigfixRequest[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bigfixRequest(args);
  }

  async findDatasourceDevices(
    parentId: bigint,
    args: Prisma.DatasourceDeviceFindManyArgs
  ): Promise<PrismaDatasourceDevice[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .datasourceDevices(args);
  }

  async findException(
    parentId: bigint,
    args: Prisma.ExceptionFindManyArgs
  ): Promise<PrismaException[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .exception(args);
  }

  async findIpAddress(
    parentId: bigint,
    args: Prisma.IpAddressFindManyArgs
  ): Promise<PrismaIpAddress[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ipAddress(args);
  }

  async findMaintenanceWindow(
    parentId: bigint,
    args: Prisma.MaintenanceWindowFindManyArgs
  ): Promise<PrismaMaintenanceWindow[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .maintenanceWindow(args);
  }

  async findOperationsCalendar(
    parentId: bigint,
    args: Prisma.OperationsCalendarFindManyArgs
  ): Promise<PrismaOperationsCalendar[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .operationsCalendar(args);
  }

  async findRebootWindow(
    parentId: bigint,
    args: Prisma.RebootWindowFindManyArgs
  ): Promise<PrismaRebootWindow[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rebootWindow(args);
  }

  async findSubMgmtChangeLog(
    parentId: bigint,
    args: Prisma.SubMgmtChangeLogFindManyArgs
  ): Promise<PrismaSubMgmtChangeLog[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subMgmtChangeLog(args);
  }

  async findTssChangeLog(
    parentId: bigint,
    args: Prisma.TssChangeLogFindManyArgs
  ): Promise<PrismaTssChangeLog[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tssChangeLog(args);
  }

  async getEndpointManagementSolution(
    parentId: bigint
  ): Promise<PrismaEndpointManagementSolution | null> {
    return this.prisma.asset
      .findUnique({
        where: { id: parentId },
      })
      .endpointManagementSolution();
  }
}
