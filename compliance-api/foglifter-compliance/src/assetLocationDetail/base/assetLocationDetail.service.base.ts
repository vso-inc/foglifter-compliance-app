/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AssetLocationDetail as PrismaAssetLocationDetail,
  Asset as PrismaAsset,
} from "@prisma/client";

export class AssetLocationDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssetLocationDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assetLocationDetail.count(args);
  }

  async assetLocationDetails(
    args: Prisma.AssetLocationDetailFindManyArgs
  ): Promise<PrismaAssetLocationDetail[]> {
    return this.prisma.assetLocationDetail.findMany(args);
  }
  async assetLocationDetail(
    args: Prisma.AssetLocationDetailFindUniqueArgs
  ): Promise<PrismaAssetLocationDetail | null> {
    return this.prisma.assetLocationDetail.findUnique(args);
  }
  async createAssetLocationDetail(
    args: Prisma.AssetLocationDetailCreateArgs
  ): Promise<PrismaAssetLocationDetail> {
    return this.prisma.assetLocationDetail.create(args);
  }
  async updateAssetLocationDetail(
    args: Prisma.AssetLocationDetailUpdateArgs
  ): Promise<PrismaAssetLocationDetail> {
    return this.prisma.assetLocationDetail.update(args);
  }
  async deleteAssetLocationDetail(
    args: Prisma.AssetLocationDetailDeleteArgs
  ): Promise<PrismaAssetLocationDetail> {
    return this.prisma.assetLocationDetail.delete(args);
  }

  async getAsset(parentId: bigint): Promise<PrismaAsset | null> {
    return this.prisma.assetLocationDetail
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
