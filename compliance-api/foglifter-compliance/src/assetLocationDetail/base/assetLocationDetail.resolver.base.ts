/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AssetLocationDetail } from "./AssetLocationDetail";
import { AssetLocationDetailCountArgs } from "./AssetLocationDetailCountArgs";
import { AssetLocationDetailFindManyArgs } from "./AssetLocationDetailFindManyArgs";
import { AssetLocationDetailFindUniqueArgs } from "./AssetLocationDetailFindUniqueArgs";
import { CreateAssetLocationDetailArgs } from "./CreateAssetLocationDetailArgs";
import { UpdateAssetLocationDetailArgs } from "./UpdateAssetLocationDetailArgs";
import { DeleteAssetLocationDetailArgs } from "./DeleteAssetLocationDetailArgs";
import { Asset } from "../../asset/base/Asset";
import { AssetLocationDetailService } from "../assetLocationDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AssetLocationDetail)
export class AssetLocationDetailResolverBase {
  constructor(
    protected readonly service: AssetLocationDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AssetLocationDetail",
    action: "read",
    possession: "any",
  })
  async _assetLocationDetailsMeta(
    @graphql.Args() args: AssetLocationDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AssetLocationDetail])
  @nestAccessControl.UseRoles({
    resource: "AssetLocationDetail",
    action: "read",
    possession: "any",
  })
  async assetLocationDetails(
    @graphql.Args() args: AssetLocationDetailFindManyArgs
  ): Promise<AssetLocationDetail[]> {
    return this.service.assetLocationDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AssetLocationDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AssetLocationDetail",
    action: "read",
    possession: "own",
  })
  async assetLocationDetail(
    @graphql.Args() args: AssetLocationDetailFindUniqueArgs
  ): Promise<AssetLocationDetail | null> {
    const result = await this.service.assetLocationDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetLocationDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetLocationDetail",
    action: "create",
    possession: "any",
  })
  async createAssetLocationDetail(
    @graphql.Args() args: CreateAssetLocationDetailArgs
  ): Promise<AssetLocationDetail> {
    return await this.service.createAssetLocationDetail({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetLocationDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetLocationDetail",
    action: "update",
    possession: "any",
  })
  async updateAssetLocationDetail(
    @graphql.Args() args: UpdateAssetLocationDetailArgs
  ): Promise<AssetLocationDetail | null> {
    try {
      return await this.service.updateAssetLocationDetail({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetLocationDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetLocationDetail",
    action: "delete",
    possession: "any",
  })
  async deleteAssetLocationDetail(
    @graphql.Args() args: DeleteAssetLocationDetailArgs
  ): Promise<AssetLocationDetail | null> {
    try {
      return await this.service.deleteAssetLocationDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: AssetLocationDetail
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
