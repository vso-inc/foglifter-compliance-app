/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BigfixRequest as PrismaBigfixRequest,
  SubMgmtChangeLog as PrismaSubMgmtChangeLog,
  TssChangeLog as PrismaTssChangeLog,
  Asset as PrismaAsset,
  BigfixRequestType as PrismaBigfixRequestType,
} from "@prisma/client";

export class BigfixRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BigfixRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bigfixRequest.count(args);
  }

  async bigfixRequests(
    args: Prisma.BigfixRequestFindManyArgs
  ): Promise<PrismaBigfixRequest[]> {
    return this.prisma.bigfixRequest.findMany(args);
  }
  async bigfixRequest(
    args: Prisma.BigfixRequestFindUniqueArgs
  ): Promise<PrismaBigfixRequest | null> {
    return this.prisma.bigfixRequest.findUnique(args);
  }
  async createBigfixRequest(
    args: Prisma.BigfixRequestCreateArgs
  ): Promise<PrismaBigfixRequest> {
    return this.prisma.bigfixRequest.create(args);
  }
  async updateBigfixRequest(
    args: Prisma.BigfixRequestUpdateArgs
  ): Promise<PrismaBigfixRequest> {
    return this.prisma.bigfixRequest.update(args);
  }
  async deleteBigfixRequest(
    args: Prisma.BigfixRequestDeleteArgs
  ): Promise<PrismaBigfixRequest> {
    return this.prisma.bigfixRequest.delete(args);
  }

  async findSubMgmtChangeLog(
    parentId: bigint,
    args: Prisma.SubMgmtChangeLogFindManyArgs
  ): Promise<PrismaSubMgmtChangeLog[]> {
    return this.prisma.bigfixRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subMgmtChangeLog(args);
  }

  async findTssChangeLog(
    parentId: bigint,
    args: Prisma.TssChangeLogFindManyArgs
  ): Promise<PrismaTssChangeLog[]> {
    return this.prisma.bigfixRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tssChangeLog(args);
  }

  async getAsset(parentId: bigint): Promise<PrismaAsset | null> {
    return this.prisma.bigfixRequest
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }

  async getBigfixRequestType(
    parentId: bigint
  ): Promise<PrismaBigfixRequestType | null> {
    return this.prisma.bigfixRequest
      .findUnique({
        where: { id: parentId },
      })
      .bigfixRequestType();
  }
}
