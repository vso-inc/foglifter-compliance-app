/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BigfixRequest } from "./BigfixRequest";
import { BigfixRequestCountArgs } from "./BigfixRequestCountArgs";
import { BigfixRequestFindManyArgs } from "./BigfixRequestFindManyArgs";
import { BigfixRequestFindUniqueArgs } from "./BigfixRequestFindUniqueArgs";
import { CreateBigfixRequestArgs } from "./CreateBigfixRequestArgs";
import { UpdateBigfixRequestArgs } from "./UpdateBigfixRequestArgs";
import { DeleteBigfixRequestArgs } from "./DeleteBigfixRequestArgs";
import { SubMgmtChangeLogFindManyArgs } from "../../subMgmtChangeLog/base/SubMgmtChangeLogFindManyArgs";
import { SubMgmtChangeLog } from "../../subMgmtChangeLog/base/SubMgmtChangeLog";
import { TssChangeLogFindManyArgs } from "../../tssChangeLog/base/TssChangeLogFindManyArgs";
import { TssChangeLog } from "../../tssChangeLog/base/TssChangeLog";
import { Asset } from "../../asset/base/Asset";
import { BigfixRequestType } from "../../bigfixRequestType/base/BigfixRequestType";
import { BigfixRequestService } from "../bigfixRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BigfixRequest)
export class BigfixRequestResolverBase {
  constructor(
    protected readonly service: BigfixRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "any",
  })
  async _bigfixRequestsMeta(
    @graphql.Args() args: BigfixRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BigfixRequest])
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "any",
  })
  async bigfixRequests(
    @graphql.Args() args: BigfixRequestFindManyArgs
  ): Promise<BigfixRequest[]> {
    return this.service.bigfixRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BigfixRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "own",
  })
  async bigfixRequest(
    @graphql.Args() args: BigfixRequestFindUniqueArgs
  ): Promise<BigfixRequest | null> {
    const result = await this.service.bigfixRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BigfixRequest)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "create",
    possession: "any",
  })
  async createBigfixRequest(
    @graphql.Args() args: CreateBigfixRequestArgs
  ): Promise<BigfixRequest> {
    return await this.service.createBigfixRequest({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,

        bigfixRequestType: args.data.bigfixRequestType
          ? {
              connect: args.data.bigfixRequestType,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BigfixRequest)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "update",
    possession: "any",
  })
  async updateBigfixRequest(
    @graphql.Args() args: UpdateBigfixRequestArgs
  ): Promise<BigfixRequest | null> {
    try {
      return await this.service.updateBigfixRequest({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,

          bigfixRequestType: args.data.bigfixRequestType
            ? {
                connect: args.data.bigfixRequestType,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BigfixRequest)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "delete",
    possession: "any",
  })
  async deleteBigfixRequest(
    @graphql.Args() args: DeleteBigfixRequestArgs
  ): Promise<BigfixRequest | null> {
    try {
      return await this.service.deleteBigfixRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SubMgmtChangeLog], { name: "subMgmtChangeLog" })
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "any",
  })
  async findSubMgmtChangeLog(
    @graphql.Parent() parent: BigfixRequest,
    @graphql.Args() args: SubMgmtChangeLogFindManyArgs
  ): Promise<SubMgmtChangeLog[]> {
    const results = await this.service.findSubMgmtChangeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TssChangeLog], { name: "tssChangeLog" })
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "read",
    possession: "any",
  })
  async findTssChangeLog(
    @graphql.Parent() parent: BigfixRequest,
    @graphql.Args() args: TssChangeLogFindManyArgs
  ): Promise<TssChangeLog[]> {
    const results = await this.service.findTssChangeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: BigfixRequest
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BigfixRequestType, {
    nullable: true,
    name: "bigfixRequestType",
  })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequestType",
    action: "read",
    possession: "any",
  })
  async getBigfixRequestType(
    @graphql.Parent() parent: BigfixRequest
  ): Promise<BigfixRequestType | null> {
    const result = await this.service.getBigfixRequestType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
