/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BigfixRequestService } from "../bigfixRequest.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BigfixRequestCreateInput } from "./BigfixRequestCreateInput";
import { BigfixRequest } from "./BigfixRequest";
import { BigfixRequestFindManyArgs } from "./BigfixRequestFindManyArgs";
import { BigfixRequestWhereUniqueInput } from "./BigfixRequestWhereUniqueInput";
import { BigfixRequestUpdateInput } from "./BigfixRequestUpdateInput";
import { SubMgmtChangeLogFindManyArgs } from "../../subMgmtChangeLog/base/SubMgmtChangeLogFindManyArgs";
import { SubMgmtChangeLog } from "../../subMgmtChangeLog/base/SubMgmtChangeLog";
import { SubMgmtChangeLogWhereUniqueInput } from "../../subMgmtChangeLog/base/SubMgmtChangeLogWhereUniqueInput";
import { TssChangeLogFindManyArgs } from "../../tssChangeLog/base/TssChangeLogFindManyArgs";
import { TssChangeLog } from "../../tssChangeLog/base/TssChangeLog";
import { TssChangeLogWhereUniqueInput } from "../../tssChangeLog/base/TssChangeLogWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BigfixRequestControllerBase {
  constructor(
    protected readonly service: BigfixRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BigfixRequest })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBigfixRequest(
    @common.Body() data: BigfixRequestCreateInput
  ): Promise<BigfixRequest> {
    return await this.service.createBigfixRequest({
      data: {
        ...data,

        asset: data.asset
          ? {
              connect: data.asset,
            }
          : undefined,

        bigfixRequestType: data.bigfixRequestType
          ? {
              connect: data.bigfixRequestType,
            }
          : undefined,
      },
      select: {
        actionScriptId: true,

        asset: {
          select: {
            id: true,
          },
        },

        bigfixEnvironment: true,

        bigfixRequestType: {
          select: {
            id: true,
          },
        },

        computerId: true,
        computerStatus: true,
        created: true,
        httpResponse: true,
        httpResponseMessage: true,
        id: true,
        request: true,
        requestComputerSettings: true,
        requestStatus: true,
        response: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [BigfixRequest] })
  @ApiNestedQuery(BigfixRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bigfixRequests(
    @common.Req() request: Request
  ): Promise<BigfixRequest[]> {
    const args = plainToClass(BigfixRequestFindManyArgs, request.query);
    return this.service.bigfixRequests({
      ...args,
      select: {
        actionScriptId: true,

        asset: {
          select: {
            id: true,
          },
        },

        bigfixEnvironment: true,

        bigfixRequestType: {
          select: {
            id: true,
          },
        },

        computerId: true,
        computerStatus: true,
        created: true,
        httpResponse: true,
        httpResponseMessage: true,
        id: true,
        request: true,
        requestComputerSettings: true,
        requestStatus: true,
        response: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BigfixRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bigfixRequest(
    @common.Param() params: BigfixRequestWhereUniqueInput
  ): Promise<BigfixRequest | null> {
    const result = await this.service.bigfixRequest({
      where: params,
      select: {
        actionScriptId: true,

        asset: {
          select: {
            id: true,
          },
        },

        bigfixEnvironment: true,

        bigfixRequestType: {
          select: {
            id: true,
          },
        },

        computerId: true,
        computerStatus: true,
        created: true,
        httpResponse: true,
        httpResponseMessage: true,
        id: true,
        request: true,
        requestComputerSettings: true,
        requestStatus: true,
        response: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BigfixRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBigfixRequest(
    @common.Param() params: BigfixRequestWhereUniqueInput,
    @common.Body() data: BigfixRequestUpdateInput
  ): Promise<BigfixRequest | null> {
    try {
      return await this.service.updateBigfixRequest({
        where: params,
        data: {
          ...data,

          asset: data.asset
            ? {
                connect: data.asset,
              }
            : undefined,

          bigfixRequestType: data.bigfixRequestType
            ? {
                connect: data.bigfixRequestType,
              }
            : undefined,
        },
        select: {
          actionScriptId: true,

          asset: {
            select: {
              id: true,
            },
          },

          bigfixEnvironment: true,

          bigfixRequestType: {
            select: {
              id: true,
            },
          },

          computerId: true,
          computerStatus: true,
          created: true,
          httpResponse: true,
          httpResponseMessage: true,
          id: true,
          request: true,
          requestComputerSettings: true,
          requestStatus: true,
          response: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BigfixRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBigfixRequest(
    @common.Param() params: BigfixRequestWhereUniqueInput
  ): Promise<BigfixRequest | null> {
    try {
      return await this.service.deleteBigfixRequest({
        where: params,
        select: {
          actionScriptId: true,

          asset: {
            select: {
              id: true,
            },
          },

          bigfixEnvironment: true,

          bigfixRequestType: {
            select: {
              id: true,
            },
          },

          computerId: true,
          computerStatus: true,
          created: true,
          httpResponse: true,
          httpResponseMessage: true,
          id: true,
          request: true,
          requestComputerSettings: true,
          requestStatus: true,
          response: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subMgmtChangeLog")
  @ApiNestedQuery(SubMgmtChangeLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubMgmtChangeLog",
    action: "read",
    possession: "any",
  })
  async findSubMgmtChangeLog(
    @common.Req() request: Request,
    @common.Param() params: BigfixRequestWhereUniqueInput
  ): Promise<SubMgmtChangeLog[]> {
    const query = plainToClass(SubMgmtChangeLogFindManyArgs, request.query);
    const results = await this.service.findSubMgmtChangeLog(params.id, {
      ...query,
      select: {
        action: true,

        asset: {
          select: {
            id: true,
          },
        },

        bigfixRequest: {
          select: {
            id: true,
          },
        },

        created: true,
        hostname: true,
        id: true,
        patchChannelIncludeList: true,

        subMgmtChangeLogStatus: {
          select: {
            id: true,
          },
        },

        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subMgmtChangeLog")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "update",
    possession: "any",
  })
  async connectSubMgmtChangeLog(
    @common.Param() params: BigfixRequestWhereUniqueInput,
    @common.Body() body: SubMgmtChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtChangeLog: {
        connect: body,
      },
    };
    await this.service.updateBigfixRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subMgmtChangeLog")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "update",
    possession: "any",
  })
  async updateSubMgmtChangeLog(
    @common.Param() params: BigfixRequestWhereUniqueInput,
    @common.Body() body: SubMgmtChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtChangeLog: {
        set: body,
      },
    };
    await this.service.updateBigfixRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subMgmtChangeLog")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "update",
    possession: "any",
  })
  async disconnectSubMgmtChangeLog(
    @common.Param() params: BigfixRequestWhereUniqueInput,
    @common.Body() body: SubMgmtChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subMgmtChangeLog: {
        disconnect: body,
      },
    };
    await this.service.updateBigfixRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/tssChangeLog")
  @ApiNestedQuery(TssChangeLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TssChangeLog",
    action: "read",
    possession: "any",
  })
  async findTssChangeLog(
    @common.Req() request: Request,
    @common.Param() params: BigfixRequestWhereUniqueInput
  ): Promise<TssChangeLog[]> {
    const query = plainToClass(TssChangeLogFindManyArgs, request.query);
    const results = await this.service.findTssChangeLog(params.id, {
      ...query,
      select: {
        action: true,
        applyOn: true,
        applyOnNextScheduledMaintWindow: true,

        asset: {
          select: {
            id: true,
          },
        },

        bigfixRequest: {
          select: {
            id: true,
          },
        },

        created: true,
        id: true,
        remediationWindowHours: true,

        tssChangeLogStatus: {
          select: {
            id: true,
          },
        },

        tssIncludeList: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tssChangeLog")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "update",
    possession: "any",
  })
  async connectTssChangeLog(
    @common.Param() params: BigfixRequestWhereUniqueInput,
    @common.Body() body: TssChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tssChangeLog: {
        connect: body,
      },
    };
    await this.service.updateBigfixRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tssChangeLog")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "update",
    possession: "any",
  })
  async updateTssChangeLog(
    @common.Param() params: BigfixRequestWhereUniqueInput,
    @common.Body() body: TssChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tssChangeLog: {
        set: body,
      },
    };
    await this.service.updateBigfixRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tssChangeLog")
  @nestAccessControl.UseRoles({
    resource: "BigfixRequest",
    action: "update",
    possession: "any",
  })
  async disconnectTssChangeLog(
    @common.Param() params: BigfixRequestWhereUniqueInput,
    @common.Body() body: TssChangeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tssChangeLog: {
        disconnect: body,
      },
    };
    await this.service.updateBigfixRequest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
