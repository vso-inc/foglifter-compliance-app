/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AssetNetworkDetail } from "./AssetNetworkDetail";
import { AssetNetworkDetailCountArgs } from "./AssetNetworkDetailCountArgs";
import { AssetNetworkDetailFindManyArgs } from "./AssetNetworkDetailFindManyArgs";
import { AssetNetworkDetailFindUniqueArgs } from "./AssetNetworkDetailFindUniqueArgs";
import { CreateAssetNetworkDetailArgs } from "./CreateAssetNetworkDetailArgs";
import { UpdateAssetNetworkDetailArgs } from "./UpdateAssetNetworkDetailArgs";
import { DeleteAssetNetworkDetailArgs } from "./DeleteAssetNetworkDetailArgs";
import { IpAddressFindManyArgs } from "../../ipAddress/base/IpAddressFindManyArgs";
import { IpAddress } from "../../ipAddress/base/IpAddress";
import { Asset } from "../../asset/base/Asset";
import { AssetNetworkDetailService } from "../assetNetworkDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AssetNetworkDetail)
export class AssetNetworkDetailResolverBase {
  constructor(
    protected readonly service: AssetNetworkDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "read",
    possession: "any",
  })
  async _assetNetworkDetailsMeta(
    @graphql.Args() args: AssetNetworkDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AssetNetworkDetail])
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "read",
    possession: "any",
  })
  async assetNetworkDetails(
    @graphql.Args() args: AssetNetworkDetailFindManyArgs
  ): Promise<AssetNetworkDetail[]> {
    return this.service.assetNetworkDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AssetNetworkDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "read",
    possession: "own",
  })
  async assetNetworkDetail(
    @graphql.Args() args: AssetNetworkDetailFindUniqueArgs
  ): Promise<AssetNetworkDetail | null> {
    const result = await this.service.assetNetworkDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetNetworkDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "create",
    possession: "any",
  })
  async createAssetNetworkDetail(
    @graphql.Args() args: CreateAssetNetworkDetailArgs
  ): Promise<AssetNetworkDetail> {
    return await this.service.createAssetNetworkDetail({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssetNetworkDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "update",
    possession: "any",
  })
  async updateAssetNetworkDetail(
    @graphql.Args() args: UpdateAssetNetworkDetailArgs
  ): Promise<AssetNetworkDetail | null> {
    try {
      return await this.service.updateAssetNetworkDetail({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetNetworkDetail)
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "delete",
    possession: "any",
  })
  async deleteAssetNetworkDetail(
    @graphql.Args() args: DeleteAssetNetworkDetailArgs
  ): Promise<AssetNetworkDetail | null> {
    try {
      return await this.service.deleteAssetNetworkDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [IpAddress], { name: "ipAddress" })
  @nestAccessControl.UseRoles({
    resource: "IpAddress",
    action: "read",
    possession: "any",
  })
  async findIpAddress(
    @graphql.Parent() parent: AssetNetworkDetail,
    @graphql.Args() args: IpAddressFindManyArgs
  ): Promise<IpAddress[]> {
    const results = await this.service.findIpAddress(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: AssetNetworkDetail
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
