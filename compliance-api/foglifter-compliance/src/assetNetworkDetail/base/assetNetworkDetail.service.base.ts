/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AssetNetworkDetail as PrismaAssetNetworkDetail,
  IpAddress as PrismaIpAddress,
  Asset as PrismaAsset,
} from "@prisma/client";

export class AssetNetworkDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssetNetworkDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assetNetworkDetail.count(args);
  }

  async assetNetworkDetails(
    args: Prisma.AssetNetworkDetailFindManyArgs
  ): Promise<PrismaAssetNetworkDetail[]> {
    return this.prisma.assetNetworkDetail.findMany(args);
  }
  async assetNetworkDetail(
    args: Prisma.AssetNetworkDetailFindUniqueArgs
  ): Promise<PrismaAssetNetworkDetail | null> {
    return this.prisma.assetNetworkDetail.findUnique(args);
  }
  async createAssetNetworkDetail(
    args: Prisma.AssetNetworkDetailCreateArgs
  ): Promise<PrismaAssetNetworkDetail> {
    return this.prisma.assetNetworkDetail.create(args);
  }
  async updateAssetNetworkDetail(
    args: Prisma.AssetNetworkDetailUpdateArgs
  ): Promise<PrismaAssetNetworkDetail> {
    return this.prisma.assetNetworkDetail.update(args);
  }
  async deleteAssetNetworkDetail(
    args: Prisma.AssetNetworkDetailDeleteArgs
  ): Promise<PrismaAssetNetworkDetail> {
    return this.prisma.assetNetworkDetail.delete(args);
  }

  async findIpAddress(
    parentId: bigint,
    args: Prisma.IpAddressFindManyArgs
  ): Promise<PrismaIpAddress[]> {
    return this.prisma.assetNetworkDetail
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ipAddress(args);
  }

  async getAsset(parentId: bigint): Promise<PrismaAsset | null> {
    return this.prisma.assetNetworkDetail
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
