/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AssetNetworkDetailService } from "../assetNetworkDetail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AssetNetworkDetailCreateInput } from "./AssetNetworkDetailCreateInput";
import { AssetNetworkDetail } from "./AssetNetworkDetail";
import { AssetNetworkDetailFindManyArgs } from "./AssetNetworkDetailFindManyArgs";
import { AssetNetworkDetailWhereUniqueInput } from "./AssetNetworkDetailWhereUniqueInput";
import { AssetNetworkDetailUpdateInput } from "./AssetNetworkDetailUpdateInput";
import { IpAddressFindManyArgs } from "../../ipAddress/base/IpAddressFindManyArgs";
import { IpAddress } from "../../ipAddress/base/IpAddress";
import { IpAddressWhereUniqueInput } from "../../ipAddress/base/IpAddressWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AssetNetworkDetailControllerBase {
  constructor(
    protected readonly service: AssetNetworkDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetNetworkDetail })
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAssetNetworkDetail(
    @common.Body() data: AssetNetworkDetailCreateInput
  ): Promise<AssetNetworkDetail> {
    return await this.service.createAssetNetworkDetail({
      data: {
        ...data,

        asset: data.asset
          ? {
              connect: data.asset,
            }
          : undefined,
      },
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        created: true,
        dnsName: true,
        domain: true,
        hostname: true,
        id: true,
        macAddress: true,
        memberOfCluster: true,
        previousHostname: true,
        primaryMacAddress: true,
        updated: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetNetworkDetail] })
  @ApiNestedQuery(AssetNetworkDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assetNetworkDetails(
    @common.Req() request: Request
  ): Promise<AssetNetworkDetail[]> {
    const args = plainToClass(AssetNetworkDetailFindManyArgs, request.query);
    return this.service.assetNetworkDetails({
      ...args,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        created: true,
        dnsName: true,
        domain: true,
        hostname: true,
        id: true,
        macAddress: true,
        memberOfCluster: true,
        previousHostname: true,
        primaryMacAddress: true,
        updated: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetNetworkDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assetNetworkDetail(
    @common.Param() params: AssetNetworkDetailWhereUniqueInput
  ): Promise<AssetNetworkDetail | null> {
    const result = await this.service.assetNetworkDetail({
      where: params,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        created: true,
        dnsName: true,
        domain: true,
        hostname: true,
        id: true,
        macAddress: true,
        memberOfCluster: true,
        previousHostname: true,
        primaryMacAddress: true,
        updated: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetNetworkDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAssetNetworkDetail(
    @common.Param() params: AssetNetworkDetailWhereUniqueInput,
    @common.Body() data: AssetNetworkDetailUpdateInput
  ): Promise<AssetNetworkDetail | null> {
    try {
      return await this.service.updateAssetNetworkDetail({
        where: params,
        data: {
          ...data,

          asset: data.asset
            ? {
                connect: data.asset,
              }
            : undefined,
        },
        select: {
          asset: {
            select: {
              id: true,
            },
          },

          created: true,
          dnsName: true,
          domain: true,
          hostname: true,
          id: true,
          macAddress: true,
          memberOfCluster: true,
          previousHostname: true,
          primaryMacAddress: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetNetworkDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAssetNetworkDetail(
    @common.Param() params: AssetNetworkDetailWhereUniqueInput
  ): Promise<AssetNetworkDetail | null> {
    try {
      return await this.service.deleteAssetNetworkDetail({
        where: params,
        select: {
          asset: {
            select: {
              id: true,
            },
          },

          created: true,
          dnsName: true,
          domain: true,
          hostname: true,
          id: true,
          macAddress: true,
          memberOfCluster: true,
          previousHostname: true,
          primaryMacAddress: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ipAddress")
  @ApiNestedQuery(IpAddressFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "IpAddress",
    action: "read",
    possession: "any",
  })
  async findIpAddress(
    @common.Req() request: Request,
    @common.Param() params: AssetNetworkDetailWhereUniqueInput
  ): Promise<IpAddress[]> {
    const query = plainToClass(IpAddressFindManyArgs, request.query);
    const results = await this.service.findIpAddress(params.id, {
      ...query,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        assetNetworkDetails: {
          select: {
            id: true,
          },
        },

        created: true,
        dnsName: true,
        id: true,
        ip: true,
        isPrimary: true,
        subnetPurpose: true,
        typeField: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ipAddress")
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "update",
    possession: "any",
  })
  async connectIpAddress(
    @common.Param() params: AssetNetworkDetailWhereUniqueInput,
    @common.Body() body: IpAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ipAddress: {
        connect: body,
      },
    };
    await this.service.updateAssetNetworkDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ipAddress")
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "update",
    possession: "any",
  })
  async updateIpAddress(
    @common.Param() params: AssetNetworkDetailWhereUniqueInput,
    @common.Body() body: IpAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ipAddress: {
        set: body,
      },
    };
    await this.service.updateAssetNetworkDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ipAddress")
  @nestAccessControl.UseRoles({
    resource: "AssetNetworkDetail",
    action: "update",
    possession: "any",
  })
  async disconnectIpAddress(
    @common.Param() params: AssetNetworkDetailWhereUniqueInput,
    @common.Body() body: IpAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ipAddress: {
        disconnect: body,
      },
    };
    await this.service.updateAssetNetworkDetail({
      where: params,
      data,
      select: { id: true },
    });
  }
}
