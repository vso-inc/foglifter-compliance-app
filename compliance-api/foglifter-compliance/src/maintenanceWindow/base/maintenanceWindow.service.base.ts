/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MaintenanceWindow as PrismaMaintenanceWindow,
  Asset as PrismaAsset,
} from "@prisma/client";

export class MaintenanceWindowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MaintenanceWindowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.maintenanceWindow.count(args);
  }

  async maintenanceWindows(
    args: Prisma.MaintenanceWindowFindManyArgs
  ): Promise<PrismaMaintenanceWindow[]> {
    return this.prisma.maintenanceWindow.findMany(args);
  }
  async maintenanceWindow(
    args: Prisma.MaintenanceWindowFindUniqueArgs
  ): Promise<PrismaMaintenanceWindow | null> {
    return this.prisma.maintenanceWindow.findUnique(args);
  }
  async createMaintenanceWindow(
    args: Prisma.MaintenanceWindowCreateArgs
  ): Promise<PrismaMaintenanceWindow> {
    return this.prisma.maintenanceWindow.create(args);
  }
  async updateMaintenanceWindow(
    args: Prisma.MaintenanceWindowUpdateArgs
  ): Promise<PrismaMaintenanceWindow> {
    return this.prisma.maintenanceWindow.update(args);
  }
  async deleteMaintenanceWindow(
    args: Prisma.MaintenanceWindowDeleteArgs
  ): Promise<PrismaMaintenanceWindow> {
    return this.prisma.maintenanceWindow.delete(args);
  }

  async getAsset(parentId: bigint): Promise<PrismaAsset | null> {
    return this.prisma.maintenanceWindow
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
