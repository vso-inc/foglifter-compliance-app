/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MaintenanceWindow } from "./MaintenanceWindow";
import { MaintenanceWindowCountArgs } from "./MaintenanceWindowCountArgs";
import { MaintenanceWindowFindManyArgs } from "./MaintenanceWindowFindManyArgs";
import { MaintenanceWindowFindUniqueArgs } from "./MaintenanceWindowFindUniqueArgs";
import { CreateMaintenanceWindowArgs } from "./CreateMaintenanceWindowArgs";
import { UpdateMaintenanceWindowArgs } from "./UpdateMaintenanceWindowArgs";
import { DeleteMaintenanceWindowArgs } from "./DeleteMaintenanceWindowArgs";
import { Asset } from "../../asset/base/Asset";
import { MaintenanceWindowService } from "../maintenanceWindow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MaintenanceWindow)
export class MaintenanceWindowResolverBase {
  constructor(
    protected readonly service: MaintenanceWindowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceWindow",
    action: "read",
    possession: "any",
  })
  async _maintenanceWindowsMeta(
    @graphql.Args() args: MaintenanceWindowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MaintenanceWindow])
  @nestAccessControl.UseRoles({
    resource: "MaintenanceWindow",
    action: "read",
    possession: "any",
  })
  async maintenanceWindows(
    @graphql.Args() args: MaintenanceWindowFindManyArgs
  ): Promise<MaintenanceWindow[]> {
    return this.service.maintenanceWindows(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MaintenanceWindow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceWindow",
    action: "read",
    possession: "own",
  })
  async maintenanceWindow(
    @graphql.Args() args: MaintenanceWindowFindUniqueArgs
  ): Promise<MaintenanceWindow | null> {
    const result = await this.service.maintenanceWindow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceWindow)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceWindow",
    action: "create",
    possession: "any",
  })
  async createMaintenanceWindow(
    @graphql.Args() args: CreateMaintenanceWindowArgs
  ): Promise<MaintenanceWindow> {
    return await this.service.createMaintenanceWindow({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceWindow)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceWindow",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceWindow(
    @graphql.Args() args: UpdateMaintenanceWindowArgs
  ): Promise<MaintenanceWindow | null> {
    try {
      return await this.service.updateMaintenanceWindow({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceWindow)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceWindow",
    action: "delete",
    possession: "any",
  })
  async deleteMaintenanceWindow(
    @graphql.Args() args: DeleteMaintenanceWindowArgs
  ): Promise<MaintenanceWindow | null> {
    try {
      return await this.service.deleteMaintenanceWindow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: MaintenanceWindow
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
