/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Subnet } from "./Subnet";
import { SubnetCountArgs } from "./SubnetCountArgs";
import { SubnetFindManyArgs } from "./SubnetFindManyArgs";
import { SubnetFindUniqueArgs } from "./SubnetFindUniqueArgs";
import { CreateSubnetArgs } from "./CreateSubnetArgs";
import { UpdateSubnetArgs } from "./UpdateSubnetArgs";
import { DeleteSubnetArgs } from "./DeleteSubnetArgs";
import { SubnetService } from "../subnet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Subnet)
export class SubnetResolverBase {
  constructor(
    protected readonly service: SubnetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Subnet",
    action: "read",
    possession: "any",
  })
  async _subnetsMeta(
    @graphql.Args() args: SubnetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Subnet])
  @nestAccessControl.UseRoles({
    resource: "Subnet",
    action: "read",
    possession: "any",
  })
  async subnets(@graphql.Args() args: SubnetFindManyArgs): Promise<Subnet[]> {
    return this.service.subnets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Subnet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Subnet",
    action: "read",
    possession: "own",
  })
  async subnet(
    @graphql.Args() args: SubnetFindUniqueArgs
  ): Promise<Subnet | null> {
    const result = await this.service.subnet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Subnet)
  @nestAccessControl.UseRoles({
    resource: "Subnet",
    action: "create",
    possession: "any",
  })
  async createSubnet(@graphql.Args() args: CreateSubnetArgs): Promise<Subnet> {
    return await this.service.createSubnet({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Subnet)
  @nestAccessControl.UseRoles({
    resource: "Subnet",
    action: "update",
    possession: "any",
  })
  async updateSubnet(
    @graphql.Args() args: UpdateSubnetArgs
  ): Promise<Subnet | null> {
    try {
      return await this.service.updateSubnet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Subnet)
  @nestAccessControl.UseRoles({
    resource: "Subnet",
    action: "delete",
    possession: "any",
  })
  async deleteSubnet(
    @graphql.Args() args: DeleteSubnetArgs
  ): Promise<Subnet | null> {
    try {
      return await this.service.deleteSubnet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
