/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ConfigModel } from "./ConfigModel";
import { ConfigModelCountArgs } from "./ConfigModelCountArgs";
import { ConfigModelFindManyArgs } from "./ConfigModelFindManyArgs";
import { ConfigModelFindUniqueArgs } from "./ConfigModelFindUniqueArgs";
import { CreateConfigModelArgs } from "./CreateConfigModelArgs";
import { UpdateConfigModelArgs } from "./UpdateConfigModelArgs";
import { DeleteConfigModelArgs } from "./DeleteConfigModelArgs";
import { ConfigModelService } from "../configModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ConfigModel)
export class ConfigModelResolverBase {
  constructor(
    protected readonly service: ConfigModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "read",
    possession: "any",
  })
  async _configModelsMeta(
    @graphql.Args() args: ConfigModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ConfigModel])
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "read",
    possession: "any",
  })
  async configModels(
    @graphql.Args() args: ConfigModelFindManyArgs
  ): Promise<ConfigModel[]> {
    return this.service.configModels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ConfigModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "read",
    possession: "own",
  })
  async configModel(
    @graphql.Args() args: ConfigModelFindUniqueArgs
  ): Promise<ConfigModel | null> {
    const result = await this.service.configModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConfigModel)
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "create",
    possession: "any",
  })
  async createConfigModel(
    @graphql.Args() args: CreateConfigModelArgs
  ): Promise<ConfigModel> {
    return await this.service.createConfigModel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConfigModel)
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "update",
    possession: "any",
  })
  async updateConfigModel(
    @graphql.Args() args: UpdateConfigModelArgs
  ): Promise<ConfigModel | null> {
    try {
      return await this.service.updateConfigModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConfigModel)
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "delete",
    possession: "any",
  })
  async deleteConfigModel(
    @graphql.Args() args: DeleteConfigModelArgs
  ): Promise<ConfigModel | null> {
    try {
      return await this.service.deleteConfigModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
