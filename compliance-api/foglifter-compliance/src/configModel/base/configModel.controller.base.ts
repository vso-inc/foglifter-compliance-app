/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ConfigModelService } from "../configModel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ConfigModelCreateInput } from "./ConfigModelCreateInput";
import { ConfigModel } from "./ConfigModel";
import { ConfigModelFindManyArgs } from "./ConfigModelFindManyArgs";
import { ConfigModelWhereUniqueInput } from "./ConfigModelWhereUniqueInput";
import { ConfigModelUpdateInput } from "./ConfigModelUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ConfigModelControllerBase {
  constructor(
    protected readonly service: ConfigModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConfigModel })
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createConfigModel(
    @common.Body() data: ConfigModelCreateInput
  ): Promise<ConfigModel> {
    return await this.service.createConfigModel({
      data: data,
      select: {
        configName: true,
        configValue: true,
        created: true,
        description: true,
        id: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ConfigModel] })
  @ApiNestedQuery(ConfigModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async configModels(@common.Req() request: Request): Promise<ConfigModel[]> {
    const args = plainToClass(ConfigModelFindManyArgs, request.query);
    return this.service.configModels({
      ...args,
      select: {
        configName: true,
        configValue: true,
        created: true,
        description: true,
        id: true,
        updated: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConfigModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async configModel(
    @common.Param() params: ConfigModelWhereUniqueInput
  ): Promise<ConfigModel | null> {
    const result = await this.service.configModel({
      where: params,
      select: {
        configName: true,
        configValue: true,
        created: true,
        description: true,
        id: true,
        updated: true,
        updatedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConfigModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateConfigModel(
    @common.Param() params: ConfigModelWhereUniqueInput,
    @common.Body() data: ConfigModelUpdateInput
  ): Promise<ConfigModel | null> {
    try {
      return await this.service.updateConfigModel({
        where: params,
        data: data,
        select: {
          configName: true,
          configValue: true,
          created: true,
          description: true,
          id: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConfigModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConfigModel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteConfigModel(
    @common.Param() params: ConfigModelWhereUniqueInput
  ): Promise<ConfigModel | null> {
    try {
      return await this.service.deleteConfigModel({
        where: params,
        select: {
          configName: true,
          configValue: true,
          created: true,
          description: true,
          id: true,
          updated: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
