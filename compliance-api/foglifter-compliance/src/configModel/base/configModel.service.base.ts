/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ConfigModel as PrismaConfigModel } from "@prisma/client";

export class ConfigModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConfigModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.configModel.count(args);
  }

  async configModels(
    args: Prisma.ConfigModelFindManyArgs
  ): Promise<PrismaConfigModel[]> {
    return this.prisma.configModel.findMany(args);
  }
  async configModel(
    args: Prisma.ConfigModelFindUniqueArgs
  ): Promise<PrismaConfigModel | null> {
    return this.prisma.configModel.findUnique(args);
  }
  async createConfigModel(
    args: Prisma.ConfigModelCreateArgs
  ): Promise<PrismaConfigModel> {
    return this.prisma.configModel.create(args);
  }
  async updateConfigModel(
    args: Prisma.ConfigModelUpdateArgs
  ): Promise<PrismaConfigModel> {
    return this.prisma.configModel.update(args);
  }
  async deleteConfigModel(
    args: Prisma.ConfigModelDeleteArgs
  ): Promise<PrismaConfigModel> {
    return this.prisma.configModel.delete(args);
  }
}
