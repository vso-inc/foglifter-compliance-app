/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AttestationHost } from "./AttestationHost";
import { AttestationHostCountArgs } from "./AttestationHostCountArgs";
import { AttestationHostFindManyArgs } from "./AttestationHostFindManyArgs";
import { AttestationHostFindUniqueArgs } from "./AttestationHostFindUniqueArgs";
import { CreateAttestationHostArgs } from "./CreateAttestationHostArgs";
import { UpdateAttestationHostArgs } from "./UpdateAttestationHostArgs";
import { DeleteAttestationHostArgs } from "./DeleteAttestationHostArgs";
import { AttestationHostFixletFindManyArgs } from "../../attestationHostFixlet/base/AttestationHostFixletFindManyArgs";
import { AttestationHostFixlet } from "../../attestationHostFixlet/base/AttestationHostFixlet";
import { Asset } from "../../asset/base/Asset";
import { Attestation } from "../../attestation/base/Attestation";
import { AttestationHostService } from "../attestationHost.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AttestationHost)
export class AttestationHostResolverBase {
  constructor(
    protected readonly service: AttestationHostService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "read",
    possession: "any",
  })
  async _attestationHostsMeta(
    @graphql.Args() args: AttestationHostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AttestationHost])
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "read",
    possession: "any",
  })
  async attestationHosts(
    @graphql.Args() args: AttestationHostFindManyArgs
  ): Promise<AttestationHost[]> {
    return this.service.attestationHosts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AttestationHost, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "read",
    possession: "own",
  })
  async attestationHost(
    @graphql.Args() args: AttestationHostFindUniqueArgs
  ): Promise<AttestationHost | null> {
    const result = await this.service.attestationHost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttestationHost)
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "create",
    possession: "any",
  })
  async createAttestationHost(
    @graphql.Args() args: CreateAttestationHostArgs
  ): Promise<AttestationHost> {
    return await this.service.createAttestationHost({
      ...args,
      data: {
        ...args.data,

        asset: {
          connect: args.data.asset,
        },

        attestation: {
          connect: args.data.attestation,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttestationHost)
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "update",
    possession: "any",
  })
  async updateAttestationHost(
    @graphql.Args() args: UpdateAttestationHostArgs
  ): Promise<AttestationHost | null> {
    try {
      return await this.service.updateAttestationHost({
        ...args,
        data: {
          ...args.data,

          asset: {
            connect: args.data.asset,
          },

          attestation: {
            connect: args.data.attestation,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AttestationHost)
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "delete",
    possession: "any",
  })
  async deleteAttestationHost(
    @graphql.Args() args: DeleteAttestationHostArgs
  ): Promise<AttestationHost | null> {
    try {
      return await this.service.deleteAttestationHost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AttestationHostFixlet], {
    name: "attestationHostFixlet",
  })
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "read",
    possession: "any",
  })
  async findAttestationHostFixlet(
    @graphql.Parent() parent: AttestationHost,
    @graphql.Args() args: AttestationHostFixletFindManyArgs
  ): Promise<AttestationHostFixlet[]> {
    const results = await this.service.findAttestationHostFixlet(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: AttestationHost
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Attestation, {
    nullable: true,
    name: "attestation",
  })
  @nestAccessControl.UseRoles({
    resource: "Attestation",
    action: "read",
    possession: "any",
  })
  async getAttestation(
    @graphql.Parent() parent: AttestationHost
  ): Promise<Attestation | null> {
    const result = await this.service.getAttestation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
