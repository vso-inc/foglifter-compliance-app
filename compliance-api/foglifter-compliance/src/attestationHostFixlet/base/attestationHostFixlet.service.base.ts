/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AttestationHostFixlet as PrismaAttestationHostFixlet,
  AttestationHost as PrismaAttestationHost,
  PatchChannelFixlet as PrismaPatchChannelFixlet,
} from "@prisma/client";

export class AttestationHostFixletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AttestationHostFixletCountArgs, "select">
  ): Promise<number> {
    return this.prisma.attestationHostFixlet.count(args);
  }

  async attestationHostFixlets(
    args: Prisma.AttestationHostFixletFindManyArgs
  ): Promise<PrismaAttestationHostFixlet[]> {
    return this.prisma.attestationHostFixlet.findMany(args);
  }
  async attestationHostFixlet(
    args: Prisma.AttestationHostFixletFindUniqueArgs
  ): Promise<PrismaAttestationHostFixlet | null> {
    return this.prisma.attestationHostFixlet.findUnique(args);
  }
  async createAttestationHostFixlet(
    args: Prisma.AttestationHostFixletCreateArgs
  ): Promise<PrismaAttestationHostFixlet> {
    return this.prisma.attestationHostFixlet.create(args);
  }
  async updateAttestationHostFixlet(
    args: Prisma.AttestationHostFixletUpdateArgs
  ): Promise<PrismaAttestationHostFixlet> {
    return this.prisma.attestationHostFixlet.update(args);
  }
  async deleteAttestationHostFixlet(
    args: Prisma.AttestationHostFixletDeleteArgs
  ): Promise<PrismaAttestationHostFixlet> {
    return this.prisma.attestationHostFixlet.delete(args);
  }

  async getAttestationHost(
    parentId: number
  ): Promise<PrismaAttestationHost | null> {
    return this.prisma.attestationHostFixlet
      .findUnique({
        where: { id: parentId },
      })
      .attestationHost();
  }

  async getPatchChannelFixlet(
    parentId: number
  ): Promise<PrismaPatchChannelFixlet | null> {
    return this.prisma.attestationHostFixlet
      .findUnique({
        where: { id: parentId },
      })
      .patchChannelFixlet();
  }
}
