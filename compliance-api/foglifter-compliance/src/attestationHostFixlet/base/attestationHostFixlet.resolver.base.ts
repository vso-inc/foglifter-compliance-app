/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AttestationHostFixlet } from "./AttestationHostFixlet";
import { AttestationHostFixletCountArgs } from "./AttestationHostFixletCountArgs";
import { AttestationHostFixletFindManyArgs } from "./AttestationHostFixletFindManyArgs";
import { AttestationHostFixletFindUniqueArgs } from "./AttestationHostFixletFindUniqueArgs";
import { CreateAttestationHostFixletArgs } from "./CreateAttestationHostFixletArgs";
import { UpdateAttestationHostFixletArgs } from "./UpdateAttestationHostFixletArgs";
import { DeleteAttestationHostFixletArgs } from "./DeleteAttestationHostFixletArgs";
import { AttestationHost } from "../../attestationHost/base/AttestationHost";
import { PatchChannelFixlet } from "../../patchChannelFixlet/base/PatchChannelFixlet";
import { AttestationHostFixletService } from "../attestationHostFixlet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AttestationHostFixlet)
export class AttestationHostFixletResolverBase {
  constructor(
    protected readonly service: AttestationHostFixletService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "read",
    possession: "any",
  })
  async _attestationHostFixletsMeta(
    @graphql.Args() args: AttestationHostFixletCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AttestationHostFixlet])
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "read",
    possession: "any",
  })
  async attestationHostFixlets(
    @graphql.Args() args: AttestationHostFixletFindManyArgs
  ): Promise<AttestationHostFixlet[]> {
    return this.service.attestationHostFixlets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AttestationHostFixlet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "read",
    possession: "own",
  })
  async attestationHostFixlet(
    @graphql.Args() args: AttestationHostFixletFindUniqueArgs
  ): Promise<AttestationHostFixlet | null> {
    const result = await this.service.attestationHostFixlet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttestationHostFixlet)
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "create",
    possession: "any",
  })
  async createAttestationHostFixlet(
    @graphql.Args() args: CreateAttestationHostFixletArgs
  ): Promise<AttestationHostFixlet> {
    return await this.service.createAttestationHostFixlet({
      ...args,
      data: {
        ...args.data,

        attestationHost: {
          connect: args.data.attestationHost,
        },

        patchChannelFixlet: {
          connect: args.data.patchChannelFixlet,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttestationHostFixlet)
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "update",
    possession: "any",
  })
  async updateAttestationHostFixlet(
    @graphql.Args() args: UpdateAttestationHostFixletArgs
  ): Promise<AttestationHostFixlet | null> {
    try {
      return await this.service.updateAttestationHostFixlet({
        ...args,
        data: {
          ...args.data,

          attestationHost: {
            connect: args.data.attestationHost,
          },

          patchChannelFixlet: {
            connect: args.data.patchChannelFixlet,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AttestationHostFixlet)
  @nestAccessControl.UseRoles({
    resource: "AttestationHostFixlet",
    action: "delete",
    possession: "any",
  })
  async deleteAttestationHostFixlet(
    @graphql.Args() args: DeleteAttestationHostFixletArgs
  ): Promise<AttestationHostFixlet | null> {
    try {
      return await this.service.deleteAttestationHostFixlet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AttestationHost, {
    nullable: true,
    name: "attestationHost",
  })
  @nestAccessControl.UseRoles({
    resource: "AttestationHost",
    action: "read",
    possession: "any",
  })
  async getAttestationHost(
    @graphql.Parent() parent: AttestationHostFixlet
  ): Promise<AttestationHost | null> {
    const result = await this.service.getAttestationHost(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PatchChannelFixlet, {
    nullable: true,
    name: "patchChannelFixlet",
  })
  @nestAccessControl.UseRoles({
    resource: "PatchChannelFixlet",
    action: "read",
    possession: "any",
  })
  async getPatchChannelFixlet(
    @graphql.Parent() parent: AttestationHostFixlet
  ): Promise<PatchChannelFixlet | null> {
    const result = await this.service.getPatchChannelFixlet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
