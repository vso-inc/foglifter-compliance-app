/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationDeployment as PrismaApplicationDeployment,
  Application as PrismaApplication,
  Asset as PrismaAsset,
} from "@prisma/client";

export class ApplicationDeploymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationDeploymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicationDeployment.count(args);
  }

  async applicationDeployments(
    args: Prisma.ApplicationDeploymentFindManyArgs
  ): Promise<PrismaApplicationDeployment[]> {
    return this.prisma.applicationDeployment.findMany(args);
  }
  async applicationDeployment(
    args: Prisma.ApplicationDeploymentFindUniqueArgs
  ): Promise<PrismaApplicationDeployment | null> {
    return this.prisma.applicationDeployment.findUnique(args);
  }
  async createApplicationDeployment(
    args: Prisma.ApplicationDeploymentCreateArgs
  ): Promise<PrismaApplicationDeployment> {
    return this.prisma.applicationDeployment.create(args);
  }
  async updateApplicationDeployment(
    args: Prisma.ApplicationDeploymentUpdateArgs
  ): Promise<PrismaApplicationDeployment> {
    return this.prisma.applicationDeployment.update(args);
  }
  async deleteApplicationDeployment(
    args: Prisma.ApplicationDeploymentDeleteArgs
  ): Promise<PrismaApplicationDeployment> {
    return this.prisma.applicationDeployment.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.applicationDeployment
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getAsset(parentId: number): Promise<PrismaAsset | null> {
    return this.prisma.applicationDeployment
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
