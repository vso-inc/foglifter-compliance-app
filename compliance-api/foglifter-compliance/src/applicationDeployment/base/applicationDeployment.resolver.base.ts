/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApplicationDeployment } from "./ApplicationDeployment";
import { ApplicationDeploymentCountArgs } from "./ApplicationDeploymentCountArgs";
import { ApplicationDeploymentFindManyArgs } from "./ApplicationDeploymentFindManyArgs";
import { ApplicationDeploymentFindUniqueArgs } from "./ApplicationDeploymentFindUniqueArgs";
import { CreateApplicationDeploymentArgs } from "./CreateApplicationDeploymentArgs";
import { UpdateApplicationDeploymentArgs } from "./UpdateApplicationDeploymentArgs";
import { DeleteApplicationDeploymentArgs } from "./DeleteApplicationDeploymentArgs";
import { Application } from "../../application/base/Application";
import { Asset } from "../../asset/base/Asset";
import { ApplicationDeploymentService } from "../applicationDeployment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationDeployment)
export class ApplicationDeploymentResolverBase {
  constructor(
    protected readonly service: ApplicationDeploymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "read",
    possession: "any",
  })
  async _applicationDeploymentsMeta(
    @graphql.Args() args: ApplicationDeploymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationDeployment])
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "read",
    possession: "any",
  })
  async applicationDeployments(
    @graphql.Args() args: ApplicationDeploymentFindManyArgs
  ): Promise<ApplicationDeployment[]> {
    return this.service.applicationDeployments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationDeployment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "read",
    possession: "own",
  })
  async applicationDeployment(
    @graphql.Args() args: ApplicationDeploymentFindUniqueArgs
  ): Promise<ApplicationDeployment | null> {
    const result = await this.service.applicationDeployment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationDeployment)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "create",
    possession: "any",
  })
  async createApplicationDeployment(
    @graphql.Args() args: CreateApplicationDeploymentArgs
  ): Promise<ApplicationDeployment> {
    return await this.service.createApplicationDeployment({
      ...args,
      data: {
        ...args.data,

        application: args.data.application
          ? {
              connect: args.data.application,
            }
          : undefined,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationDeployment)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "update",
    possession: "any",
  })
  async updateApplicationDeployment(
    @graphql.Args() args: UpdateApplicationDeploymentArgs
  ): Promise<ApplicationDeployment | null> {
    try {
      return await this.service.updateApplicationDeployment({
        ...args,
        data: {
          ...args.data,

          application: args.data.application
            ? {
                connect: args.data.application,
              }
            : undefined,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationDeployment)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDeployment",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationDeployment(
    @graphql.Args() args: DeleteApplicationDeploymentArgs
  ): Promise<ApplicationDeployment | null> {
    try {
      return await this.service.deleteApplicationDeployment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplication(
    @graphql.Parent() parent: ApplicationDeployment
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(
    @graphql.Parent() parent: ApplicationDeployment
  ): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
